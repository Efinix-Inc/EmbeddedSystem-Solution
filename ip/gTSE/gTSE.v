// =============================================================================
// Generated by efx_ipmgr
// Version: 2024.2.294
// IP Version: 6.3
// =============================================================================

////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013-2024 Efinix Inc. All rights reserved.              
//
// This   document  contains  proprietary information  which   is        
// protected by  copyright. All rights  are reserved.  This notice       
// refers to original work by Efinix, Inc. which may be derivitive       
// of other work distributed under license of the authors.  In the       
// case of derivative work, nothing in this notice overrides the         
// original author's license agreement.  Where applicable, the           
// original license agreement is included in it's original               
// unmodified form immediately below this header.                        
//                                                                       
// WARRANTY DISCLAIMER.                                                  
//     THE  DESIGN, CODE, OR INFORMATION ARE PROVIDED “AS IS” AND        
//     EFINIX MAKES NO WARRANTIES, EXPRESS OR IMPLIED WITH               
//     RESPECT THERETO, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES,  
//     INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF          
//     MERCHANTABILITY, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR    
//     PURPOSE.  SOME STATES DO NOT ALLOW EXCLUSIONS OF AN IMPLIED       
//     WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO LICENSEE.           
//                                                                       
// LIMITATION OF LIABILITY.                                              
//     NOTWITHSTANDING ANYTHING TO THE CONTRARY, EXCEPT FOR BODILY       
//     INJURY, EFINIX SHALL NOT BE LIABLE WITH RESPECT TO ANY SUBJECT    
//     MATTER OF THIS AGREEMENT UNDER TORT, CONTRACT, STRICT LIABILITY   
//     OR ANY OTHER LEGAL OR EQUITABLE THEORY (I) FOR ANY INDIRECT,      
//     SPECIAL, INCIDENTAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES OF ANY    
//     CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF      
//     GOODWILL, DATA OR PROFIT, WORK STOPPAGE, OR COMPUTER FAILURE OR   
//     MALFUNCTION, OR IN ANY EVENT (II) FOR ANY AMOUNT IN EXCESS, IN    
//     THE AGGREGATE, OF THE FEE PAID BY LICENSEE TO EFINIX HEREUNDER    
//     (OR, IF THE FEE HAS BEEN WAIVED, $100), EVEN IF EFINIX SHALL HAVE 
//     BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO 
//     NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR            
//     CONSEQUENTIAL DAMAGES, SO THIS LIMITATION AND EXCLUSION MAY NOT   
//     APPLY TO LICENSEE.                                                
//
////////////////////////////////////////////////////////////////////////////////

`define IP_UUID _ad85ad4e859847d39173988e5bf30bac
`define IP_NAME_CONCAT(a,b) a``b
`define IP_MODULE_NAME(name) `IP_NAME_CONCAT(name,`IP_UUID)
module gTSE
(
    input mac_reset,
    input proto_reset,
    input [9:0] s_axi_araddr,
    output [1:0] s_axi_rresp,
    output rx_mac_aclk,
    input tx_mac_aclk,
    output [2:0] eth_speed,
    output MdoEn,
    input rx_axis_clk,
    output rx_axis_mac_tuser,
    output Mdc,
    output rx_axis_mac_tlast,
    input Mdi,
    output rx_axis_mac_tvalid,
    output s_axi_rvalid,
    output s_axi_arready,
    input rx_axis_mac_tready,
    output [31:0] s_axi_rdata,
    input tx_axis_clk,
    input tx_axis_mac_tvalid,
    output s_axi_bvalid,
    output s_axi_wready,
    input s_axi_rready,
    input tx_axis_mac_tlast,
    output Mdo,
    input tx_axis_mac_tuser,
    input [31:0] s_axi_wdata,
    output tx_axis_mac_tready,
    output [3:0] rgmii_txd_HI,
    output [3:0] rgmii_txd_LO,
    output rgmii_tx_ctl_HI,
    output rgmii_tx_ctl_LO,
    output rgmii_txc_HI,
    output rgmii_txc_LO,
    input [3:0] rgmii_rxd_HI,
    input [3:0] rgmii_rxd_LO,
    input rgmii_rx_ctl_HI,
    input rgmii_rx_ctl_LO,
    input rgmii_rxc,
    input s_axi_aclk,
    input s_axi_bready,
    input [9:0] s_axi_awaddr,
    input s_axi_arvalid,
    input s_axi_awvalid,
    output s_axi_awready,
    input s_axi_wvalid,
    output [7:0] rx_axis_mac_tdata,
    input [7:0] tx_axis_mac_tdata,
    input [0:0] tx_axis_mac_tstrb,
    output [0:0] rx_axis_mac_tstrb,
    output [1:0] s_axi_bresp
);
`IP_MODULE_NAME(tsemac)
#(
    .VERSION (16),
    .TXFIFO_EN (1'b1),
    .RXFIFO_EN (1'b1),
    .TXFIFO_DTH (4096),
    .RXFIFO_DTH (4096),
    .PHY_INTF_MODE (0),
    .AXIS_DW (8),
    .RGMII_RXC_EDGE (1'b1),
    .RGMII_TXC_DLY (1'b1)
)
u_tsemac
(
    .mac_reset ( mac_reset ),
    .proto_reset ( proto_reset ),
    .s_axi_araddr ( s_axi_araddr ),
    .s_axi_rresp ( s_axi_rresp ),
    .rx_mac_aclk ( rx_mac_aclk ),
    .tx_mac_aclk ( tx_mac_aclk ),
    .eth_speed ( eth_speed ),
    .MdoEn ( MdoEn ),
    .rx_axis_clk ( rx_axis_clk ),
    .rx_axis_mac_tuser ( rx_axis_mac_tuser ),
    .Mdc ( Mdc ),
    .rx_axis_mac_tlast ( rx_axis_mac_tlast ),
    .Mdi ( Mdi ),
    .rx_axis_mac_tvalid ( rx_axis_mac_tvalid ),
    .s_axi_rvalid ( s_axi_rvalid ),
    .s_axi_arready ( s_axi_arready ),
    .rx_axis_mac_tready ( rx_axis_mac_tready ),
    .s_axi_rdata ( s_axi_rdata ),
    .tx_axis_clk ( tx_axis_clk ),
    .tx_axis_mac_tvalid ( tx_axis_mac_tvalid ),
    .s_axi_bvalid ( s_axi_bvalid ),
    .s_axi_wready ( s_axi_wready ),
    .s_axi_rready ( s_axi_rready ),
    .tx_axis_mac_tlast ( tx_axis_mac_tlast ),
    .Mdo ( Mdo ),
    .tx_axis_mac_tuser ( tx_axis_mac_tuser ),
    .s_axi_wdata ( s_axi_wdata ),
    .tx_axis_mac_tready ( tx_axis_mac_tready ),
    .rgmii_txd_HI ( rgmii_txd_HI ),
    .rgmii_txd_LO ( rgmii_txd_LO ),
    .rgmii_tx_ctl_HI ( rgmii_tx_ctl_HI ),
    .rgmii_tx_ctl_LO ( rgmii_tx_ctl_LO ),
    .rgmii_txc_HI ( rgmii_txc_HI ),
    .rgmii_txc_LO ( rgmii_txc_LO ),
    .rgmii_rxd_HI ( rgmii_rxd_HI ),
    .rgmii_rxd_LO ( rgmii_rxd_LO ),
    .rgmii_rx_ctl_HI ( rgmii_rx_ctl_HI ),
    .rgmii_rx_ctl_LO ( rgmii_rx_ctl_LO ),
    .rgmii_rxc ( rgmii_rxc ),
    .s_axi_aclk ( s_axi_aclk ),
    .s_axi_bready ( s_axi_bready ),
    .s_axi_awaddr ( s_axi_awaddr ),
    .s_axi_arvalid ( s_axi_arvalid ),
    .s_axi_awvalid ( s_axi_awvalid ),
    .s_axi_awready ( s_axi_awready ),
    .s_axi_wvalid ( s_axi_wvalid ),
    .rx_axis_mac_tdata ( rx_axis_mac_tdata ),
    .tx_axis_mac_tdata ( tx_axis_mac_tdata ),
    .tx_axis_mac_tstrb ( tx_axis_mac_tstrb ),
    .rx_axis_mac_tstrb ( rx_axis_mac_tstrb ),
    .s_axi_bresp ( s_axi_bresp )
);
endmodule

/////////////////////////////////////////////////////////////////////////////
//           _____       
//          / _______    Copyright (C) 2013-2021 Efinix Inc. All rights reserved.
//         / /       \   
//        / /  ..    /   simple_dual_port_ram_fifo.v
//       / / .'     /    
//    __/ /.'      /     Description:
//   __   \       /      EFX FIFO
//  /_/ /\ \_____/ /     
// ____/  \_______/      
//
// *******************************
// Revisions:
//
// *******************************

module `IP_MODULE_NAME(efx_fifo_top) # (
    parameter FAMILY             = "TRION",       // New Param
    parameter SYNC_CLK           = 0,
    parameter BYPASS_RESET_SYNC  = 0,             // New Param
    parameter SYNC_STAGE         = 2,             // New Param
    parameter MODE               = "STANDARD",
    parameter DEPTH              = 512,           // Reverted (Equivalent to WDATA_DEPTH) 
    parameter DATA_WIDTH         = 32,            // Reverted (Equivalent to WDATA_WIDTH)
    parameter PIPELINE_REG       = 1,             // Reverted (By default is ON)
    parameter OPTIONAL_FLAGS     = 1,             // Reverted
    parameter OUTPUT_REG         = 0,
    parameter PROGRAMMABLE_FULL  = "STATIC_DUAL", // Set to "NONE" if not require this feature
    parameter PROG_FULL_ASSERT   = 27,
    parameter PROG_FULL_NEGATE   = 23,
    parameter PROGRAMMABLE_EMPTY = "STATIC_DUAL", // Set to "NONE" if not require this feature
    parameter PROG_EMPTY_ASSERT  = 5,
    parameter PROG_EMPTY_NEGATE  = 7,
    parameter ALMOST_FLAG        = OPTIONAL_FLAGS,
    parameter HANDSHAKE_FLAG     = OPTIONAL_FLAGS,
    parameter ASYM_WIDTH_RATIO   = 4,
    parameter WADDR_WIDTH        = depth2width(DEPTH),
    parameter RDATA_WIDTH        = rdwidthcompute(ASYM_WIDTH_RATIO,DATA_WIDTH),
    parameter RD_DEPTH           = rddepthcompute(DEPTH,DATA_WIDTH,RDATA_WIDTH),
    parameter RADDR_WIDTH        = depth2width(RD_DEPTH),
    parameter ENDIANESS		      = 0,
    parameter OVERFLOW_PROTECT   = 1,
    parameter UNDERFLOW_PROTECT  = 1,
    parameter RAM_STYLE          = "block_ram"

)(
    input  wire                   a_rst_i,
    input  wire                   a_wr_rst_i,
    input  wire                   a_rd_rst_i,
    input  wire                   clk_i,
    input  wire                   wr_clk_i,
    input  wire                   rd_clk_i,
    input  wire                   wr_en_i,
    input  wire                   rd_en_i,
    input  wire [DATA_WIDTH-1:0]  wdata,
    output wire                   almost_full_o,
    output wire                   prog_full_o,
    output wire                   full_o,
    output wire                   overflow_o,
    output wire                   wr_ack_o,
    output wire [WADDR_WIDTH :0]  datacount_o,
    output wire [WADDR_WIDTH :0]  wr_datacount_o,
    output wire                   empty_o,
    output wire                   almost_empty_o,
    output wire                   prog_empty_o,
    output wire                   underflow_o,
    output wire                   rd_valid_o,
    output wire [RDATA_WIDTH-1:0] rdata,
    output wire [RADDR_WIDTH :0]  rd_datacount_o,
    output wire                   rst_busy
); 

localparam WR_DEPTH      = DEPTH;
localparam WDATA_WIDTH   = DATA_WIDTH;
localparam RAM_MUX_RATIO = (RDATA_WIDTH <= WDATA_WIDTH/32) ? 32 :
                           (RDATA_WIDTH <= WDATA_WIDTH/16) ? 16 :
                           (RDATA_WIDTH <= WDATA_WIDTH/8)  ? 8  :
                           (RDATA_WIDTH <= WDATA_WIDTH/4)  ? 4  :
                           (RDATA_WIDTH <= WDATA_WIDTH/2)  ? 2  :
                           (RDATA_WIDTH <= WDATA_WIDTH)    ? 1  :
                           (RDATA_WIDTH <= WDATA_WIDTH*2)  ? 2  :
                           (RDATA_WIDTH <= WDATA_WIDTH*4)  ? 4  :
                           (RDATA_WIDTH <= WDATA_WIDTH*8)  ? 8  :
                           (RDATA_WIDTH <= WDATA_WIDTH*16) ? 16 : 32;           

wire                   wr_rst_int;
wire                   rd_rst_int;
wire                   wr_en_int;
wire                   rd_en_int;
wire [WADDR_WIDTH-1:0] waddr;
wire [RADDR_WIDTH-1:0] raddr;
wire                   wr_clk_int;
wire                   rd_clk_int;
wire [WADDR_WIDTH :0]  wr_datacount_int;
wire [RADDR_WIDTH :0]  rd_datacount_int;

generate
    if (ASYM_WIDTH_RATIO == 4) begin
        if (SYNC_CLK) begin
            assign wr_clk_int     = clk_i;    
            assign rd_clk_int     = clk_i;
            assign datacount_o    = wr_datacount_int;
            assign wr_datacount_o = {(WADDR_WIDTH+1){1'b0}};
            assign rd_datacount_o = {(RADDR_WIDTH+1){1'b0}};
        end
        else begin
            assign wr_clk_int     = wr_clk_i;    
            assign rd_clk_int     = rd_clk_i;
            assign datacount_o    = {(WADDR_WIDTH+1){1'b0}};
            assign wr_datacount_o = wr_datacount_int;
            assign rd_datacount_o = rd_datacount_int;
        end
    end
    else begin
        assign datacount_o    = {(WADDR_WIDTH+1){1'b0}};
        assign wr_datacount_o = wr_datacount_int;
        assign rd_datacount_o = rd_datacount_int;
        if (SYNC_CLK) begin
            assign wr_clk_int     = clk_i;    
            assign rd_clk_int     = clk_i;
        end
        else begin
            assign wr_clk_int     = wr_clk_i;    
            assign rd_clk_int     = rd_clk_i;
        end
    end    

    if (!SYNC_CLK) begin
        //(* async_reg = "true" *) reg [1:0] wr_rst;
        //(* async_reg = "true" *) reg [1:0] rd_rst;
        //
        //always @ (posedge wr_clk_int or posedge a_rst_i) begin
        //    if (a_rst_i) 
        //        wr_rst <= 2'b11;
        //    else 
        //        wr_rst <= {wr_rst[0],1'b0};            
        //end
        //
        //always @ (posedge rd_clk_int or posedge a_rst_i) begin
        //    if (a_rst_i) 
        //        rd_rst <= 2'b11;
        //    else 
        //        rd_rst <= {rd_rst[0],1'b0};            
        //end
        

        if (BYPASS_RESET_SYNC) begin
            assign wr_rst_int = a_wr_rst_i;
            assign rd_rst_int = a_rd_rst_i; 
            assign rst_busy   = 1'b0;
        end 
        else begin
            `IP_MODULE_NAME(efx_resetsync) #(
               .ACTIVE_LOW (0)
            ) efx_resetsync_wr_rst (
               .clk   (wr_clk_int),
               .reset (a_rst_i),
               .d_o   (wr_rst_int)
            );

            `IP_MODULE_NAME(efx_resetsync) #(
               .ACTIVE_LOW (0)
            ) efx_resetsync_rd_rst (
               .clk   (rd_clk_int),
               .reset (a_rst_i),
               .d_o   (rd_rst_int)
            );
            assign rst_busy   = wr_rst_int | rd_rst_int;
        end

    end
    else begin
        //(* async_reg = "true" *) reg [1:0] a_rst;
        //
        //always @ (posedge clk_i or posedge a_rst_i) begin
        //    if (a_rst_i) 
        //        a_rst <= 2'b11;
        //    else 
        //        a_rst <= {a_rst[0],1'b0};            
        //end
        wire   a_rst;

        `IP_MODULE_NAME(efx_resetsync) #(
           .ACTIVE_LOW (0)
        ) efx_resetsync_a_rst (
           .clk   (clk_i),
           .reset (a_rst_i),
           .d_o   (a_rst)
        );

        if (BYPASS_RESET_SYNC) begin
            assign wr_rst_int = a_rst_i;
            assign rd_rst_int = a_rst_i;
            assign rst_busy   = 1'b0;
        end
        else begin
            assign wr_rst_int = a_rst;
            assign rd_rst_int = a_rst;   
            assign rst_busy   = wr_rst_int | rd_rst_int;
        end
    end 
endgenerate

`IP_MODULE_NAME(efx_fifo_ram) # (
    .FAMILY        (FAMILY),
    .WR_DEPTH      (WR_DEPTH),
    .RD_DEPTH      (RD_DEPTH),
    .WDATA_WIDTH   (WDATA_WIDTH),
    .RDATA_WIDTH   (RDATA_WIDTH),
    .WADDR_WIDTH   (WADDR_WIDTH),
    .RADDR_WIDTH   (RADDR_WIDTH),
    .OUTPUT_REG    (OUTPUT_REG),
    .RAM_MUX_RATIO (RAM_MUX_RATIO),
    .ENDIANESS	    (ENDIANESS),
    .RAM_STYLE     (RAM_STYLE)
) xefx_fifo_ram (
    .wdata (wdata), 
    .waddr (waddr),
    .raddr (raddr), 
    .we    (wr_en_int), 
    .re    (rd_en_int),
    .wclk  (wr_clk_int),
    .rclk  (rd_clk_int),
    .rdata (rdata)
);

`IP_MODULE_NAME(efx_fifo_ctl) # (
    .SYNC_CLK           (SYNC_CLK),
    .SYNC_STAGE         (SYNC_STAGE),
    .MODE               (MODE),
    .WR_DEPTH           (WR_DEPTH),
    .WADDR_WIDTH        (WADDR_WIDTH),
    .RADDR_WIDTH        (RADDR_WIDTH),
    .ASYM_WIDTH_RATIO   (ASYM_WIDTH_RATIO),
    .RAM_MUX_RATIO      (RAM_MUX_RATIO),
    .PIPELINE_REG       (PIPELINE_REG),
    .ALMOST_FLAG        (ALMOST_FLAG),
    .PROGRAMMABLE_FULL  (PROGRAMMABLE_FULL),
    .PROG_FULL_ASSERT   (PROG_FULL_ASSERT),
    .PROG_FULL_NEGATE   (PROG_FULL_NEGATE),
    .PROGRAMMABLE_EMPTY (PROGRAMMABLE_EMPTY),
    .PROG_EMPTY_ASSERT  (PROG_EMPTY_ASSERT),
    .PROG_EMPTY_NEGATE  (PROG_EMPTY_NEGATE),
    .OUTPUT_REG         (OUTPUT_REG),
    .HANDSHAKE_FLAG     (HANDSHAKE_FLAG),
    .OVERFLOW_PROTECT   (OVERFLOW_PROTECT),
    .UNDERFLOW_PROTECT  (UNDERFLOW_PROTECT)
) xefx_fifo_ctl (
    .wr_rst          (wr_rst_int),
    .rd_rst          (rd_rst_int),
    .wclk            (wr_clk_int),
    .rclk            (rd_clk_int),
    .we              (wr_en_i),
    .re              (rd_en_i),
    .wr_full         (full_o),
    .wr_ack          (wr_ack_o),
    .rd_empty        (empty_o),
    .wr_almost_full  (almost_full_o),
    .rd_almost_empty (almost_empty_o),
    .wr_prog_full    (prog_full_o),
    .rd_prog_empty   (prog_empty_o),
    .wr_en_int       (wr_en_int),
    .rd_en_int       (rd_en_int),
    .waddr           (waddr),
    .raddr           (raddr),
    .wr_datacount    (wr_datacount_int),
    .rd_datacount    (rd_datacount_int),
    .rd_vld          (rd_valid_o),
    .wr_overflow     (overflow_o),
    .rd_underflow    (underflow_o)
);

function integer depth2width;
input [31:0] depth;
begin : fnDepth2Width
    if (depth > 1) begin
        depth = depth - 1;
        for (depth2width=0; depth>0; depth2width = depth2width + 1)
            depth = depth>>1;
        end
    else
       depth2width = 0;
end
endfunction 

function integer width2depth;
input [31:0] width;
begin : fnWidth2Depth
    width2depth = width**2;
end
endfunction

function integer rdwidthcompute;
input [31:0] asym_option;
input [31:0] wr_width;
begin : RdWidthCompute
    rdwidthcompute = (asym_option==0)? wr_width/16 :
                     (asym_option==1)? wr_width/8  :
                     (asym_option==2)? wr_width/4  :
                     (asym_option==3)? wr_width/2  :
                     (asym_option==4)? wr_width/1  :
                     (asym_option==5)? wr_width*2  :
                     (asym_option==6)? wr_width*4  :
                     (asym_option==7)? wr_width*8  :
                     (asym_option==8)? wr_width*16 : wr_width/1;
end
endfunction

function integer rddepthcompute;
input [31:0] wr_depth;
input [31:0] wr_width;
input [31:0] rd_width;
begin : RdDepthCompute
    rddepthcompute = (wr_depth * wr_width) / rd_width;
end
endfunction

endmodule


/////////////////////////////////////////////////////////////////////////////
//           _____       
//          / _______    Copyright (C) 2013-2021 Efinix Inc. All rights reserved.
//         / /       \   
//        / /  ..    /   simple_dual_port_ram_fifo.v
//       / / .'     /    
//    __/ /.'      /     Description:
//   __   \       /      EFX FIFO
//  /_/ /\ \_____/ /     
// ____/  \_______/      
//
// *******************************
// Revisions:
//
// *******************************

module `IP_MODULE_NAME(efx_fifo_ram) #(
    parameter FAMILY        = "TRION",
    parameter WR_DEPTH      = 512,
    parameter RD_DEPTH      = 512,
    parameter WDATA_WIDTH   = 8,
    parameter RDATA_WIDTH   = 8,
    parameter WADDR_WIDTH   = 9,
    parameter RADDR_WIDTH   = 9,
    parameter OUTPUT_REG    = 1,
    parameter RAM_MUX_RATIO = 4,
    parameter ENDIANESS 	 = 0, //0: Big endian (default)   1: Little endian 
    parameter RAM_STYLE     = "block_ram"
) (
    input  wire                     wclk,
    input  wire                     rclk,
    input  wire                     we,
    input  wire                     re,
    input  wire [(WDATA_WIDTH-1):0] wdata,
    input  wire [(WADDR_WIDTH-1):0] waddr,
    input  wire [(RADDR_WIDTH-1):0] raddr,
    output wire [(RDATA_WIDTH-1):0] rdata
);

localparam MEM_DEPTH         = (WR_DEPTH > RD_DEPTH) ? WR_DEPTH : RD_DEPTH;
localparam MEM_DATA_WIDTH    = (WDATA_WIDTH > RDATA_WIDTH) ? RDATA_WIDTH : WDATA_WIDTH;   
localparam LSB_WIDTH         = (WADDR_WIDTH > RADDR_WIDTH) ? (WADDR_WIDTH - RADDR_WIDTH) : (RADDR_WIDTH - WADDR_WIDTH);
localparam RDATA_WDATA_RATIO = (RDATA_WIDTH <= WDATA_WIDTH/32) ? "ONE_THIRTYTWO" :
                               (RDATA_WIDTH <= WDATA_WIDTH/16) ? "ONE_SIXTEENTH" :
                               (RDATA_WIDTH <= WDATA_WIDTH/8)  ? "ONE_EIGHTH"    :
                               (RDATA_WIDTH <= WDATA_WIDTH/4)  ? "ONE_FOURTH"    :
                               (RDATA_WIDTH <= WDATA_WIDTH/2)  ? "ONE_HALF"      :
                               (RDATA_WIDTH <= WDATA_WIDTH)    ? "ONE"           :
                               (RDATA_WIDTH <= WDATA_WIDTH*2)  ? "TWO_TIMES"     :
                               (RDATA_WIDTH <= WDATA_WIDTH*4)  ? "FOUR_TIMES"    :
                               (RDATA_WIDTH <= WDATA_WIDTH*4)  ? "EIGHT_TIMES"   :
                               (RDATA_WIDTH <= WDATA_WIDTH*4)  ? "SIXTEEN_TIMES" : "THIRTYTWO_TIMES";

(* syn_ramstyle = RAM_STYLE *) reg [MEM_DATA_WIDTH-1:0] ram[MEM_DEPTH-1:0];
reg [RDATA_WIDTH-1:0]    r_rdata_1P;
reg [RDATA_WIDTH-1:0]    r_rdata_2P;

wire                     re_int;

generate
    if (FAMILY == "TRION") begin
        if (RDATA_WDATA_RATIO == "ONE") begin
            always @ (posedge wclk) begin
                if (we)
                    ram[waddr] <= wdata;
            end
    
            always @ (posedge rclk) begin
                if (re_int) begin
                    r_rdata_1P <= ram[raddr];
                end
                r_rdata_2P <= r_rdata_1P;
            end
        end
        
        else if (RDATA_WDATA_RATIO == "ONE_THIRTYTWO" || RDATA_WDATA_RATIO == "ONE_SIXTEENTH" || RDATA_WDATA_RATIO == "ONE_EIGHTH" || RDATA_WDATA_RATIO == "ONE_FOURTH"  || RDATA_WDATA_RATIO == "ONE_HALF" ) begin
            if (ENDIANESS == 0) begin 
            	integer i;
            	reg  [LSB_WIDTH-1 :0 ]   lsbaddr;
            	always @ (posedge wclk) begin
                	for (i=0; i<RAM_MUX_RATIO; i=i+1) begin
                    	lsbaddr = RAM_MUX_RATIO-1-i;
                    	if (we) begin
                            ram[{waddr,lsbaddr}] <= wdata[((WDATA_WIDTH/RAM_MUX_RATIO)*i) +: WDATA_WIDTH/RAM_MUX_RATIO];
                        end
                    end
                end
                always @ (posedge rclk) begin 
                	if (re_int) begin
                		r_rdata_1P <= ram[raddr];
                    end
                		r_rdata_2P <= r_rdata_1P;
                end
            end
            else begin //endianess == 1
            	integer i;
            	reg  [LSB_WIDTH-1 :0 ]   lsbaddr;
            	always @ (posedge wclk) begin
            		for (i=0; i<RAM_MUX_RATIO; i=i+1) begin
                    	lsbaddr = i;
                    	if (we) begin
                            ram[{waddr,lsbaddr}] <= wdata[((WDATA_WIDTH/RAM_MUX_RATIO)*i) +: WDATA_WIDTH/RAM_MUX_RATIO];
                        end
                    end
                end
                always @ (posedge rclk) begin 
                	if (re_int) begin
                		r_rdata_1P <= ram[raddr];
                	end
                		r_rdata_2P <= r_rdata_1P;
                end
            end
        end
        
        else if (RDATA_WDATA_RATIO == "TWO_TIMES" || RDATA_WDATA_RATIO == "FOUR_TIMES"  || RDATA_WDATA_RATIO == "EIGHT_TIMES"  || RDATA_WDATA_RATIO == "SIXTEEN_TIMES"  ||RDATA_WDATA_RATIO == "THIRTYTWO_TIMES" ) begin
            //integer i;
        	//reg  [LSB_WIDTH-1 :0 ]   lsbaddr;
        	if (ENDIANESS == 0) begin
        		always @ (posedge wclk) begin
        			if (we)
        				ram[waddr] <= wdata;
        		end
        		integer i;
        		reg  [LSB_WIDTH-1 :0 ]   lsbaddr; 
        		always @ (posedge rclk) begin
        			for (i=0; i<RAM_MUX_RATIO; i=i+1) begin
                    	lsbaddr = RAM_MUX_RATIO-1-i;
                    	if (re_int) begin
                    		r_rdata_1P[((RDATA_WIDTH/RAM_MUX_RATIO)*i) +: RDATA_WIDTH/RAM_MUX_RATIO] <= ram[{raddr,lsbaddr}];
                    	end
                        	r_rdata_2P <= r_rdata_1P;
                    end
                end 
            end
            else begin //endianess == 1
            	always @ (posedge wclk) begin
        			if (we)
        				ram[waddr] <= wdata;
        		end
        		integer i;
        		reg  [LSB_WIDTH-1 :0 ]   lsbaddr;
        		always @ (posedge rclk) begin
        			for (i=0; i<RAM_MUX_RATIO; i=i+1) begin
                    	lsbaddr = i;
                    	if (re_int) begin
                    		r_rdata_1P[((RDATA_WIDTH/RAM_MUX_RATIO)*i) +: RDATA_WIDTH/RAM_MUX_RATIO] <= ram[{raddr,lsbaddr}];
                    	end
                        	r_rdata_2P <= r_rdata_1P;
                    end
                end
            end
        end
        if (OUTPUT_REG) begin
            assign re_int = re;
            assign rdata  = r_rdata_2P;            
        end
        else begin
            assign re_int = re;
            assign rdata  = r_rdata_1P;
        end
    end
    else begin
        if (RDATA_WDATA_RATIO == "ONE") begin
            always @ (posedge wclk) begin
                if (we)
                    ram[waddr] <= wdata;
            end
    
            always @ (posedge rclk) begin
                if (re_int) begin
                    r_rdata_1P <= ram[raddr];
                    r_rdata_2P <= r_rdata_1P;
                end
            end
        end 
        else if (RDATA_WDATA_RATIO == "ONE_THIRTYTWO" || RDATA_WDATA_RATIO == "ONE_SIXTEENTH" || RDATA_WDATA_RATIO == "ONE_EIGHTH" || RDATA_WDATA_RATIO == "ONE_FOURTH"  || RDATA_WDATA_RATIO == "ONE_HALF" ) begin
            //integer i;
            //reg  [LSB_WIDTH-1 :0 ]   lsbaddr;
            if (ENDIANESS == 0) begin
            	integer i;
            	reg  [LSB_WIDTH-1 :0 ]   lsbaddr;
            	always @ (posedge wclk) begin
            		for (i=0; i<RAM_MUX_RATIO; i=i+1) begin
                    	lsbaddr = RAM_MUX_RATIO-1-i;
                    	if (we) begin
                            	ram[{waddr,lsbaddr}] <= wdata[((WDATA_WIDTH/RAM_MUX_RATIO)*i) +: WDATA_WIDTH/RAM_MUX_RATIO];
                        end
                    end
                 end
               	always @ (posedge rclk) begin 
               		if (re_int) begin
               			r_rdata_1P <= ram[raddr];
               			r_rdata_2P <= r_rdata_1P;
               		end
               	end
            end
            
            else begin //endianess == 1
            	integer i;
            	reg  [LSB_WIDTH-1 :0 ]   lsbaddr;
            	always @ (posedge wclk) begin
            		for (i=0; i<RAM_MUX_RATIO; i=i+1) begin
                    	lsbaddr = i;
                    	if (we) begin
                            	ram[{waddr,lsbaddr}] <= wdata[((WDATA_WIDTH/RAM_MUX_RATIO)*i) +: WDATA_WIDTH/RAM_MUX_RATIO];
                        end
                    end
                 end
               	always @ (posedge rclk) begin 
               		if (re_int) begin
               			r_rdata_1P <= ram[raddr];
               			r_rdata_2P <= r_rdata_1P;
               		end
               	end
            end
        end
        else if (RDATA_WDATA_RATIO == "TWO_TIMES" || RDATA_WDATA_RATIO == "FOUR_TIMES"  || RDATA_WDATA_RATIO == "EIGHT_TIMES"  || RDATA_WDATA_RATIO == "SIXTEEN_TIMES"  || RDATA_WDATA_RATIO == "THIRTYTWO_TIMES" ) begin
        	//integer i;
            //reg  [LSB_WIDTH-1 :0 ]   lsbaddr;
        	if (ENDIANESS == 0) begin
        		always @ (posedge wclk) begin
        			if (we)
        				ram[waddr] <= wdata;
        		end
        		integer i;
            	reg  [LSB_WIDTH-1 :0 ]   lsbaddr;        
            	always @ (posedge rclk) begin
            		for (i=0; i<RAM_MUX_RATIO; i=i+1) begin
                    	lsbaddr = RAM_MUX_RATIO-1-i;
                    	if (re_int) begin
                    		r_rdata_1P[((RDATA_WIDTH/RAM_MUX_RATIO)*i) +: RDATA_WIDTH/RAM_MUX_RATIO] <= ram[{raddr,lsbaddr}];
                    		r_rdata_2P                                                               <= r_rdata_1P;
                    	end
                    end
                end 
            end
            
            else begin //endianess ==1
        		always @ (posedge wclk) begin
        			if (we)
        				ram[waddr] <= wdata;
        		end
        		integer i;
        		reg  [LSB_WIDTH-1 :0 ]   lsbaddr;        
            	always @ (posedge rclk) begin
            		for (i=0; i<RAM_MUX_RATIO; i=i+1) begin
                    	lsbaddr = i;
                    	if (re_int) begin
                    		r_rdata_1P[((RDATA_WIDTH/RAM_MUX_RATIO)*i) +: RDATA_WIDTH/RAM_MUX_RATIO] <= ram[{raddr,lsbaddr}];
                    		r_rdata_2P                                                               <= r_rdata_1P;
                    	end
                    end
                end 
            end
        end
        // NIC
        //if (MODE == "STANDARD") begin     
        //    if (OUTPUT_REG) begin
        //        reg re_r;
        //        always @ (posedge rclk) begin
        //            re_r <= re;
        //        end
        //        assign re_int = re | re_r;        
        //        assign rdata  = r_rdata_2P;            
        //    end
        //    else begin
        //        assign re_int = re;
        //        assign rdata  = r_rdata_1P;
        //    end
        //end
        //else begin
        //    assign re_int = re;
        //    assign rdata  = r_rdata_1P;
        //end    
        if (OUTPUT_REG) begin
            reg re_r;
            always @ (posedge rclk) begin
                re_r <= re;
            end
            assign re_int = re | re_r;        
            assign rdata  = r_rdata_2P;            
        end
        else begin
            assign re_int = re;
            assign rdata  = r_rdata_1P;
        end    
    end
endgenerate

endmodule

////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013-2021 Efinix Inc. All rights reserved.              
//
// This   document  contains  proprietary information  which   is        
// protected by  copyright. All rights  are reserved.  This notice       
// refers to original work by Efinix, Inc. which may be derivitive       
// of other work distributed under license of the authors.  In the       
// case of derivative work, nothing in this notice overrides the         
// original author's license agreement.  Where applicable, the           
// original license agreement is included in it's original               
// unmodified form immediately below this header.                        
//
// WARRANTY DISCLAIMER.                                                  
//     THE  DESIGN, CODE, OR INFORMATION ARE PROVIDED “AS IS” AND        
//     EFINIX MAKES NO WARRANTIES, EXPRESS OR IMPLIED WITH               
//     RESPECT THERETO, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES,  
//     INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF          
//     MERCHANTABILITY, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR    
//     PURPOSE.  SOME STATES DO NOT ALLOW EXCLUSIONS OF AN IMPLIED       
//     WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO LICENSEE.           
//
// LIMITATION OF LIABILITY.                                              
//     NOTWITHSTANDING ANYTHING TO THE CONTRARY, EXCEPT FOR BODILY       
//     INJURY, EFINIX SHALL NOT BE LIABLE WITH RESPECT TO ANY SUBJECT    
//     MATTER OF THIS AGREEMENT UNDER TORT, CONTRACT, STRICT LIABILITY   
//     OR ANY OTHER LEGAL OR EQUITABLE THEORY (I) FOR ANY INDIRECT,      
//     SPECIAL, INCIDENTAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES OF ANY    
//     CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF      
//     GOODWILL, DATA OR PROFIT, WORK STOPPAGE, OR COMPUTER FAILURE OR   
//     MALFUNCTION, OR IN ANY EVENT (II) FOR ANY AMOUNT IN EXCESS, IN    
//     THE AGGREGATE, OF THE FEE PAID BY LICENSEE TO EFINIX HEREUNDER    
//     (OR, IF THE FEE HAS BEEN WAIVED, $100), EVEN IF EFINIX SHALL HAVE 
//     BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO 
//     NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR            
//     CONSEQUENTIAL DAMAGES, SO THIS LIMITATION AND EXCLUSION MAY NOT   
//     APPLY TO LICENSEE.
//
////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////
//           _____       
//          / _______    Copyright (C) 2013-2020 Efinix Inc. All rights reserved.
//         / /       \   
//        / /  ..    /   gray2bin.v
//       / / .'     /    
//    __/ /.'      /     Description:
//   __   \       /      Gray to Binary Encoding Convertor
//  /_/ /\ \_____/ /     
// ____/  \_______/      
//
// *******************************
// Revisions:
// 1.0 Initial rev
//
// *******************************

`resetall
`timescale 1ns/1ps

module `IP_MODULE_NAME(efx_fifo_gray2bin)
#(parameter WIDTH=5)
(// outputs
 output wire [WIDTH-1:0] bin_o,
 // input
 input [WIDTH-1:0] gray_i);

//---------------------------------------------------------------------
// Recursive Module
// Description: reduction xor
generate
   if (WIDTH > 1) begin
      wire [1:0] bin_1;
      assign bin_1 = {gray_i[WIDTH-1], gray_i[WIDTH-1]^gray_i[WIDTH-2]};
      if (WIDTH == 2) begin
	 assign bin_o = bin_1;
      end
      else begin
	 assign bin_o[WIDTH-1] = bin_1[1];
	 `IP_MODULE_NAME(efx_fifo_gray2bin) #(.WIDTH(WIDTH-1)) u_gray2bin (.bin_o(bin_o[WIDTH-2:0]), .gray_i({bin_1[0], gray_i[WIDTH-3:0]}));
      end
   end
   else /* if (WIDTH == 1) */
     assign bin_o = gray_i;
endgenerate
   
endmodule 

////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013-2020 Efinix Inc. All rights reserved.              
//
// This   document  contains  proprietary information  which   is        
// protected by  copyright. All rights  are reserved.  This notice       
// refers to original work by Efinix, Inc. which may be derivitive       
// of other work distributed under license of the authors.  In the       
// case of derivative work, nothing in this notice overrides the         
// original author's license agreement.  Where applicable, the           
// original license agreement is included in it's original               
// unmodified form immediately below this header.                        
//
// WARRANTY DISCLAIMER.                                                  
//     THE  DESIGN, CODE, OR INFORMATION ARE PROVIDED “AS IS” AND        
//     EFINIX MAKES NO WARRANTIES, EXPRESS OR IMPLIED WITH               
//     RESPECT THERETO, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES,  
//     INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF          
//     MERCHANTABILITY, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR    
//     PURPOSE.  SOME STATES DO NOT ALLOW EXCLUSIONS OF AN IMPLIED       
//     WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO LICENSEE.           
//
// LIMITATION OF LIABILITY.                                              
//     NOTWITHSTANDING ANYTHING TO THE CONTRARY, EXCEPT FOR BODILY       
//     INJURY, EFINIX SHALL NOT BE LIABLE WITH RESPECT TO ANY SUBJECT    
//     MATTER OF THIS AGREEMENT UNDER TORT, CONTRACT, STRICT LIABILITY   
//     OR ANY OTHER LEGAL OR EQUITABLE THEORY (I) FOR ANY INDIRECT,      
//     SPECIAL, INCIDENTAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES OF ANY    
//     CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF      
//     GOODWILL, DATA OR PROFIT, WORK STOPPAGE, OR COMPUTER FAILURE OR   
//     MALFUNCTION, OR IN ANY EVENT (II) FOR ANY AMOUNT IN EXCESS, IN    
//     THE AGGREGATE, OF THE FEE PAID BY LICENSEE TO EFINIX HEREUNDER    
//     (OR, IF THE FEE HAS BEEN WAIVED, $100), EVEN IF EFINIX SHALL HAVE 
//     BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO 
//     NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR            
//     CONSEQUENTIAL DAMAGES, SO THIS LIMITATION AND EXCLUSION MAY NOT   
//     APPLY TO LICENSEE.
//
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
//           _____       
//          / _______    Copyright (C) 2013-2020 Efinix Inc. All rights reserved.
//         / /       \   
//        / /  ..    /   pipe_reg.v
//       / / .'     /    
//    __/ /.'      /     Description:
//   __   \       /      Parallel Pipelining Shift Register
//  /_/ /\ \_____/ /     
// ____/  \_______/      
//
// *******************************
// Revisions:
// 1.0 Initial rev
//
// *******************************

module `IP_MODULE_NAME(efx_fifo_datasync) #(
    parameter STAGE = 32,
    parameter WIDTH = 4
) (
 input  wire             clk_i,
 input  wire [WIDTH-1:0] d_i,
 output wire [WIDTH-1:0] d_o
);

(* async_reg = "true" *) reg [WIDTH-1:0] pipe_reg [STAGE-1:0];
integer i;

always @(posedge clk_i) begin
  for (i=STAGE-1; i>0; i = i - 1) begin
    pipe_reg[i] <= pipe_reg[i-1];
  end
  pipe_reg[0] <= d_i;
end
assign d_o = pipe_reg[STAGE-1];
   

endmodule

////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013-2020 Efinix Inc. All rights reserved.              
//
// This   document  contains  proprietary information  which   is        
// protected by  copyright. All rights  are reserved.  This notice       
// refers to original work by Efinix, Inc. which may be derivitive       
// of other work distributed under license of the authors.  In the       
// case of derivative work, nothing in this notice overrides the         
// original author's license agreement.  Where applicable, the           
// original license agreement is included in it's original               
// unmodified form immediately below this header.                        
//
// WARRANTY DISCLAIMER.                                                  
//     THE  DESIGN, CODE, OR INFORMATION ARE PROVIDED “AS IS” AND        
//     EFINIX MAKES NO WARRANTIES, EXPRESS OR IMPLIED WITH               
//     RESPECT THERETO, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES,  
//     INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF          
//     MERCHANTABILITY, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR    
//     PURPOSE.  SOME STATES DO NOT ALLOW EXCLUSIONS OF AN IMPLIED       
//     WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO LICENSEE.           
//
// LIMITATION OF LIABILITY.                                              
//     NOTWITHSTANDING ANYTHING TO THE CONTRARY, EXCEPT FOR BODILY       
//     INJURY, EFINIX SHALL NOT BE LIABLE WITH RESPECT TO ANY SUBJECT    
//     MATTER OF THIS AGREEMENT UNDER TORT, CONTRACT, STRICT LIABILITY   
//     OR ANY OTHER LEGAL OR EQUITABLE THEORY (I) FOR ANY INDIRECT,      
//     SPECIAL, INCIDENTAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES OF ANY    
//     CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF      
//     GOODWILL, DATA OR PROFIT, WORK STOPPAGE, OR COMPUTER FAILURE OR   
//     MALFUNCTION, OR IN ANY EVENT (II) FOR ANY AMOUNT IN EXCESS, IN    
//     THE AGGREGATE, OF THE FEE PAID BY LICENSEE TO EFINIX HEREUNDER    
//     (OR, IF THE FEE HAS BEEN WAIVED, $100), EVEN IF EFINIX SHALL HAVE 
//     BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO 
//     NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR            
//     CONSEQUENTIAL DAMAGES, SO THIS LIMITATION AND EXCLUSION MAY NOT   
//     APPLY TO LICENSEE.
//
////////////////////////////////////////////////////////////////////////////////



// synopsys translate_off
`timescale 1 ns / 1 ps													
// synopsys translate_on

module `IP_MODULE_NAME(efx_resetsync) #(
    parameter ASYNC_STAGE = 2,
    parameter ACTIVE_LOW = 1
) (
    input  wire             clk,
    input  wire             reset,
    output wire             d_o
);


generate
   if (ACTIVE_LOW == 1) begin: active_low
      `IP_MODULE_NAME(efx_asyncreg) #(
         .WIDTH      (1),
         .ACTIVE_LOW (1),
         .RST_VALUE  (0)
      ) efx_resetsync_active_low (
         .clk     (clk),
         .reset_n (reset),
         .d_i     (1'b1),
         .d_o     (d_o)
      );
   end
   else begin: active_high
      `IP_MODULE_NAME(efx_asyncreg) #(
         .WIDTH      (1),
         .ACTIVE_LOW (0),
         .RST_VALUE  (1)
      ) efx_resetsync_active_high (
         .clk     (clk),
         .reset_n (reset),
         .d_i     (1'b0),
         .d_o     (d_o)
      );
   end
endgenerate

endmodule



// synopsys translate_off
`timescale 1 ns / 1 ps													
// synopsys translate_on

module `IP_MODULE_NAME(efx_asyncreg) #(
    parameter ASYNC_STAGE = 2,
    parameter WIDTH = 4,
    parameter ACTIVE_LOW = 1, // 0 - Active high reset, 1 - Active low reset
    parameter RST_VALUE = 0 
) (
    input  wire             clk,
    input  wire             reset_n,
    input  wire [WIDTH-1:0] d_i,
    output wire [WIDTH-1:0] d_o
);

(* async_reg = "true" *) reg [WIDTH-1:0] async_reg[ASYNC_STAGE-1:0];

assign d_o = async_reg[ASYNC_STAGE-1];

genvar i;
generate
   if (ACTIVE_LOW == 1) begin: active_low
      if (RST_VALUE == 0) begin: low_reset_0
         always @ (posedge clk or negedge reset_n) begin
             if(!reset_n) begin
                 async_reg[0]         <= {WIDTH{1'b0}};
             end
             else begin 
                 async_reg[0]         <= d_i;
             end
         end
             
         for (i=1; i<ASYNC_STAGE; i=i+1) begin
             always @ (posedge clk or negedge reset_n) begin
                 if(!reset_n) begin
                     async_reg[i]         <= {WIDTH{1'b0}};
                 end
                 else begin 
                     async_reg[i]         <= async_reg[i-1];
                 end
             end
         end
      end
      else begin: low_reset_1
         always @ (posedge clk or negedge reset_n) begin
             if(!reset_n) begin
                 async_reg[0]         <= {WIDTH{1'b1}};
             end
             else begin 
                 async_reg[0]         <= d_i;
             end
         end
             
         for (i=1; i<ASYNC_STAGE; i=i+1) begin
             always @ (posedge clk or negedge reset_n) begin
                 if(!reset_n) begin
                     async_reg[i]         <= {WIDTH{1'b1}};
                 end
                 else begin 
                     async_reg[i]         <= async_reg[i-1];
                 end
             end
         end
      end
   end
   else begin: active_high
      if (RST_VALUE == 0) begin: high_reset_0
         always @ (posedge clk or posedge reset_n) begin
             if(reset_n) begin
                 async_reg[0]         <= {WIDTH{1'b0}};
             end
             else begin 
                 async_reg[0]         <= d_i;
             end
         end
             
         for (i=1; i<ASYNC_STAGE; i=i+1) begin
             always @ (posedge clk or posedge reset_n) begin
                 if(reset_n) begin
                     async_reg[i]         <= {WIDTH{1'b0}};
                 end
                 else begin 
                     async_reg[i]         <= async_reg[i-1];
                 end
             end
         end
      end
      else begin: high_reset_1
         always @ (posedge clk or posedge reset_n) begin
             if(reset_n) begin
                 async_reg[0]         <= {WIDTH{1'b1}};
             end
             else begin 
                 async_reg[0]         <= d_i;
             end
         end
             
         for (i=1; i<ASYNC_STAGE; i=i+1) begin
             always @ (posedge clk or posedge reset_n) begin
                 if(reset_n) begin
                     async_reg[i]         <= {WIDTH{1'b1}};
                 end
                 else begin 
                     async_reg[i]         <= async_reg[i-1];
                 end
             end
         end
      end
   end
endgenerate

endmodule


/////////////////////////////////////////////////////////////////////////////
//           _____       
//          / _______    Copyright (C) 2013-2021 Efinix Inc. All rights reserved.
//         / /       \   
//        / /  ..    /   simple_dual_port_ram_fifo.v
//       / / .'     /    
//    __/ /.'      /     Description:
//   __   \       /      EFX FIFO
//  /_/ /\ \_____/ /     
// ____/  \_______/      
//
// *******************************
// Revisions:
//
// *******************************

module `IP_MODULE_NAME(efx_fifo_ctl) # (
    parameter SYNC_CLK           = 1,
    parameter SYNC_STAGE         = 2,
    parameter MODE               = "STANDARD",
    parameter WR_DEPTH           = 512,
    parameter WADDR_WIDTH        = 9,
    parameter RADDR_WIDTH        = 9,
    parameter ASYM_WIDTH_RATIO   = 4,
    parameter RAM_MUX_RATIO      = 1,
    parameter PIPELINE_REG       = 1,
    parameter ALMOST_FLAG        = 1,
    parameter PROGRAMMABLE_FULL  = "NONE",
    parameter PROG_FULL_ASSERT   = 0,
    parameter PROG_FULL_NEGATE   = 0,
    parameter PROGRAMMABLE_EMPTY = "NONE",
    parameter PROG_EMPTY_ASSERT  = 0,
    parameter PROG_EMPTY_NEGATE  = 0,
    parameter OUTPUT_REG         = 0,
    parameter HANDSHAKE_FLAG     = 1, 
    parameter OVERFLOW_PROTECT   = 0,
    parameter UNDERFLOW_PROTECT  = 0
)(
    input   wire                   wr_rst,
    input   wire                   rd_rst,
    input   wire                   wclk,
    input   wire                   rclk,
    input   wire                   we,
    input   wire                   re,
    output  wire                   wr_full,
    output  reg                    wr_ack,
    output  wire                   wr_almost_full,
    output  wire                   rd_empty,
    output  wire                   rd_almost_empty,
    output  wire                   wr_prog_full,
    output  wire                   rd_prog_empty,
    output  wire                   wr_en_int,
    output  wire                   rd_en_int,
    output  wire [WADDR_WIDTH-1:0] waddr,
    output  wire [RADDR_WIDTH-1:0] raddr,
    output  wire [WADDR_WIDTH:0]   wr_datacount,
    output  wire [RADDR_WIDTH:0]   rd_datacount,
    output  wire                   rd_vld,
    output  reg                    wr_overflow,
    output  reg                    rd_underflow
);

reg  [WADDR_WIDTH:0] waddr_cntr;
reg  [WADDR_WIDTH:0] waddr_cntr_r;
reg  [RADDR_WIDTH:0] raddr_cntr;
reg                  rd_valid;

wire [WADDR_WIDTH:0] waddr_int;
wire [RADDR_WIDTH:0] raddr_int;
wire                 rd_empty_int;
wire [WADDR_WIDTH:0] wr_datacount_int;
wire [RADDR_WIDTH:0] rd_datacount_int;

assign waddr     = waddr_cntr[WADDR_WIDTH-1:0];
// NIC
wire [RADDR_WIDTH:0] ram_raddr;
assign raddr     = (MODE == "FWFT") ? ram_raddr[RADDR_WIDTH-1:0] : raddr_cntr[RADDR_WIDTH-1:0];
//assign raddr     = raddr_cntr[RADDR_WIDTH-1:0];
//assign wr_en_int = we & ~wr_full;
assign wr_en_int = OVERFLOW_PROTECT ? we & ~wr_full : we;

assign wr_datacount  = wr_datacount_int;
assign rd_datacount  = ASYM_WIDTH_RATIO == 4 && SYNC_CLK ? wr_datacount_int : rd_datacount_int;


generate
    if (MODE == "FWFT") begin    
        // NIC
        //assign rd_en_int     = (~rd_empty_int & rd_empty) | (re & ~rd_empty_int);
        //assign rd_empty      = rd_empty_fwft;

        assign rd_en_int     = 1'b1;
        //assign rd_empty      = rd_empty_int;
        
        //always @ (posedge rclk or posedge rd_rst) begin
        //    if (rd_rst) begin
        //        init_set <= 1'b1;
        //    end
        //    else if (~init_set & rd_empty) begin
        //        init_set <= 1'b1;            
        //    end
        //    else if (~rd_empty_int) begin
        //        init_set <= 1'b0;            
        //    end
        //    else if (rd_empty) begin
        //        init_set <= 1'b1;            
        //    end
        //end
        // NIC 
        //always @ (posedge rclk or posedge rd_rst) begin
        //    if (rd_rst) begin
        //        rd_empty_fwft <= 1'b1;
        //    end
        //    else if (rd_en_int) begin
        //        rd_empty_fwft <= 1'b0;            
        //    end
        //    else if (re) begin
        //        rd_empty_fwft <= 1'b1;            
        //    end
        //end          
        
        //if (FAMILY == "TRION") begin
        if (OUTPUT_REG) begin
            always @ (posedge rclk or posedge rd_rst) begin
                if (rd_rst) begin
                    rd_valid <= 1'b0;
                end
                else begin
                    rd_valid <= ~rd_empty;
                end
            end
            assign rd_vld = rd_valid;                
        end    
        else begin
            assign rd_vld = ~rd_empty;                
        end
        
        assign rd_empty = rd_empty_int;
    end
    else begin
        assign rd_en_int     = UNDERFLOW_PROTECT ? re & ~rd_empty_int : re;
        assign rd_empty      = rd_empty_int;
        
        if (OUTPUT_REG) begin
            reg rd_valid_r;
            always @ (posedge rclk or posedge rd_rst) begin
                if (rd_rst) begin
                    rd_valid_r <= 'h0;
                    rd_valid   <= 'h0;
                end
                else begin
                    {rd_valid,rd_valid_r} <= {rd_valid_r,rd_en_int};
                end
            end
            assign rd_vld = rd_valid;            
        end
        else begin
            always @ (posedge rclk or posedge rd_rst) begin
                if (rd_rst) begin
                    rd_valid  <= 'h0;
                end
                else begin
                    rd_valid <= rd_en_int;
                end
            end
            assign rd_vld = rd_valid;
        end
    end
    
    if (ALMOST_FLAG) begin
        assign wr_almost_full   = wr_datacount >= WR_DEPTH-1;
        assign rd_almost_empty  = rd_datacount <= 'd1;
    end
    else begin
        assign wr_almost_full   = 1'b0;
        assign rd_almost_empty  = 1'b0;        
    end
    
    if (PROGRAMMABLE_FULL == "STATIC_SINGLE") begin
        reg    wr_prog_full_int;
        assign wr_prog_full  = wr_datacount >= PROG_FULL_ASSERT;
        
        always @ (posedge wclk or posedge wr_rst) begin
            if (wr_rst) begin
                wr_prog_full_int  <= 1'b0;
            end
            else begin
                wr_prog_full_int  <= wr_prog_full;
            end
        end  
    end
    else if (PROGRAMMABLE_FULL == "STATIC_DUAL") begin
        reg    wr_prog_full_int;
        assign wr_prog_full  = wr_prog_full_int ? wr_datacount >= PROG_FULL_NEGATE : wr_datacount >= PROG_FULL_ASSERT;   

        always @ (posedge wclk or posedge wr_rst) begin
            if (wr_rst) begin
                wr_prog_full_int  <= 1'b0;
            end
            else begin
                wr_prog_full_int  <= wr_prog_full;
            end
        end              
    end
    else begin
        assign wr_prog_full  = 1'b0; 
    end
        
    if (PROGRAMMABLE_EMPTY == "STATIC_SINGLE") begin
        reg    rd_prog_empty_int;
        assign rd_prog_empty  = rd_datacount <= PROG_EMPTY_ASSERT;
            
        always @ (posedge rclk or posedge rd_rst) begin
            if (rd_rst) begin
                rd_prog_empty_int <= 1'b1;
            end
            else begin
                rd_prog_empty_int <= rd_prog_empty;
            end
        end
    end
    else if (PROGRAMMABLE_EMPTY == "STATIC_DUAL") begin
        reg    rd_prog_empty_int;
        assign rd_prog_empty = rd_prog_empty_int ? (rd_datacount <= PROG_EMPTY_NEGATE) : (rd_datacount <= PROG_EMPTY_ASSERT);
            
        always @ (posedge rclk or posedge rd_rst) begin
            if (rd_rst) begin
                rd_prog_empty_int <= 1'b1;
            end
            else begin
                rd_prog_empty_int <= rd_prog_empty;
            end
        end  
    end
    else begin
        assign rd_prog_empty  = 1'b0; 
    end
    
    if (HANDSHAKE_FLAG) begin
        always @ (posedge wclk or posedge wr_rst) begin
            if (wr_rst) begin
                wr_ack <= 1'b0;
            end
            else begin
                // NIC
                //wr_ack <= wr_en_int & ~wr_overflow;
                wr_ack <= OVERFLOW_PROTECT ? wr_en_int & ~wr_overflow : wr_en_int;
            end
        end
    end

    if (OVERFLOW_PROTECT) begin
        always @ (posedge wclk or posedge wr_rst) begin
            if (wr_rst) begin
                wr_overflow <= 1'b0;
            end
            else if (we && wr_full) begin
                wr_overflow <= 1'b1;
            end
            else begin
                wr_overflow <= 1'b0;            
            end
        end
    end
    else if (HANDSHAKE_FLAG) begin
        always @ (posedge wclk or posedge wr_rst) begin
            if (wr_rst) begin
                wr_overflow <= 1'b0;
            end
            else begin
                wr_overflow <= we && wr_full ? 1'b1 : wr_overflow;
            end
        end
    end

    if (UNDERFLOW_PROTECT) begin     
        always @ (posedge rclk or posedge rd_rst) begin
            if (rd_rst) begin
                rd_underflow <= 1'b0;
            end
            else if (re && rd_empty) begin
                rd_underflow <= 1'b1;
            end
            else begin
                rd_underflow <= 1'b0;            
            end
        end
    end
    else if (HANDSHAKE_FLAG) begin
        always @ (posedge rclk or posedge rd_rst) begin
            if (rd_rst) begin
                rd_underflow <= 1'b0;
            end
            else begin
                rd_underflow <= re && rd_empty ? 1'b1 : rd_underflow;
            end
        end
    end
    
    localparam RATIO_WIDTH = (RADDR_WIDTH >= WADDR_WIDTH)? RADDR_WIDTH - WADDR_WIDTH : WADDR_WIDTH - RADDR_WIDTH;
    
    if (ASYM_WIDTH_RATIO < 4) begin
        assign wr_full          = (waddr_cntr[WADDR_WIDTH]^raddr_int[RADDR_WIDTH]) & (waddr_cntr[WADDR_WIDTH-1:0] == raddr_int[RADDR_WIDTH-1:RATIO_WIDTH]);
        assign rd_empty_int     = waddr_int[WADDR_WIDTH:0] == raddr_cntr[RADDR_WIDTH:RATIO_WIDTH];
        assign wr_datacount_int = waddr_cntr - (raddr_int/RAM_MUX_RATIO);
        assign rd_datacount_int = (waddr_int*RAM_MUX_RATIO)-raddr_cntr;
    end
    // NIC
    else if (ASYM_WIDTH_RATIO == 4) begin
        assign wr_full          = (waddr_cntr[WADDR_WIDTH]^raddr_int[RADDR_WIDTH]) & (waddr_cntr[WADDR_WIDTH-1:0] == raddr_int[RADDR_WIDTH-1:0]);
        assign rd_empty_int     = waddr_int[WADDR_WIDTH:0] == raddr_cntr[RADDR_WIDTH:0];
        assign wr_datacount_int = waddr_cntr - raddr_int;
        assign rd_datacount_int = waddr_int - raddr_cntr;
    end
    else begin
        assign wr_full          = (waddr_cntr[WADDR_WIDTH]^raddr_int[RADDR_WIDTH]) & (waddr_cntr[WADDR_WIDTH-1:RATIO_WIDTH] == raddr_int[RADDR_WIDTH-1:0]);
        // NIC
        //assign rd_empty_int     = (waddr_int- raddr_cntr*RAM_MUX_RATIO) < RAM_MUX_RATIO;
        assign rd_empty_int     = waddr_int[WADDR_WIDTH:RATIO_WIDTH] == raddr_cntr[RADDR_WIDTH:0];
        assign wr_datacount_int = waddr_cntr - (raddr_int*RAM_MUX_RATIO);
        assign rd_datacount_int = (waddr_int/RAM_MUX_RATIO)-raddr_cntr;
    end
endgenerate

always @ (posedge wclk or posedge wr_rst) begin
    if (wr_rst) begin
        waddr_cntr   <= 'h0;
    end
    else if (wr_en_int) begin
        waddr_cntr   <= waddr_cntr + 1'b1;
    end
end

always @ (posedge wclk or posedge wr_rst) begin
    if (wr_rst) begin
        waddr_cntr_r  <= 'h0;
    end
    else begin
        waddr_cntr_r  <= waddr_cntr;
    end
end

always @ (posedge rclk or posedge rd_rst) begin
    if (rd_rst) begin
        raddr_cntr   <= 'h0;
    end
    // NIC
    //else if (rd_en_int) begin
    else begin
        //raddr_cntr   <= raddr_cntr + 1'b1;
        //raddr_cntr   <= raddr_cntr + (re & ~rd_empty_int);
        raddr_cntr   <= ram_raddr;
    end
end
// NIC
assign ram_raddr = raddr_cntr + (UNDERFLOW_PROTECT ? re & ~rd_empty_int : re);


generate
    if (SYNC_CLK) begin : sync_clk
       if (MODE == "FWFT") begin
          assign waddr_int = waddr_cntr_r;
          assign raddr_int        = raddr_cntr;
       end
       else begin
          assign waddr_int        = waddr_cntr;
          assign raddr_int        = raddr_cntr;
       end
    end
    else begin : async_clk
        reg  [RADDR_WIDTH:0] raddr_cntr_gry_r;
        reg  [WADDR_WIDTH:0] waddr_cntr_gry_r;
        
        wire [RADDR_WIDTH:0] raddr_cntr_gry;
        wire [RADDR_WIDTH:0] raddr_cntr_gry_sync;
        wire [RADDR_WIDTH:0] raddr_cntr_sync_g2b;
        wire [WADDR_WIDTH:0] waddr_cntr_gry;
        wire [WADDR_WIDTH:0] waddr_cntr_gry_sync;
        wire [WADDR_WIDTH:0] waddr_cntr_sync_g2b;

        if (PIPELINE_REG) begin
            reg  [RADDR_WIDTH:0] raddr_cntr_sync_g2b_r;    
            reg  [WADDR_WIDTH:0] waddr_cntr_sync_g2b_r;        
        
            assign waddr_int        = waddr_cntr_sync_g2b_r;
            assign raddr_int        = raddr_cntr_sync_g2b_r;
            
            always @ (posedge wclk or posedge wr_rst) begin
                if (wr_rst) begin
                    raddr_cntr_sync_g2b_r <= 'h0;
                end
                else begin
                    raddr_cntr_sync_g2b_r <= raddr_cntr_sync_g2b;
                end
            end
            
            always @ (posedge rclk or posedge rd_rst) begin
                if (rd_rst) begin
                    waddr_cntr_sync_g2b_r <= 'h0;
                end
                else begin
                    waddr_cntr_sync_g2b_r <= waddr_cntr_sync_g2b;
                end
            end
        end
        else begin
            assign waddr_int        = waddr_cntr_sync_g2b;
            assign raddr_int        = raddr_cntr_sync_g2b;        
        end
      
        always @ (posedge rclk or posedge rd_rst) begin
            if (rd_rst) begin
                raddr_cntr_gry_r <= 'h0;
            end
            else begin
                raddr_cntr_gry_r <= raddr_cntr_gry;
            end
        end
        `IP_MODULE_NAME(efx_fifo_bin2gray) # (.WIDTH(RADDR_WIDTH+1)                                           ) xrd2wr_bin2gray    (.bin_i(raddr_cntr), .gray_o(raddr_cntr_gry));
        `IP_MODULE_NAME(efx_asyncreg)      # (.ASYNC_STAGE(SYNC_STAGE), .WIDTH (RADDR_WIDTH+1), .ACTIVE_LOW(0)) xrd2wr_addr_sync   (.clk(wclk), .reset_n(wr_rst), .d_i(raddr_cntr_gry_r), .d_o(raddr_cntr_gry_sync));
        `IP_MODULE_NAME(efx_fifo_gray2bin) # (.WIDTH(RADDR_WIDTH+1)                                           ) xrd2wr_gray2bin    (.gray_i(raddr_cntr_gry_sync), .bin_o(raddr_cntr_sync_g2b));
        
        always @ (posedge wclk or posedge wr_rst) begin
            if (wr_rst) begin
                waddr_cntr_gry_r <= 'h0;
            end
            else begin
                waddr_cntr_gry_r <= waddr_cntr_gry;
            end
        end        
        `IP_MODULE_NAME(efx_fifo_bin2gray) # (.WIDTH(WADDR_WIDTH+1)                                           ) wr2rd_bin2gray  (.bin_i(waddr_cntr), .gray_o(waddr_cntr_gry));
        `IP_MODULE_NAME(efx_asyncreg)      # (.ASYNC_STAGE(SYNC_STAGE), .WIDTH (WADDR_WIDTH+1), .ACTIVE_LOW(0)) wr2rd_addr_sync (.clk(rclk), .reset_n(rd_rst), .d_i(waddr_cntr_gry_r), .d_o(waddr_cntr_gry_sync));
        `IP_MODULE_NAME(efx_fifo_gray2bin) # (.WIDTH(WADDR_WIDTH+1)                                           ) wr2rd_gray2bin  (.gray_i(waddr_cntr_gry_sync), .bin_o(waddr_cntr_sync_g2b));        

    end
endgenerate
endmodule


////////////////////////////////////////////////////////////////////////////
//           _____       
//          / _______    Copyright (C) 2013-2020 Efinix Inc. All rights reserved.
//         / /       \   
//        / /  ..    /   bin2gray.v
//       / / .'     /    
//    __/ /.'      /     Description:
//   __   \       /      Binary to Gray Encoding Convertor
//  /_/ /\ \_____/ /     
// ____/  \_______/      
//
// *******************************
// Revisions:
// 1.0 Initial rev
//
// *******************************

`resetall
`timescale 1ns/1ps

module `IP_MODULE_NAME(efx_fifo_bin2gray)
#(parameter WIDTH=5)
(// outputs
 output wire [WIDTH-1:0] gray_o,
 // input
 input [WIDTH-1:0] bin_i
 );

//---------------------------------------------------------------------
// Function :   bit_xor
// Description: reduction xor
function bit_xor (
  input [31:0] nex_bit,
  input [31:0] curr_bit,
  input [WIDTH-1:0] xor_in);
  begin : fn_bit_xor
    bit_xor = xor_in[nex_bit] ^ xor_in[curr_bit];
  end
endfunction

// Convert Binary to Gray, bit by bit
generate 
begin
  genvar bit_idx;
  for(bit_idx=0; bit_idx<WIDTH-1; bit_idx=bit_idx+1) begin : gBinBits
    assign gray_o[bit_idx] = bit_xor(bit_idx+1, bit_idx, bin_i);
  end
  assign   gray_o[WIDTH-1] = bin_i[WIDTH-1];
end
endgenerate

endmodule 

////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013-2020 Efinix Inc. All rights reserved.              
//
// This   document  contains  proprietary information  which   is        
// protected by  copyright. All rights  are reserved.  This notice       
// refers to original work by Efinix, Inc. which may be derivitive       
// of other work distributed under license of the authors.  In the       
// case of derivative work, nothing in this notice overrides the         
// original author's license agreement.  Where applicable, the           
// original license agreement is included in it's original               
// unmodified form immediately below this header.                        
//
// WARRANTY DISCLAIMER.                                                  
//     THE  DESIGN, CODE, OR INFORMATION ARE PROVIDED “AS IS” AND        
//     EFINIX MAKES NO WARRANTIES, EXPRESS OR IMPLIED WITH               
//     RESPECT THERETO, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES,  
//     INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF          
//     MERCHANTABILITY, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR    
//     PURPOSE.  SOME STATES DO NOT ALLOW EXCLUSIONS OF AN IMPLIED       
//     WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO LICENSEE.           
//
// LIMITATION OF LIABILITY.                                              
//     NOTWITHSTANDING ANYTHING TO THE CONTRARY, EXCEPT FOR BODILY       
//     INJURY, EFINIX SHALL NOT BE LIABLE WITH RESPECT TO ANY SUBJECT    
//     MATTER OF THIS AGREEMENT UNDER TORT, CONTRACT, STRICT LIABILITY   
//     OR ANY OTHER LEGAL OR EQUITABLE THEORY (I) FOR ANY INDIRECT,      
//     SPECIAL, INCIDENTAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES OF ANY    
//     CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF      
//     GOODWILL, DATA OR PROFIT, WORK STOPPAGE, OR COMPUTER FAILURE OR   
//     MALFUNCTION, OR IN ANY EVENT (II) FOR ANY AMOUNT IN EXCESS, IN    
//     THE AGGREGATE, OF THE FEE PAID BY LICENSEE TO EFINIX HEREUNDER    
//     (OR, IF THE FEE HAS BEEN WAIVED, $100), EVEN IF EFINIX SHALL HAVE 
//     BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO 
//     NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR            
//     CONSEQUENTIAL DAMAGES, SO THIS LIMITATION AND EXCLUSION MAY NOT   
//     APPLY TO LICENSEE.
//
////////////////////////////////////////////////////////////////////////////////


//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
RMxXx1C0dKFv2Vm9tKOEDEuwMgaEzmqVEnZ6ZQtDe3at4rnNUjcspNSdS9Dzrwh0
yEFx54/hiAZA2hvv3AnrI5L9yKRSeWJY3aIe4jxQeT7FTveNgkiveT9ICoc+MmpT
oD/HzsIGYaXOt9TKdWuDaB19KxhW37AoXWuYc11Gty1hQqJ97tQJzku7tkdg87+5
QNLhOMQjSS8xf5ie3tgaDO29B/e0FWyktYtTanu0SUgtKGGYGzS1BPefojhcabcp
ToARKzR+xJcXVGpIMaGmr8v+4U1JH/9P3hyzn61s7MzF0F5egYQaNZQ6NFjUCeBq
jxlV1i3Z4tSHduE//Zf03w==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 5328 )
`pragma protect data_block
+Pprscv9uEuF4Z/AdGRcDSr8rzI5Pan9GGnuWQ//ycAh9nyWfXgXL+lHwUjyKczW
sxcRs4M5q8XOF7Acf8ppgOEwc/v4cw18GamCGUagGyWVQmlb24zfv1H0C3w52LyG
xm5oCbH8LP1mHCnLQRL0/YJH9ph2yqxoMc5yLnQ4T1GUWR+rQSGf4nIVIKgn6voU
adIrK7AK051iSrqadcjSWocgVhma2zOh1EF0E811W5l2fE8t118ctvsJpY2vtTcA
PLn3awtSSMM8jhjJUO6YzkBG23vSPnuu2NI/7NuCmsHxCQqMZxSUoJuFYCwEl2M6
dbHdO2K4/2TLFOhpGgjzUknO9jXoseNYI52Z+uuWKwTfKWPYSc69+HSrEJM16TAK
GCAFQxKALR3DaNs4ZR6SZqqB17FuCE4Xxi1qHgzCCWGYV08MJwuuHEMEKSiRJM/6
Y4dKKO4Zx+E0kBWXfqHv/23+ozX5wCX5yVokDa1tLTBLX1XJgjjYFq4MQhLF1ceV
9ReHyu2lH6TAQuACazihGEbbEJ21EheOxToj9P2Af34z9tm6wZYO0Zd4RXX+hwr/
/5GJJuJ7py23hGNDURJDXRWamhDLEqzUppldcy3VBZ1t4RG9By6mxmCQHcdklvoo
rPv95zV3mCyZkhu8hPMeAQSb0S50wn3CW8hIQzB9X3b5Sge5tqOpqxpJsgqLQ/Yr
w1iri9xBniw40YPcgWyKuo1f/16lNXBI/M8aCHDFHv0vgxW7sP+gnZZnovFB1RaU
FtpQzGKxMxwdwL2eRyjyjHRAkBq/5moOK0/KU5n8oXvJYULIIfDaMAEEs24zOSMK
rOMaaX0F1+OrfPEKa2ZzxoeErUBXnu1Pm1KQNLqmHlpaX3SXhKqdK9vH0LtiPO81
GivynIRdaV/9Vu2Thd+SFzr8DKf3f5yh8DBG6GM13GwRxe0ipaEVAqiKtt7Lsya9
ao1cFu4A+lYsFV7pjELqPEuQj5Eh8a21I+ttY23IW8YUj6nRkek1+UuuXJVUBxlt
Eu7rPChlSo0WrJR8NmHC83UNLCRdFqkUVmbsIGNPIeORsY1MLpy5u2zw1CtYt2Ho
1Iqn6thVKFkT4D7J0iCKyKbbMc7ySePH67KR0Sr9n3XpNeC5y1KJEtKlg8CVLioQ
jAA5tgyMWdoOzzQeUdB7287NPDCDYoFsbI1TaL94Lwsc91syonJItBJoAeqPEgX6
i/E4806Lb6R0xoXCWXyqFJuEoJm3BQSdFlf8p4FZ1j8Yz6pyfJtRa1UxkqEqmAAi
/1Z2MJTuw8uboPzfWvOp9Y5aG1nUV9iEBqJOjSe8j3MqB7/Byw/u1sPbKw8jSYDA
UisqyH0edIXJ2KXn7xRh2RLvdU01KyD73SnWYz/rU7FkFoA3cOfZwsqgRWEMwp7U
9G6qFsZqxob+SkyzsUi9RpXu4npUweiIJ0ziaGDLUVaADy9Ta19TMuOb96sJgVEo
KVhwJ8DLH35RfLeDEvIQc3U2KV4KU4lM+qqBweXl6519EQJzAvOMBArBJQYueVIC
/MqypAl88lnAh4umrzZTuqTPsU7r8YX3Gfni0PBowJxZTJn4lRiDv4y/GADe3InF
YnpundS2Sm9cxn2Axox98aNDd1vBAmNojbz1ZrdY+RetxRU37UoR+VYhha+kQFqC
Y8z6NicgVoKvJkAHFv0zVq8FqntO3kqBe0b1oBn6NJhdKosL8VICJL6WpXTIPDGr
A0yn/1XzoWSVxKXfufy58Ea7znV9kCi6ICdxuue8pNaFU9zAGvtuFa9u44kcSJhe
7JI9uW5KU/rz4U5LJUre4l95R/ErvkyJzqIaqbuidP5Shq8L60emaoqea9zRkVwi
TT8poToKTQ9avGo0kwjBROiywE4uGEPf2z4qHz6+VuFGq0wMqH1A3EviY6+eheDz
kjr0nkxBBhLQVshIRnOPVm30xId5rN3sz5P17BvpNPs/8FYoFy6m7b9cde4M3wZ0
nKHN3M9ect73+6BsQuObsIc9XYqwfUkHbpAHM3zRhmrv8f8CtTj+ieSe404FkDPG
yDstVFf4VwshOp95IeTJmMK5SfXEKLRaQICYA3vkhSnlOauT2hhsbEQHdi7zOK9G
2a3kVQuGE+lXNYpEfzypbo3OI7RZdDyWe63HcBwXIcHZnIIrasG1ceXaq5hY7suN
J4mtKNjZxTb+HooFbu1YlBq96eZEL0CePNo3s17wmjpSilxExr0VXjsUPWFkvbOW
H3JowuQSnSRhokoUMlJhHu3zBidvHQgheT9REoC7TO7voW9IZl4QtzaCb46OkP6T
c4447BQvUP+eSUalItgzjOVgTEALKLLCvbRh20NBGoTV1YX+OC1pRTfBRTCje3ew
0LsrKMT76T0aBfXFelFDRxL5skVyI4jNMC6aX2MbpmgGpqTXRUJOzW+hHJr26VL/
ygzvaygRW2YTvDafx4TY2EYoR1+/SUkLc491GdzdzneAgce5FzXwQCwZyu/9qANT
pRs4DFpBfdXvABN7vaFgt2tDf4hT28XTCnl4p6FbLylTmEc7gcdD+gNFrWxZ4jqu
dgn4mzJn4U6fcN8BwJzg/3fVJJEZ3L2f+/BEhMW3w/A7PBpD4mMnFLMMbJb7QLJC
2GNcpv+t6GadMH6yAN+1u667BesSUG8yUQybywWRFGTfFr8G7V5gj9pvTbNhUmpk
ja5lk+3GWPk1Rq9ab1/sDf9qA7FicZNTbzemdtsm5sQinIQlvWKBoiDW5eqhlsYz
YuX0ihUdjM0MB9cqSVSc0jJETF+pnIp2UR5GJo4gvzEiZLo3DI9zLPGEWmaxzxYX
R4Sj2A6v/5FIYYZvn1uwYD2O0Tou9uuYyBLFsJO54FCwourDXnu0k8LMN7NTJptF
9Plv6t5IzUIs8VB0H0VhrPJu1Hjhv9Gx9nFrLS4byvsecLZltWly1frfSFmhMy9X
CJaUMyvmmc1RW3NVPYa4DMa39lxcYan9mNi5pwzi+48mtKg0tFYYwfLXkL1Zt+e2
PKQdNGyWaAj31Mt6Xi27jvKEPmAwaVdWs5twsMlCiMGTh2eIPbzgGN8zgf+ByYLd
EtIv6xxNzO4E+Vu0WOTJ78hdojCT+qeUILbF+tOWxKlgDPOKGm3Mw58aagPSPRYN
EpK2bRsnczEvbcZovUmcmqokHnRjBYYoColupUzcuxtnuX6kTdKPg97vXjrC9CVs
pFcSZR0LdDoXbuzmsDRKrZcDGNQg75KbAJCq7cKLvqqCt2qgrhMZeORvsG7QaVlb
uHZfp+ZQq3+jDaBxSmYWv3FBnMg4BCxp3ghWw8/UCAmDM33VvxUEKwBp7z/Wh3Ex
v8dksxSXZ5JMSdou5Bf2SpQ01SW7sXZ7xwJx8VOU9OdmFyR5ivmfYHkrl6t16ZKo
HHaP9Z+BmzvK2v9U6F4yrh8Q4U95cgWzxZyzvU+ScNHTRj0LyiW3buTQ0EZcyMrQ
1DfKA1VQov8Sm1Qd24md2HO0lNBQOifN+xMDbFpcdxmMTm5thnjkW3w4+swFlRPx
A+Gtn46UsMYb4dvtASEh8pi2ZapAu13gDr6dj77IZH+M0RAkfOJ+hDsQcGFyRD6m
XhFnQdOdF9S6cDuKMXI7Rx4Vfs9SVce3pahtW/+7Ycvp/sBCNxjZOqVAPj3bGMLC
lI8CJF1S2axNNhxD9C4jHSdrIx4pbEAXQqiV0fgbVxp6spJQ2A+J0GTy7r0uj72W
auvCA6RBGnn6JtP4AcMgOWWYfd3lXA+Itb5LfT+E6UNQ/rAex+4VJdERCNlHmE+v
kloNgle7aAsi9R1DLhvQ4YllUM3rHTKHJY2jdgQH+/yqqT9GmX5ythSr5tUjkqa9
vXavpQrwFZo3QzDE/KaqWU/mHgf6LSPCcHiw6gWtfZW59JWbTMpX3HLpJR9gkMXV
jM63DlTlgj+0PKymdiH+OOPqeUK7NpSmb3KsUH1L1QVUPq4eiB+pAMfIKYW2lr6C
BNb/gQnDXSfxQr55Eavd8KBjLOWVyE1OiPcwsL7+bciNEKJzYM1hqVR35drTgGPW
LeiR6IXHYmvBrtg1ei8rtADtNG6MQF+UOylgpqFkYlOu59PsKCEQpznklyTf7XKk
pj4lKxzcE0rH9T/wTrxZk6yfyokS4AMAiMkCF4WVn6SeTTP/bJ/viefVSTxpnqNL
/l0DQ4RxGfE3AO5i/NI5cx8NzZYHlVlHWLpl/f4T9ob3ME4H9uzyvlh63EwiVYE0
ceqMBYMSqpov/EWfdosYxggBIEsV40oheftgbMlXzIOgn1rxf36higI2YpRFEsPt
RrS+yaccSBc9ge3ipqcu28KQ5Oqt1usiSQGFbnunli/6vVfaSBME6dH934YMfU9i
BAECsRE//65ATe8CZmi8X9bQjgg0Bw7CpvyeWPrr5lUMMNY1hIMeFxFYESoYlYpw
uo+SQQxwBtQPOeU7/nHRF7E8hBwQAMUlinLgivRkSCrh/yQmCE789hrC193OABOa
xRMveIjbVjnQuTABNtsTuAuYLv6uyVlUr14XPYU7xbUg8HhdEkg6Ggrqsd5Q872u
9j/8jY7XlhrZg5I8atZbuVc2WB8PYCbZUqGXFUWB9i1b2tDEVPMDT/PtgOLMZkii
7snVjSFHQ6F7JdyCKJlB6D5Tw1oamu4MwhZRp/wWSq0N/PIXllXXTqHHTabgxeNj
C/fpKpx6TSo6DOmxQoATQAhf3kg9J53mThSa9HTL2Sb379yeorxhoEnkcXsGFzUY
wAytDzS2ufb7d6p+BjGU2md9UFpngiMzhQjVYpOFJ9Y407fM9CmT5LsHLKz2d6X8
JOH6EdT0lJcl73STLp3UCFAPieYW91WtjLgWjgiwxzNkDPjoKKkP0PIKJnIY33eN
nADrNde/cKjD4UTwcGNU6LSNF6u5ScCdg0hPJCXMfVgbvyLoKxz1L7/12faQp7M5
U9d2HSBvzQqIsEvdiKDmYA2/9JD8N+9iLWcQ3GgUBRDE/FWicTLhEsiyhSYLdZum
UUe/3U4zsh4PeipzWmNElQAR9klhVqWY+5ie8tv+CJTJoyuhG4xDZ+O1zYxH+OeB
FhIQiHQNAj+nVeKaT4l/7scLUeLD3LcadnZuERZkczj/szNncKUaX2UQMpsI33nZ
qT41YfNn5UdQjqOe6rJ7AMw/ooBOZ5VqKqZSlXSACbMDNfwQgQS2fp4MeBbB0PQs
1uUJ47l6MZZEMUIxcmqHz+UV2meJVToFYl8RZze9f45TRUxzRuAq4hy8I1sGB8YS
oGj/M5oENSs2wwGGwBDP9PBSOloMV6IlWoMD5oHx11ZWq8ldefVrIpMWDBgf7dC3
rNPqrbEom+1CzgGD0BVD4EDLAfpGK+Gw/S67R/20+tYIMAjQ9RPvHi2neMBVZ390
ba/oMdyeDVhAQt2wOMBcshZdUDx+Mngkt06ZmFqIcFzOtJmRzdNvJZyhYCwkbJBv
49qIB58dkmEfkofQYcApCV4KhfkJQ+Fb3F1sPYMJ0NbE7OusNhzk3FMrQ05HSbLr
7qza8vTUndH+SQkO1Ux2kpHpLZpI7tik+hGiMa1Qjh4LnUo55aP8rzVRz4/s5AnD
H0tocv6Yual4b8dED03q1tBND+gbq/BwRwDvzLzU6UHQgsweSGtsnrjtd+O9za3G
TZIraEKDzel+8Pb2TPhFF1xp7iPg02Ix48e4Dg5geCBN6ULZ5dPtgtJM+oI14mJk
T7tlnTJis4AbDDIXuWudhEsgBWOQd+K7foWdlGaQqtObX95wAAwVDDUoMTI3o//4
SYHupIep8jBOx5PDQ1I3yNC4qdS77INTXXAIRZuStumc/1A/MFZRMWv/I6mDkgLW
sEqdLYEM1LsNKO22Iq4ZkCVNE2Q70NZvY49Sv6pBaiPeylfrcqiNP0W5Osw6Leb1
cSTucbjlMiBDygbW9FuEmXuDUYHRNxmqmpdS1W8tGHXdqgZmBq1RM992c55gqg/+
OUqxSWafqH7kdDlFH45CoGKNdwG5Oe/dSLJOHMmi7kbJM7iL79nJJBpV98bVAK3O
35h/suAppKLHhlEw/JySToZqEC58i+UTGJ5Vmhm2EA1mcqdj23hzF6nw4k22ZUCY
GsG61vcP7i2tJnajTQDynPfJl1seNgqBpV9a7CngsLSrhV5rPSn/22AwjDNZ4k84
7m5XuK7ZsVpEIn8RZLznGeWxRq7zmNkXEGQ3tI05me5859fAOtEL3UhhV4nliDMQ
FH882k4W+hsJ42p0HBmWJxiF9ja+itI85vkfviJZRXNifXZu9bCYTm9YJNnA+Xnc
GkAILRz+rSjFZD6cZaFRKy3GTFM6LNehakNWwqefkEda1pwM1TlODNztqH83nC3L
tf/nb92kGrOkPRlExv8nEudbBJZDdedmvUTfSM2fzVeN30Rq8U6sy4nWTBRntZFn
COCnRMudgb/bGic56yY2SSEcrEeu2BVAibN6jCVbFVblfGEcvMKztkXKru67WIJZ
5hthwkjdC6rpdhtyFzhpRHQr33sBNHmlolCLrXXzcuGKGpTagvX93AVn+Uq0254A
Zzo3lQLQ8XDxQBWa8/JH9E98DbBW6FAUDr2eTh3j8hHIsOIu8/pllABUak37YzRC
FbDnROmG6fyVjsUfUNatL1bCBCMHlMYLPGIp/Oznnf9lNDkE1dgnKbGsgAQ9btWB
XscFWm/LnA6e0PFWHclJS8PI6NfVHgZYTHNAhFnjdnrf7oSmCjJFEcQaRv32kMkW
DsTyuY7tFqiGxhcV7qRsF3qU68fhWzKbDxbDhX2oriQf9CQU9WB/sgqC56WGl+d5
y5u5qXEgl84fQlUKbDGJ/zIAsK8/ik50CbeBL9TexdKgiWvNXrOT5BuKmfFR+mx0
Ui+RQFay/Hjadirrh7MyRjScNlGKYXtDsX9PVUr0fXqNHnjK3QVymTUEnhlnIY2t
f4XEUbpedA3e/TJYIqR+c8A4uw/bry+LfsueXiLg6XLkjqwoM8W0Ded2EclpssRo
V6dLD2SP943h8dshzvQuXAtF6IbdtbF9llpKVQ7GI+6Rp7aoJecY1mQh7pnMeVBX
8X3UybpBNRAOw4JTABruOb2wg5yDo7WMJsYPe5YWgBzjdu0ZMb8VpHhV+neXO731
`pragma protect end_protected

//pragma protect end


//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
MN69cBjS/Wnsf/xlbt59xlmgAlqSFk7/E63JrDBb5xoPqrbpNBP8XbOsXdVfGiE7
MjpoG6w4gAHAJAm0S9xi3R51nELVxf6u/14IMORcFTkHWGj6pzLw0+pM62iBzb0o
1oHi2cJNoAJb7HZ0oSNe6K3K3p+RA2OS4sPA1Qabc0qeYNo42TMWcCfG3KQYhEWE
5DgAkqR4L3aRgRI1z7RT7jAiyhEvWNkGeHa4VDQgmFxX5xGIZke9ZapwnepB9wiQ
vSuv+rDq8ZgNUWv5WeSWdPdvOLoK/8yD2IUSqaqFwmrVqmlprd0Wn8wSpHMM0/KD
oMz7A0+sJFmYYMGSsqxQMw==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 624 )
`pragma protect data_block
M7lOBWpMWHRwXZrjI9SjoDzv8uCjqq7SdtTSWC+J7xBUEamI3jEoYGhdbOzwif17
gNVVGeBY1zmb5zO8VrTJa1MJZnsk7qh7iJwmE2QWgdMI9yOP91smxv3ycasc2wr/
UcWVU5Aw3HyB+98aYEtGFDep6F0uhIE5vtY1jY3HTFpd9GJwURswz5aCjrvTT2MT
amGFC/Flfezmu5xL0HYcb0Onx2X4yCey+gYGGyzzmUEe2nYI6eRiaOdsfXEmzVst
DtUh74FhDvYC45lucC1zc/ogpRvlfABwGFDy7lM7aN2W7arnb0lIlW/02VdufVQ2
WlF7zBdv0vQCKCKwx4zYU8HelbVCDndi8mkDNKVxviO8PSLDBvcAB/LCycYv+y2a
7EkUA4aVWI2YijOz7nNKKZwb4ZSjbi/WcM4aXOEMDOIuoaSqzEr2+ppdQYS7WzBV
6YSkciwE0avogWozCDhxp1nkPBUVgYpatrQdTg56utFf8JxfZqyjDz3982mIID2P
jXCo3GrJxb5dbqWYEiu5iLP/EFboCp5rp1xoVMh83etDSQmzhluK1S504no29SeS
0aUrzg/C1Jxj07mSE9nYqwYuEGZZhXnT2KNgkDTDwkQ2M7j+uB0RBnDI0tDk99rH
9qYOzkLHXQsIcTSmZg0P+Y8wO8r/TwIuYO1rVeSmc2Moh/s7dxJMJ76PLOLGdZ+d
+caWn+gxqvEaF4DDQakdnugz+ytB+ZcOjSVyD5HMtfQo87rf6H3r8nAaCKCdbD5j
wpjyaSg+7TqpnMfHfZFrpSRS5eVp8ItHQB6d0KJVQBVaECnJeuWOZvtdBs4GvCeC
`pragma protect end_protected

//pragma protect end


//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
VHlqvhgzsE26AndCRsO26QjeG1pu/L0RLYrtWDs69aJHjSRi7D86vTTlEqrn4TO/
LTcLxekS47keltwLtOJEn08XkIsKNYBJN0MdMbZyZkctxz3eRBNGX0f4sRpuqph9
M2l3WW9074+Wl/0XDUR3mgszjcBVDeVMZPxheFrgjw0GcYFo9lv4F1SGOzxFZzBC
3jpWb6l3Q7nqp6luxzDwCAZ7gf0eL3EpUit+UgxzzhwwfwQQpcrcYC2s/UYiAPpB
srLRxLN2UKdj0/GKLO/pbz5nEMEUJBfkfep+DmWLZB2R6wYE7NFqjW0oQNIkPUaH
ebAc32KspmgUkxqUmn44LA==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 3760 )
`pragma protect data_block
hvsTIAfcb2MP05EBZ8ei0j9VCmF5JWlmXae4OQMmExbHRjb3muYyBJgELw4ocKBx
L0tQCno10JhnW3HsiSpXTNKFfUcwpzTfHFg83oYFl2PqdP9drcMxPWMIcdOKdOM0
d8Q169E0zFOg/wcqsbSLnP5YEx4xkOfxcoH6kVBP/g1hOiGha0HBTPfVVs8csuoi
/Jp7XVO87a3Di4EaTPJHZpOiMEL9tr85bJjp/UH5Qx7ZRYnluDpzsj5gvQwzeY0d
mpBMFH7+jvAWyu4eQz4zYbmcn3a3B97zkjrNta66VcNHdgkDjCjs/EeFKxg5K001
ZE8Dk/SxL4mvRYZTYvJyGwMztjqflZE67E95+z1lMo4fF8ZouaQw5Ypu5EW+pk2C
3Vs3T47Z/Qp95RpcymVJ3qoXz6NcFleovm0PJuB16jN1XoAxl35RofVlqO1iF3FY
ve0pUim8FSL+47zCpzpFyRqoiNvlJkTTaONccKpa3CVttNXRsAXstZzOIKKQSEFZ
3bmwXh2GkXzVsrSEBkln7fbJM4aPRG3VVW5YCtNo0jvtYbfzrbLqQwmn1fk1ampo
POz8X0PEL+WeHyNwyNx5747UUXKfxDX3eD0qH6hWc3fAsvg46BBbkrsoKbba2MMF
mB+65rYu7BbtAHUp75ioKRnpfjaYobjdSKbxhAR4LhMbiOyJA3XlIRex8xw3ztk0
Url1AYclmBbz9tF0H/bndFQakbriO0tp8sXTM0OGE6ZoVV6Q+tQd8m1yt0g9Dr6j
yaIbgQeSYdMhVhYfVHvdfUfs/5jOzVJnF8kpnyxvYEeYiO5ngNjfmZNQ7sEM/Mc4
069KX8GKytyrodwp11acr9+PfA6VGZO9CKULF7Ji9GjYaawbJNH8piIVWvriCZP+
wrB1dc3HXbFrCrcsbtt8WuTGog5NvDpK9Kgj799ga2IvheMI5qq/VQTjvQb/nP0a
kbwj45WgJi/TP8i2HfDJeEa9RGWt/BzKhYGh4uee3QT5XpGNQAQm4DwazbCuT5e1
TTHdeumwPw9uP7EwZVijVj0jqPa9L9E+O4RENqlzf/s3CUNvB/9ZF5HUpFNnvH7+
lXg4GEqPliqAA0TeoGPaUDMKqYAi5ZdrlptmGiLhP8LrEcvUpYKuw8U+IcZIZZnY
NenL2n+cOFBrFd5f4JhhiebBW1w5rhky5LbNYFcz0oELbR/DtcZSSaaoBY6QJuce
4PxFkCfWJZbwEhivRdMCmpsbsAnTSWAZFYfo3g7EFK2o5w+ks9BMBW+CYhgTK2Ng
4u11+7+C6T/N7nfkD/mZPfXA4E4OpdIeoUvzJFVjqqLGxMkLHHPh+oCdyTrhTwk7
JDAqSxluOI1A6jQckIF7JqvNWqlHwaPs1uLIEY9YggcC4AUuH3EbLHyov1w2PH0w
NBcgEdtWrssmCbIqNnRzLGEWfUxHRJoKvskdfs5zfk9gPjl0WyjQNdEWSZd1DVxc
MlShXvRmq+W7XYF+5aqz0fFx0PCdOQgJAIoXd0nQr10xj5RS0SfmN+qfj4Nc2P9w
DbMuO+Uue1ivWxBWFlUIQ9eTFhdcctWGTIV60FjdVXGAmTtaNsJCCCGrlGunjyOz
J0H88yHT353Y9fcyLRq41jDFo3ronCT+cPCxND3oA1+baSMBZcUYy0ouWuAmIuwk
WMy2rCBXXvehEQP2ippd/neS0qJcBvSIRPkCJxGtGBXg70NZztdCtKfaTnnVuFpL
zUktlYIMvNpiyoq+MOsVgpk5auJGYJ2zv03UHp5DpO/p8H4TIKnmbVilAhvfjYuo
PmnHQr4B04KSJervu1kXrGFs386n0o57R1+i4Yr7tdxWzXldA3HOuOX2XuEclGxW
eJDa1xVCAn50UUwGoMkO7pYHBJ1JTK1LZGbEEoRlvIIBdSDcs3oV40B4r6hEfdY+
GJAyZDA98BKEKQSt2hz6taOrGle80zg+1NOl22BReLGVjpQS+3xIeIwaMnzaYfdG
Y5cAVo6IEqkYft9IB/1+SiiDi6eb777eKmCOVCFbet0cNV7WPF2gAI+/2evhLTvv
qN9BKnKq/kAF6eXdUOet+K0Z7vMzOWAovAZVx5QDzNxKkcJO2pTdGfu2EJngEnAH
SpkNYHGZWu+xPB00ciofGCTWB/BkIgouT6O8erre6yGDJxBkgezVgRIbfx4RHVeY
6oqsZwoxpZmvXU1GC+tiMhWdkOk/JovvICn2Z7kL370dO68XXXA34nDUxqIFqgiJ
UFBqFyXOgrRJKeQDkAlk65CzdjjPCvLO23ZjPL5tyRcqjMXAbXo3PU1RBVcqhG9O
+oNTI7WRNRTI3fzH6GR+i7ktom3xop75fxNktwnad1RRMIgU4nivjjTs0dgAR6MG
EeMxw/AHRO83WLeSgmVUMXo+rsdfx+zqutDxcrxZHvZAY1E+LeaAbf6oisou3ng5
w1Rv0T/vT2HvyH4Pjk+pBGy+rHIWAtmy/IZCDquv5JrlMAHwrgmbTvy2xImPwK1a
pspTvFz43ZeBSqvykKe1qO/U4DepIhyw9RMen4KAM1+KNmSLiI+0rf/+GIb5y2mD
lqiD2KrWYm5J1pA+/Xbx/Blwv/80BcmhPgpTjWk/H3tshYiUIJNXuED22uG6qZ4d
poVlnqcLZ0lFYPYcqJoSEtaanXlAAMn8R9tLOKMnNai3Oj6wl2k54WPLFOsGUXwh
10NCspUKjkZIrW4V0fuExBsuHR3nSjp9itCbSmBdhY41JN4TGtF2opLbR9fBbyNA
4T9eYOwWv19KbRYzr/zLcvu1Re3o3CXSSxQogywyQ6FLC3AzooeEPLkJneug8qGa
+NmfvgdljjhIMsQwxM5UUNANH3A7rOHhzwaU8LXinyYdp8FQAIRYIotrJxmEN7oJ
TkqV8OsT+pWXxhRcih8hC240XHNbCZ2gDgKKoijsljdzU5p6aaKLeK1vzlZMHqhn
AWMIo2YRb7UX92jMk8U2HJIkmIDeqOngkJ14/StipPZBsidn+B1vGbBksg8JeXs3
FP2ZfNa6nuY9203Tp9Mzn/7G8cTvnJb8wxjpwRJgiOFOFfThNbdXsFeePzp5CA8o
/1s6Li25mK1YM8kUtX0kyPhFhkpDB6bGlX0vXv2Ee6rhVD0PXU2V3lXP6y47IQO6
CRT2LXESLpO1CRWssz80hSaM+dnUAIiiItxMkbUdtFxHALpnhGjQYau2q/lh8PeU
15N/rO07iRhaCjvna3WRZg4D9Tg2BUfsdCgydyq5T7HH8RHeVkios8rIxYo1Ou0q
uert8JF3/dkOUg1NZEUGF8z74aEn7uSNaVvphy7+PFPou1+YL6kbaovTiDQoca3H
ScwcQb9rf2AagLuajHOu9rCbhwGPPt2QSnV6bDVX8t0cMaU78BWol2Ud51qhr5L4
+oUMBKnEnCWHcsJESbfx5zXt64VkvbBgYIKKnXTbEMrjhstB2bRWRUwDEQSkP1bC
xywNL+tFVlY8FwBTckogX+1Ct/3l5Ax/LPj2Dua9EMSVEE+Cqbt4dC5/k6OUKSCI
hqceIJFds14vC0Ce+ts3gjAaJfXx00n27AHzQL/GyIcBeLP9j2W+a45nWi1ypyhs
IRWpPm72YOOtNa8kBlydt2DolWlRvAapubCAd2AYrWnwXdn/8jW6OalMpW6Wj3hA
wbd2UGhFAxb/sRUbo2tRGnIZhBGbjc6wOQSudFYgZ4dvqJNhB/SnhQ74wVbYCexa
bJrv4942jRG20LyZrKi3jCTn2lbYO/yMLw7lzV2tMwiE/lJ85H4Wdexs+vv5xJbE
3rycUm4CDuYVBXJq1jYcuLuESR9Cu1rF2RP1UaDmAQhstFw83Yzdu9O8urb7AUNo
bqO+YeZYAxnNNdTcbqvYvEDywb7Fqm5pRNTDMAHHo92uk63MfTq/D03nhIftgzLY
GL7FmWwQsJruJPmOBqzgRHwH7el4nnKr07ZwpbNf4OBofgCS+yQdje/Q6ImPsCRU
cdV0sykkVKHG642Ml5T1bGiSn6OEJ+iuNTsPxqFKGGD9H+2ylPn4Oe8khUuDkeeL
xircydrNXG68x1gzdh659MaeD0qiMXJoOBAaEIH6p/FiE8AyRnelS57HJWSsrgju
vpPcitw0x71e4nKCCYCg06hbp/gq194eE8jenJDEPv4xZaNqtw5Bfu+mnRte+V2F
O9vZ4Rm1UaIQjDipwKJZKUHyhjx8vNqwCwmwUmxnyjqcog8hzKB+WMazPC6qPd9S
MfNykQz0Nt0UJLIwFYu/C6RTZEzuYUdpRBoQ+YqHGUmv1SP6AYdY7KuyyyyOhQDR
9IeOeKAT8eRAY4mHWDb12tq5ItT++73Tx8orOv7gG5BF06545e7PT7+Rl/ePISv/
yS+I7LGWnPV+3JatWMhOm/NPdv0GcKtiB+DUMf8ul76cFIF+kLmksVgWYjMKO1cE
GfdrKtN865dkRZXy3FZ6pjc7eiYFo0RPRZhBcIK1+uyuUiKvZqP7PZyWKkusr3Fm
M2sUNFi5lCtHDraeXCkR0MpBh+7zwTlbsl9kb11C6R90OubFGCSVLUJ1GB5K0bLs
5/49pmlj2d+Lkdq/hJkwU+F4YkAd020Bws98ZTIwG8rRaRrOPTSCONru7CeNKdDs
X5+pDng5CAOUWgLUl/c3IfrjzeQkfGmzO0+h0lkFcXy0hKxFfFUe69AuGPuGRJFY
5a7MrDpbk9XWa8XZKhMJfDtCr2D6kLJl6kxsWub0qkydCVzJ/0HWLJ6RvKme7Mwb
xAA1Ae9/eRY50QB/pvDcCtWXxhLe51QvaBK7ofcGlkNT8ssA0h1uPcl+FxDDon1V
lULgfyRNgxMHbcDxUyBrWFw2jkMj4T4/0bJv97jdxzYOsPck2lShoP5ic3WRrtin
gx5bvCmOiVw3Z2Vt3jxmMjRlnixY0tKRwN5J0A62NyAQsEhSSjbqLieuSc9Lptqq
jbutnIU2WOzhfmetrtYqZEyJJr6PAy6bjKaFUCsBQULprngOCvDhtZOKfb7vx3mg
ZjQV21hxm539mYsP8A61dw==
`pragma protect end_protected

//pragma protect end


`timescale 1ns/10ps
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
cA5j11Ga49fw9dVqw3A4fwDbzqXUgmUTwCj5oq1btYpiVUyBvHEmylz3+nN5TywK
enhpmunjaaoyDOFu8jB3/WxzGkxFtYwwV4beT+bugBWqcp+ZnV/RaAL1ufC5Gvh1
YpYLyVdFHgzJZxuVMG8f6+VlGOezulYxuaO1VFjdutP3JufHehqzyyCqQg9bE4oE
qQdZmJxVT/JCYtaqWFqxACH5YRG7FHaQfy7vxd0QY4p7+/iqA1KAuNFPOJADCQTR
9kqEjUij37L5Q+oRgWJq0bwj0lG/CJDf9Gq3ZybVs3AWLkzNsXAGlMS+DmiRh2Yu
t6EGH/5OeYEbSXJHg1sN6Q==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 1168 )
`pragma protect data_block
PqmbGkLdbAEWqwIHBJhpGB2HCuVEr+Ljw+UG1EK+F/odaAq+0Bl3wAsgq4QM0gKU
8Ma60L8jEn4vS8Ip3IOvuPGegUveAP/H5Qe1d4DnwFJg3FJ0PF8autaqOKixEZ0E
y67tk2x5MiEiFEasa9/nK8mHHu5vbDa0o5Kp7wh+bs2lTBkPV0xzwjSbjS/o3ATY
34hxSk5KpeYhC02VrLB7URAoiPE5J6xbx92WaiwTNmBdE96VyChRqU3nTGKHxffX
j6/aFm5o6V0TedQpQ6J7FotOQ885yBZcSCjq2UHXtYE6LZnh4lQJ8EFYCBlRBiok
x+J5z/J03gK53P7Lvi4M4u4JaBOVRVtL2HX3mVqCvqcq8s37lL3e/SNj/IxGP8Tb
ahog1Y8zS3RGxlSGBkGLJoV9BAcXVsqugaZqjb2X92zRCn2j4+Zg18+3Gbo3S38v
tyEkoBhtRW03SV3NBNpzwZZb4SBVjmzfNVbp+znsIuYq+6jVi6K3gZJKmGXa2lDm
RfKLixMiISKu0dZ+qdMVWdcOm11bWOYo43/8hDz4qUgYxLrKk2ee3v5yOd2GmOZs
ZV7BJU+PGnZd/7h6xtzL4tAwldVucvc8DfAM5xDKxiwxTCnVOVIWpXlTh7FGdvGG
D1dHr551dOUGWNDH2tT/EqCZo5cAXe5ustjZ3daUZMsXWkmO/8UGIcuTMAdb4oNe
bRh0cllCzPAwV9HhA3dRSIJdk3gUk04Z/JVPvnVXK8ga2OcfGObP8JwDNUkqajnF
YUo5mYQY/BnCvsmNpuF7rWuPbNAfS+tVGWpcv1SKochu+5CSP3z0PjGui1w+ke2n
tg6LOxb0mselRUyYXPof1CJ+QzXWS/CTXunD8kseoED11jDlK0dDMkC5eog1A+Oe
OE0GmQqctZdeTmwtJjnslcD+ienvthVdWKpBX/PTj9YxujVu4ck23fwrmn1/VxXT
PcdvC7T4rcZFZF5uoySTikcoiopk+0FtYaKVQWmF8dOX7bbqAkSgEBOAl+l9O93k
ighIsh855Kz/dQqUxUfPK6n6mRoJ0fLmJlbojosYGVCxYdAxG/3pwsroQch7AS8u
eS291W72nY3gbFNA7KuIZ1sw8YHhMIWL6z5RyMVAkZ/NJKjJB4P3iIrtWJeyPG4a
m10fQ6okvEcyY7URF6nAFUHyiVD9MbYmAWd2IqbvnhtYxocJZF98A4xjPejGiS2j
Ra605Cf/DvsGERdN332oRbZI86JlJSPM4BJaHwKwEW6L/MkoWb+rLuYApmTHd82O
ilAOlxgozpBMKONPvSpjEiuEyKxtgiUyVS9KEH8eBurgzKwhcsZnuyo64lrv21o0
97jiKzn+DJL/QH4eD1U1gkOkLLWweV0ApIEZlCX26AdVZGYPlEUahJkIqNU3sSsJ
7HiWgBTD8MnT9OaL5DDduKf74UMnuqK2HUqTVt7+dQuEL9qjU6ExamQ7/VurMb8R
OWJmfSL0BHas9hM/wBkcSEOIrMlJkMcn4bDVVk59hTqfbPkjucJH3WEgNCq+OzNx
lXTdA4VEq56h8wCBBqHnkg==
`pragma protect end_protected

//pragma protect end


`timescale 1ns/10ps
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
M3z1chqW4GPVt55o53OIFq1lDZ5A+ImMOdzSTeC1uDcVieQ3ZZFcVJIXTtv3lorq
CO/zeKgD85TVtGlJ35CB+rzye8qpJm1L8XfeMh+rSxyTP/LxAN/1Kh7/pF+7h0br
eo2j5hro/0sjxaXpkJROshRbRHOy+Ae6Zi/vg6UAnrZMbqdbnv1lWKs4IK6NymD4
jp5L2LaihTPeM46DKkt12gm9DbaZGOZJVC8zTTpyoZ5yRxiPm8AXGupQhaiS0xdO
wAs3OEpYqiZUIPr1NhCJDd4EEejQloOdBnzN/MfWvue1eeY9FLyDEU8uYL8iJNWv
lnrozewZ7BkdZeJnuOFdCg==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 8288 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1ns/10ps
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
c9nrZcwVSf5x+KcnfQwtw1KY0bPI+UmfwOBF88GLNUIRIBxQXlcOsTUYiUB2k5w4
5GNdWGMIzkHRAqRWbJaGjxBcF6b/k6v4epaMR0e8eaUqDdMl2rqC5xMeTm3GelAl
DM192CI6EWIhroKKQLBT52qAyZNSyNLFB/dEq+etZ5o6pvRlgLlPoCTuSmj12L0B
/QSz+717ONTWzI1Bdpi66HPz4cfzZ+5qnhL/CWcPXipHQF0pwBisE035b0JgNvfJ
Jd8FSLUWV5/FYTfJ979KWgKrjuhgg5WPtpTe4BWZvw9aF2IzQOLcXexfSYHg79ka
9WWyszwba0Y4Ur5QBeCZXQ==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 1696 )
`pragma protect data_block
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
3ylebnMeYM72Y4Lnx3FadA==
`pragma protect end_protected

//pragma protect end


`timescale 1ns/10ps
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
P6LobuSYkgRZkSed5msLPrmNbGwCoVW39RjN8IsIFW4wDtJoJcv0ssGx3M6N1p5F
r/RXG1OmtqnH5QA8sOCHsgB8B6XqOZL53kdt6qSe+1AoOYg25w5Yy94wPBZ41QPt
PrQgk/ySGFK4H/OJBTlqL3a6i5MfOoysw7Y/+B5w/+qkWW6usq/G0Xjm+EEeRBZA
v5yFH4WN3EjTaFu5I6B89ei1X40vMeNGEDwEjdgAZsY/J+J6cxdVhaH190n0eTSC
E6lEzxAIM7p1mlngqA+CGHyWs1mEpS8iwhXgnmYB9SXZRFe7It8nD84XDKkvYaWn
a4tXK2iQdrsgeszg/qHMQA==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 1984 )
`pragma protect data_block
e0sszNj/YpZ7Xjvr8mhooGYUy0eiFhqyBY50T3/Xr12yJxljK9GkIhEgcymXIqVm
JClj8/cAAyBCZLYAm8m9tUyKgP/8sjoH9cJkShwemXThrM6DGk/a53X940anvxLJ
3nCQPeI0+H6eGfM4/io8u0bv5A+dIZL/Kp6TdkZgW2YxDz8+wVPaxWq/76QJ+0hb
c1J7n+c4sRab9/c9hM8Na3gWTCcD53466xjXF/zrzTF6vBy/L3wEgZ2S1pis+jF/
g48op5ubnQtaTYaRqkAOO7uJShXf7KTGomgC30tBiDlf3919+/6SHnJLILjzF+8o
oys7aAb+Y6q4lbmlwg/UBYKknw31KAY0Yp95oteDqFhtNupelt3ThEuAD3aPHocY
4l47saHyDhoCF1d0f05sg4Y3Vaxz6T6UrwJclvI+ThWTgiCqO3fc+afqfB0OHzhY
DsE8XVWLQ2L0zIhbs6cRX/aOk6MNMirj5zIqNCdyVF2S0+J7EFFVO31AeugnZ5Bs
EMtm/UO3lMd/MuWstRi0iWIuAVUXC6iMPi4NVXJ2nBKYMPXwUJbHgot2/kkhBAYd
Oh4AEiJguLPV2jQr/Vnki8gsT970ZK3MI/nhI6A/RvBDB81H3OX6x4LjE+kIRlkl
J1na19EhxW/RcbE+UWs/mWNimFxjzS4p4/ZGq1O+CdMt/g9MYM36wXkq67STRcy/
6SUGyKI+eTXhHeJ3rRf34bnjCXV7KeY6VshQDPR7sktzAF3LeHcTLUzQCi4Pw17r
hmB027mhddWKaynUDPRqzdzxOq7BVNoGYtgBmBEvpcRP1LOz856T37ehZAfRZ3W+
v1vc3LY/ELJ4Jowrn169nGbyWPDpGXsbvJIuixT2pCZ4lbiEbANByjcFRzWV7leq
McJP4wlY5FiNqMg0M/cpumJCFIvw35YSy59yZqxbY6HThufINP3GLlK3o8cf/vYK
Qt3fFNlPQp8/PMrV4u+gM++6q4czMK4ybURB81sDnMdx4ZLIkNwXcx0A2HD15naC
nArPbe3B4nf92Ibkq5c3DilZQrDsIj+RN/KBmpWbMIMXpynlONiL5MAN6dl2FQc7
czbw2IlJC2frvGgyiesjqGBnKzoJkNfGdBr9SJgpEB6jLBY6Irx5rlRmV8+bwNBH
L5PjJzXEgNcS/JOsXQAO1qJBLEw9JUj7tkAzR2C0Ce56IZtRKBZxYSeLYXPHpkgV
z0SMGsKKNjwRC+Q8t1rXp7igKVX686gCIDnuM/oPVUXWX207EMMu65z0jeZ6tF1F
YHszR5kiNQEGVT056ax7tUoxDLhBEjo4k5mBTj8GociaaxMxs6RwVdSVL7BEDhNI
KUOaMNqdpVsGweXats8dpyV3/Bvbmuq+opUaujLhqYY/LNeizPIuBcbx7cEHgzjc
OQ5rVThhkwU7MS3angl9nWBL9mAE6hme4Vx5iGAn0+P8C7NU+x7GxPj4C4TH1JVQ
A69ES0NHMthWXZsQFXygErazWQTNQN1DpQM0pkhGeYtQxF70TNEu/s1m4HKZ+/N2
isCuRPPdh9pbuqrS/G6C/y67x1p+nwufYUMdSUUnJ52or4xS/kqzJAGllzMLy0Fh
2nTFOx2kS1oXJZ3EtXHw0FBoBucK8tHjmVjJ3iHRY0kcs2/qtI6RGpUJnwxENPjk
ZxHmQu5jntv+QhnPZIC2FXU9X2dRqLmAwqh2l1WK8uGjjLQjnmNo4susNbTTyudp
JXVdwncCbXxexEg8GIjNtzl2Qx7vuteLXsJ7uhbllyxbm7/pQANonFz43DuQsBBw
ZdfsxjQuJoJINf4/qbT9qVmirO8gx/mD6QPNHQeRimecvgJ6/VexHbjuC/YXczRX
q0Wfy1C/PPb0LZZNFkuoqjhjru11KG+Sql4V1uNsKyq2QMGqnLi36qcopyHwOk4L
jYP4mqrzOPod7ZslMBRUqoHX4EzZAZ3eZ0IGnVDbXqxkNuwLjxyAn1bLzaCLAOZm
B89U6CK0nxvpNgINt1jEChMFo9H6KON+BMUE3J9+Xf+3ecEI7JCjzFCT6GM1GdnI
U5PC5Bp0CP7jwo9WYXUT0Xrk3eKB8GsYLmcnhljGB5yflUlIxZBe5VkckpR3m6nt
TrW9PTjPgu0FeeolGKZCKRfUXzU98k8d3YzQaxZIAtj1ADeJv8Dw3l5ZZyXPb9vC
wkinPH89UtBC9CXXYB4bJeag6fwRZ+Ri84p3If8gs25Uim8iY/qUC1SH/3Jk/HjL
GZQAIwOva/SQGslLjhRhkjOY70hqI7c4oWevXLQbM6tfebqWmDRDHvqCYzpDwDzy
qqyzdfmrdnNjXy+hZXQViKdgkpj5wZcWc+rbQ75yGzm/XSLkwNZgzRXjZ+s4lkkE
AXZgf3H+hNHLIwFMZwbj4014SO0TLZHdruG4P4kQUIuVoS5bA178b2tToORHQ95w
DnDn+yfJtBZRDXHZioUMoP3ylZ/pkeVOIDhX+lcCFxqZxOh9d+edsnzq4Jeawf/y
6TBdUAg7PDmYFN4BrJwi4F0VS0CIebbk3EWzlb5SJehSjNPcqFT4dIdbRjb2AKwQ
cQSWicf5mHGoZITypH8JWvXhXsz7xw54JsqGA4zhEGdG6KzxeNyS7U/WZx70ce3g
++/CE1VAdCiKoNROD1vrMQ==
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
Rqb5TNYEfd8LEjfbBUJcTsIHZDDmIY7CgEK8Zs5JgNgWzLDjMJtyzLhfsm4CqwfZ
l1nOdSrhKZ04WMbnY00pjDSbEdePCSU5RyXA6DQ+Omcoiu5/boHIT21oeuSvEO/V
ij0MkUir62FQiRHIzffJGda4WTtqlwlHmSE9WjICfLNxB3qA4qZMnie4+Eh5AdM1
hKAi6BeTjw9zUuM/+AMGO34ps9l9r6rxfeZDe3El6kmKYtUOp+Bj6hpWTFw7O0BJ
/MLbXpzpV7ZzMrtnYQl/k0m/mggyA8OPkfCQfVsJ2r7IW1g+/o1kYZ1PSPX7VgeL
LqhUslqYQng4RsdGBKdCog==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 2592 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
ARPgzimL0p2DJmfnFsDtptc4wvXmKaNC1RWo0kFLwptb0O8FnP+zp1fBzVz1AGbr
z+9Gowuv/HuV26SSazxRZ7bhlHJUdDYPVbacnEAujc9KoaiR+vce4t8VIQUSxrzO
wxfNDs+c1mzWY1JKeAbRNA+UrMy5YF96+PPVrY3qUucwSBSUGtc5D9HZUGAE30eU
RcKWtZv5EZ2WKStsfwxy5GFKZrVAYqTeS5VLY7iVKWmW3Ys+9HRwYq8j/2EZzhyZ
sseFapRTRpuZZgrrggFUNL8UT9VxdrA0bZVVh9ebNOku947pIdj3X+HTj9cif0aL
qQenNRmgN4Ei3NNPzgGFzw==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 16240 )
`pragma protect data_block
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
SGS1ln0wGZr44myrlp2dwzDT5Hr54IU66nqeuuLQvbM5pstrxLou8NMyhwt12mo5
0Z/Ke7k2XtRBPeWSY0ZuA/6wmvRJgfw6nlOiOY+5g9iD0fne5xHHXlgQspOEE127
2z7by5PzKXZDNhjzfFK/Bsplsh3BcRqpA0rnXUiAViz/eHmq8ShFDgA7DiSJsGjt
9vU4kLeazM7PYz70IZxW0iOG0Xovd8aKoiDSOWsuSWpX9y8bbqxpoRfletLf9W9Q
6B8SluXpGo4yIxJPmUYoikcU/lGgDWWB30mHxEtxegTUDtBHpEtD7ozoiQ5PQw29
9z1ZUYnxxd+e1YDUfhy/MHY9Yj9Xp3czUlj2YF+PUFSPdb9OgaerytUQXxEV04md
9IxcADqK7cpCrkaSqr4YjHw3TWWbCwz+mu3FSIIMmQRsQUhdgxhmbggrK5zKiZ8R
jTrgu3YgVJNxZbmNYphD3sdPmeBhzLc+4w1EYnWqTVrBTqrp91mA2ZHX+HpAfXyU
PJIGc4HAXgHo+Q9Pa6UZg1npGAqt0bvuZbWy2BoBrsDhKUZO3vi2ANZEgj0pgFih
X8sXgMzf7aKXGDO3brQQu6GMAEl8H3WVJdw4E6zvSTlrcKgb2nPbfd0crOw7gbfx
QN0ktBKh04iK0St4NHmaXbVLcg1lwn3oVY53t4ziSQ5yoEF7V3Zj4Mi35vb23dnc
nVpXAKl8pHwnGaiTUlx/iR4dp7VgMD8zqQk/hg/tp8eBbsBDfYpSkW2znqHM2eQB
RFJ128H7fif3i5e5UBjjNdF++AFjb6pzWelLgAiMNfQA1b62U9s2mnISw2muHm+c
Fm+d8R8CBAaXDIeJibqG4ehhYS2YsJGlkM2A9dZ5DZr4IuAKmnYssiO6vOePNczz
oVlxv3sea/aI4/eW16sKWBuhmMwjr0KZwqOxJvt4CO8Zze+yYnEZA1Jw0r3RE1VE
jGImXOEyhU1MZG71WIEqlOS+ix94Y98FnIR/WYyfwmkuG6AzGsoOXSZEpIfrSzHX
WBz1gw35ENfyxr6bg/f9kVhvU9dHZYay+VnXPZqK7RSyc6rsDBYnmJ+vnckmTsXu
s9lx5WYip25ziN1lWMfo1gjORpEcjaK6Pr/WqzTjxlKjIsfxrpeg3n0ot9GqMRY3
9Kprk3vR8B5kTFGMcNrXnlqtO2phV5IHPprjxghTptzSgI1T/TIhlTWEreyQo3BX
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
P/AO/bW0KR/z9f/6MaESrw==
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
bOImom9rb2NBENoGUF7Wlyh/PHxLY1mnGZFJ55Zqd9lrNm82c7CT2ev1sxTm/rK7
21F5hKM/u/YfJsuE6YHtRdk9nx8IB7URkNEE81UqfJhX0mr0xn7G3EuOCvCh+Ita
VGEkMLIgtJ4eU1N5BBAuTrtphh0xWu+7RKD/h0yan1d2Y/K6KyzpGTWlDMvfI1BW
LJ4iAp/+vMo93YGbDWdbatT2Xro8OLRrDQ0jl2fC1krIqs0iBom/1G4heuXHEZ1M
r078tbbx2tm1r9OMl5h0gLjBOPiwgD4A/AE0RJVA5Lrp5T2ozizoijmcqKusN3WV
hbbOUjhKIt2z6VxLOcQ8WA==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 10080 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
a/LUbdGh/U+2TwEZttY73lQjDDkSUFWhVFO1auSltNBYQ03AlzPGSQaFTkTcnJg1
/9CcaCQXAu+u0GVNyE6sC0PZZZQcszpyd/Yp+CvhXOCkrz6ii6HyL4qj8mV22rbR
8asYz2NeU2kxeD0Upgg59nBQOGyxFjV734Ocx0IEEGgQxySMuGW1SaQ+V2xB+JtZ
hM3WEZdBxWNMvVzYBm7x1kqBaD0GC0B6UYmMEEVhsbLkkyffkkTR1jMCAIULiL1w
AJaZT7fmBJ4Ic2u+PCEblK09xzXzrU/T0ngPZS3GgSUoaDXBeK+UZgUeBfTupFYP
lADYISpctG43UMznx3sjbQ==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 18720 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
BjKvCZOXzF7IZ48emvwUCthsJvp4VEGlIJw3WRelKGGU33Djo8bb02gGbZJmlS0X
NA/if9qOFuZaiIqSatgDce/Li+dd81DAihCNZCYOdHMt/qZvmVMwZRaDCtsx5PRE
vgFediRPK4ENg56FkcMC3mePRS999OJSr66CeRQuV4wzXtAO0PU0G+jsJLSfIwUK
8A8fbX6YsiVKAdNnOPAK3jUOQYiUsNU04Jvtg5e1aJ5itxDlY7OytmBNjPCbcsdU
7HwxwzKkaPdSEnqforpbKrDwHLH17TnxknuIfzaDvzgXOPTMgNFumu15AEPUgmOF
CPTuzzKvhgN9f2BILWrFZA==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 5408 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
KGjQSQ+so6u1tl32HQlOeOafrNShmJMzFgqyE/C0LuzG24ZAfwKMPPuPzOfhplWz
Qtu0f62uvKXJEOmWtWqW4trMBHwv8IR5wUyKSCw5l8UqR+wx2TBED0eqirdH668s
sWnYTos7eOf+wmZs1B3Y+zIJTb7cQTjaHCjAxVaaU73JUYpAVAXqAi+5ZVJcF3aa
xVKRkjBk/dJeqehbnqTQX2DmlQKtoVoSChqNjJVLDQUcI0nyLX+sCJhbyMP/e1Sw
od65/9DXdMeu94/9h+eFvBDMuG9YfAa/5vzxz7GbZsKZbzgLBt8/burTICUPxrqL
hVbZyMSNZUDjWyx8UQ++oQ==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 7200 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
XScpBWoQH5ENU/rzVVDBNWHJshYNYMtdK36Q7bq2nX+J+eHNFiSNskaxyb/d1BXS
qWgv27otAf7C9bgEwdYaJ/b3oRQkJzJLWaDDkCR20OEroX7nZofvXtVXsGkzniSS
I0mGI2idpGE2LgaX0FYlrYjBCsjhEiJrJ+PDaWcETykVoOktqz+bfUYcxoKiTG44
Vv16KcW/PvTT2yXL8zfKN+m05NSr0gj47psPpa/qv6QYQOQV9YpIov2gvnehr5Dt
8PQJBX2K//WvVU8eevphZj/NLW+r51Hrs7e90aLTgNsfJh5FHK9k3CcW5tcBMKOK
qnrBaBP44J1620E3m6tQMA==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 3408 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
cWV6Fkbfdl2g9+HYPKwd1cw/y5bDaClJBoHbfALllYqgG6VCF4FfWskuLg6sN9i3
Ifp3RENEkXf1smhIQ37g4X9TF/36IGdlDlyIp46EbG7yHRYp1zYOR2pfjKNtkLrW
lTb6APadif/wjZaLwvdPDm0sF5FAD3EwIKo9fQ4A00l3Y6x7AYtpV9SKuzZQJ41g
ltYx/bWeWz18tRttKf/GVIQKfdoNE1enDtWBKoHczz6klThSUoHpgNGA72ZTwNBp
Y2v2Ii3dulI5SX4TKzWgMvFXZtsvlIvXYBQp8Ij80O6MJAINkBCy5A2G7+7/IY4B
M/GXroavjWONLz+2LDw9xQ==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 22400 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
LOnahhK9ZjxWzQ2vedTHyCYnaEjur+QcRRgeBv7RQJHQLlv1wvIXbk1MVm8MQiVh
vCeKdMfNSi3rSy1Gegw5SCdscLYd7k57wuaezQZ/KUnKpStH/YcAbHafhsl70eK7
01qpKxgbt88xfnspIEe3EAoywZFjKoZcnOorVIMMXZvLPjxv8KFTDwGiJED8iboa
Jtz6Z/nf+Dp0fUph068hiaC361oe7o73EB3ZdnqGFiqtRqooiVEwWhQWuGbF4ile
rUl/JnnMWtLgTF08USCVmxiRnKvP49Fm3Ig9xQrRmk7VFN49iDaph+vhcknt92Nk
K8tPfBroZiLtSWCr34dnNg==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 17520 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
bDRELpSfg5PBVBV1e4GN3PpglKXrazOyyuIqNhtBI1oMIKnF0Gjjhq1jzRoZK3FF
92XKABIrUTzylKIjasP2yAzFSMWc8Nz+Wu6K5BUwnlFDtXQ/OZ1fbI/PFAWYIB1u
YaGXEWo6C/4uml3wGhKgDOu0Q5m61EJrcKfjgrXZwZ3HO4hkjydQBxGEzTQGE2Vm
sNRf43gICu3FfQLAfYxYCtVYE43oiRF8QYXfKd+yqJadni4D0mblafkk3h/ZUgoU
jqUpztQECMQQiN9IgNl/un8rK3H+QvWdGbizvJpeEJCje1Ej7qxwOTOwXyzx7tit
YjC9qDnPzMpvkH5+F4MMIw==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 19456 )
`pragma protect data_block
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
1E7Lq+wlv1oxsO0pt5lqO1kX3orPxXq2NPZboPNGyC3htPlSjV6OjLD/M0xtkxc5
QgcvvlUjiY9isAUh+/w3A1RjGh+x4D/z3x2E0ZtBvSVGbL4RqZn2TWJjvkLC06GY
9rMzwmyrZONCpSOnExrtL1XUQjA/nU8ls6OseO91lJLzfdu1sHVyskUwoGg6jkLH
uCL+xYPKh2RSGvh4C9lfYuL4a9VJwoRXzBLr7RlUg/RCB2zE6f+3YKrlutq6B5Wx
6ll6ApZJrHuHa7tcqYZ3o4KRKuzOmqmDo+ZY0lwHEI5KbxlcwNUUjrO0K8bCAF69
WIsDAbZKgK3Ix477IF5lCSg/xHqSn7b/ppQsXCxmiPVF5+3zCELBW+V28aVpuaNM
jrB7XQxYvV8RtXKknsoqx6NswTw4cZjXIchPmhOn68DSEG96B9ryePgQEUuLGTP4
FhwQgIde0LDh+Rdzckx8a5+OwViUmDgNVGbmlNFGhhU2EKiFLnUXqTXIaOIIYt2/
dlGDzzLJJbO1JDbY5LY9sXZnUvy0GL3x6VA8meJDAumOD7coKeYNczbLEYlGJr4H
zSdVbokRDzawhTSuLpeQ8/EjjyrGNrux1s3C7J5DUOQqiupffajmextrv6X7lvyv
+RkcHHWa3X1vCQxCbP7NUImcy+nAUMaqLsjpFozdQxLekYMEeKpcEjJQx+ruqUnB
AxMV4Fem+pLbWK5bGTp8EPCwSIIpMfsiavVZm6p/t6Zc0nd2EqA/0dDzpmIO89qu
w8VYnf2MvcC7GE3nJHwnTNmypV6mAQxJH+QIXRYSGzpwlt0o/5NLkP1ajRFG9pRv
QmPZcK6Ohe6i+ZzjkXSncH+9Pok4zu0xrPDoGNz25AExEfRZiKdmSExaNaIcSalk
50dE7xSeYVqeOzB5jmcTLJ5c8+p4Sgk6ru657MCtGPd5Y1tYhtGVj66AzG1T5H4K
eWcARNJcYIP9i3IKTjux+piJat8gdscltoNMZmiuVDa1mlvqQ9KZzbnvBKZOMFlt
1q5VJEwYgGriDtJ3U6RYAMZfx7zyytrAchBgKDqSPDHnGzG6KWqRMkCgwoUjM1N0
CXusNnqOWchByuMV89Thnq054JJ29yeHkjOBVbbga/Xso/JU0qln+038Ez0tp/rF
NXzYY3csW7wZvAMnMgK3CBy6H6hqxeZux1KJNu1upa4r2s6ydx4/Y3r4s7wKSlMi
9f58Wba7GoQjvLsaSafpFpLFYoReOoG3Sh/HOrGESrO3p6DZM7z5pyiSMbi4GI/2
K/yEI7U66Xgi9RAvBiD61K2t4P37anlygOF6hTUvI2fP1xMz81Kj1jnao0yxjPhV
4bCr3mQB6L3zrKwH4hGmO6HHPk1a16QTyPnqb0yefNXPanXL+M9RzyS9Kb5Izh9P
QAA1Uo+9dKA5JcFDRI5PjulXWhaIN7Dllz7DxyEZQNgO8jdkLlyuQpkcvnDsR4rl
TsiqeNiNr/3lr5t2t7BD6Ib3detCww2Pf4ziwYlQeeUjENVuhKZNh9PbxwdeE6kW
DW4vqtCMd/AyFNX1CHyIW8dnNrD8kFUQMFwChaROSXsg92wWfD4Xe/5BtIU51lPm
QSgAMjfIs/ASkdbmMxK8NUMoij69/LYhUI8VhGP/MZ9+wTs8kETr5MQwCMUXIguZ
REPa7fPUQKBGEuUIHC4QpPrCj9WziG67bXlP2J+n31XgJ1WG/D54MP1g9+cVOKSQ
JnROKe2alx7Z9esiwV23HhrfoA1hmFnUn1W9M6q49gK9DCk7qZQfd8GPfvLzrv4T
pC1pUtvOPdl+9b1EvugOOWLSAdxxEjnXBh9lgbfSncXaqUEeKVBzCNKl7D0oimwe
nRFp9K8opFiPTdGnyd/QMsPHkpCxFi/GJvLDmUnDpeDflYNlnhqJwTV+Rvd57xDq
Z1FYXr3g2pds00IZpcqf/JEH7yM6iWTt4HLKMhbQodjLWgeeFDH3zFkVXdSUO6/H
6mb9SRldpB4GP/zjp3fQ27s9UNFmeTc19Owns8gng4q4M5PTaQ7JAkr1NqCnDQvi
5/XDnxXO/hzJJIEzx0yGC5wTPEdtKscEPy3KjVzUThJjrlqo3wu8wqkJWNFHic2U
bVBf39ULmd3NyzmLlikcsCkPXtOqjfZphVHJoWX5PNwbh6NKBteCZQk5oOmvhUry
ZQVxF4sN7z8qXfAc+b9vXig7dQLoMcy2w/vn+exHreSpusqs8S8z90iJlE7d692W
rx2Nrdx+nZU0HnCwZWqEae6FqL+vzmpGySvsoptC3T1RX0GL6qBwYWCyZ/4BIJOw
SnVxxf1e62GDQnB60+3aJ0zBe4k0KQBzxuEoC22CcN+qQJqMBBxOBDC34YgjQOti
IP56fKLZGMiB8ECLtpke7iI1p6ECsX3+6NzjtCTowq7hbv2aQ7UG3sii7SE/4t8B
9CkVAiSXhgrc+JNsUpRoWZXzlzCFMoLaBUW6bnWx3dbRTPYquJQqnpDRBl4HceqJ
yLzwxrz5awDcDX9LyCssJ4JA06jo3WGpVqAk4KB564eRZxpvZB9BJXbjDCf5deC0
17XAHGDbtTNB5F0/+VpFRdx/mwzonDxFIc11qzE+yTGZnwYWjhzJQtnak8awBn50
jUR/L43tNj7UJEE64vfIr7ybaMv+8xwEinYRAgQBKEVipl+zCKv0H6EFXHqvFyzf
Sdtl2kXbVYq+pkiyMflrgpJB4lvdgKnzlzYNogkzyFtxnpNaLSbQpgDkZJ0RwDwj
w5Cgnaf7wK5H7+7CWN3pGZK6SST/CFUlitu7l6a5VcAtW20NF1cW8BDLomiov3LK
hLxkJwwX87XFybyg/IzmUvW0QU7CEgW3wKzI4KGLLmt8Gufl9Z57zFtL9yX4+WJb
dxcWUOnNemm2pSs+7wnZuln+JIZrYbeAGFFAdZGvoVPgENUL1xX3wVOPy8T4ECci
kH8WduN6D121bo7DLJhRlZmXq/02izn/lIsnYGuSFZq+HhtwiGhR5B1PbTwE/eQk
QRHvLOW+ZsxlvI05ROiEOBkCh2TuZdakqhI8gSgS26P26tBwMWWG196Pn3W424e3
6hiTvquTN8IsZoc+KHFBBUHnIQjPhFgvvCD0VvTjcQo31KqV/nAI5rtHveBP8j0o
vqpi30grrf29nxFaqd6LG56tamH3hz/vCLofjyztG0qH2oOAbv+FI4m9gZFMZgvO
88+yDtYY4bXlF6S8BjlxMQrfGmGzsZPy41ZNqjXLXYIXQybHl3M2GBgJTpt8799Q
y3Z4h2EczMqV4NY+eEma219LwGqLsRkmRVBZGI2oBv9iNi9rM69MMohr3v0yz9Il
W0uRyMSHPlU6qFsZJe6gttK0vffUsbEucaZxGdkFe8ZNJI+zmyt96RS8ImSQ/G0B
M1fpg2c1DapB9BETlVRVYhQUslh14GSUgzViPdh9TvNCbJOjjLFjoHg9dwToUA2M
5EK61Cci4ZolaaUNapwadFDRYp+cFRhj2tKZC2bcrGsN6OHa6FvoXDtH85rr5kcX
svYRkEWaJzaoANFhkdVFAlRe3GkjkF6XeWTXHc/SykkEPD/tEu4ei2fuqM5bJCK8
PSJ06WQpf44jZ8BBldvvCmOzI7F4AZh6KDaHsy3tJ4E7URMKkIYR49XS4JWbNw8X
uyp8m8iyW1IClFdXL3OB/gingro3PqDrNTdtujiYLq+sAHklQkemmOO5Pm3UfM5e
PzzmJr8ZmBlWybyXW1JtrOK2HCadpvCTgMgcAzeQbQwX9StumACjXZjsyijB6V8W
eWEnpPF+gxGKBrR5BgNBZBf9TDzkMaDT6LiDCnNyanPlCiK/3WKCJqfLtLzpSmmz
ekNS4yQX7fyi8p7Oja5pUDtKLQnlHxRXl7S1qMfRFIPNPxHJSg/Z5Em13e1EFEJX
76oX9P/F1p38mxLW8dhxBYoNBGR/kfZUQyRMzk7leyvthk6U4WEtHsjLcsTOU8SZ
prFSqd0zgWvcM76ejLCmyArDu3kz6cChwjjRUzJgB1BZ/dkmGnxDRFteDAwSRd7i
KRQmMG1LKL+hWZTaBudgNuy6zsz41pRThEdaAxJXyCaUPSZUaS9KgITQdEucANNH
tiV5iGg0Y/8jODoWFGq8fHzX2nT1pckjKDcl42PB3u1y02c6p5MVU/YpfpXZB4kH
xdZ6kGjBQz040HAP5Jp2UypGjcC53yf3oXdiBDlLO4HuBl66LiqPWdy2WyZptKAe
ayRYBqJfz7J5GBuU86M4e0cb47zDxdvTrrQ8JEXUO5OWvj1fSXX/QIU2q2OHv7cY
bNlX9ypy9xHYM7Xgaxbcp4qpYGcJqJyOpkNn6XLaXBYW/qvte41Hd9DUnXvSMvR8
am6b5TXZ8mswARXDEM30biojZbDeWL9HUv0VOAXbIiA+HXHzwXDlEhuLINmofruf
0vnMwpFQwGyQnnOO3SdCkPR7N7VgvagyEMavfk/6U6sq2c36FxqjvSlRHh8SNXmz
5jkB3c3Tp8ZkG3vViUhm/qcs2it1RVhv9RnX7WCmgj8JXkOTtuUJYg+Sdf5Y2Whg
ggIffXPUve+bk8y4hmQ1n+aTWLNx158oW57jznhJO+yGaAtD137ZcnvoHzu+LXqi
Nwgw8SVgpQBZi5T6ujHQ4yVTqiEhDEHfJn3oeO3s6dVWc/1HWFsel7wPGAcMWCpH
Lmi4xXpxeeKLmvXx+hRo43wL2m2Td0DVqr3bgO29RaPgguoVpdl11EEkTOiAPIyF
s2LGfrbLsX+1LGifo7w5jhM44o7JzOOJCundxOys5y3J0gsD1It0tpkR2fMjXJGN
ty37fVfpmto6fycwKn1I3+Hd5Yfq+VCUCrlYTUXkBLdPAK0oQGM+x74Xtz8VXL4X
DmpHLvVmuWRAZEeqvmhuhmN3E/5jo9a/+Fel8VzYW/AafK3xHDMAQZlkH3XxIBSu
5faa/m9zw2zRABJ/YsGg2mywDXQ5xj4+RVNE9Q0QazUmtgCYkBWs+I6eJESL8hrZ
pqXQ4zpJKiBwi1LBA8pp4A1YEtUYenwlulQoKxxdyGgzCAhrrSBUXYZzjkjSpFw2
c60xsEWYLAIbtzvRZBA72h7e1sGUkAuIkRTLbHKxMRhmz0fPcEyCLianFD5vLlk6
2dw8+xTNnW3a/xjiJ2yT2On5HMyZZzh/XSds8NbY+2IXhVB1uTH7x1M5qpowBEpp
DuZ5rLnx3uldTxbcsPUkJ0Zmi6XBRS/F/uO8xaw6ILjCvrJkGc15kedCqKQqX4jA
Q7Okr9hJnA9MDEwxBe4mBfUiRu9ajnUK/dBl0oisyoOZKV8crO29u2xNLPYUMJUc
0x9bevRZXj9sJPhys28Z8z0noK73N0nAdhKTEltPVbRO2jacVguE7Uvvcdz1QmJ6
XPSZ2WF1OcOCBRVm0zSgt7k0U3uIaKE64GJyA6Abs/GP7D0uYOkK5KgkQZ+//JeO
O2rNgFfvMGRypCqiUW/30WAkf+s2iVR6vU0HxgVdS7Is6MKse3S9Fo91GSt8HMT3
LLb2G9dNoF8EdhsFOr/iz522iZHrlHqsLsRVQBMjpw2TVhstDgaRQo5Ms9r2zHZi
KzK4gwmXCFiesqYbauG5ONOLngIMO9cHEEtujNfll7J4W6nVJUnua+5no0zqNLc8
Tp8orF1rrcsAG996ySIb+9SRrDHSO2O9uldXofktuTgs/xw2KrPsZaDCgCkFPVgi
fpY2yrRLzu1sKjpmdhb4J0eHjcZN7mOLhtzeRWT2M+O3rjRSz3cMKzMvPZpo12uS
P/izht7HnmvPlLHCA5ZzPUlRQ2U1tjgjQfIpu+6kb4GvlnLe2Q+4kj8e9lGtJFtD
urOV/PMu704/Ze7FEMBFtM3ohd4UbIgSQFj4YWZjFc6ED4NZCjfO8j7+4C+zfZUI
GsZdqYfMRH4/A+GdKaJlMi9N6dF6s5+IunwXlL23Mp5i2cW61KQnxRSab9fxGUZ3
81V76vwiBgStdAUVqcGG9wmUeJxm3Yc+XtnjzWZvaIG4PfCWQ4JyQNeNO6mgvPjs
fp6TusMWj3iZ5VU9bC3fh/nUwUhc/C0/Eyq3vArEQ9Qo+KgcKJ1yub93yKNZZ5XI
TrDyIwi698KFETzR8rvqgl6/8YtprOieyskofaPJt/NYUNzhy6BbUjBKzaTUJmsI
HPUdBjbPyeds+VBpCOjWesEX2eCQGFSIBsA1VTgYXtA3aD3mqrdip+LsasA//1kH
7AGPF5rPwMTPmxAtXr7SciEmUKiS0gEr5mQmRi1aAeyzDFj4ht9x+XAvsGLptWg8
lIiabC0fApykSaxI/6POIUDfhcTPmP7/Wfbi0ugca2Q+GeyTZYcP4Gnb8z2wnGRJ
hKUkXRc9omXg30oVHbVo6LnjZ/iFgPZ4l0Gtev2C2mFE7dePZtzzqcuLYkdbSduh
8EMCu/odkL2vG46mnhjT6qfzGXJgr0e5fiykKC45TPE3PE8ExJvhbz5IXkIb/8XL
GHLeSvEbStvCFEwIlohT1g==
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
ZWoQ55kpx6Lrx3OrFefwQAqmK4G5gDs+4Y44Y4kxVVS4QTdC3tsNK/VAMpJhrq0j
PDGrheoU0EW8LdvK28eg213jGDlXKXUDipw78IhBsL9GNt0670VEzC9Ni45yW8o5
ySq3JdnkRlQNACxwTWt7qXGlTWujsaohSy0aQEy2dEjeL0xRuwh0gSR/GiGCZrWv
qgSZndaDlbsV9IYLDsjz6LiPwes0h8UWILLX+hLPLSRSUzo43VHyJOikvqPEJzQ5
oT6aW5pCDSFWbHCp5s3JoZqtOjd7bkCyUT/QBUAY+/KJM3zeor81mbIRBOK4xsP3
vNNhBbBVhkNpH3/oIPtNdQ==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 4160 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
module mii_if_ad85ad4e859847d39173988e5bf30bac
(
//Globle Signals
input                           tx_mac_aclk,
output  reg                     tx_mac_aclk_en,
input                           tx_reset,
output  wire                    rx_mac_aclk,
output  reg                     rx_mac_aclk_en,
input                           rx_reset,
//Configuration Signals
input           [2:0]           eth_speed,
//GMII Interface
output  reg     [7:0]           gm_rx_d,
output  reg                     gm_rx_dv,
output  reg                     gm_rx_err,
input           [7:0]           gm_tx_d,
input                           gm_tx_en,
input                           gm_tx_err,
//MII Interface
input                           mii_txc,
output  reg     [3:0]           mii_txd,
output  reg                     mii_tx_dv,
output  reg                     mii_tx_err,

input                           mii_rxc,
input           [3:0]           mii_rxd,
input                           mii_rx_dv,
input                           mii_rx_err

//Status and  Error Signals
);
// Parameter Define 
//localparam                      SPEED_100M_DIV = (TX_REFCLK == 125) ? 10 : 2;
//localparam                      SPEED_10M_DIV  = SPEED_100M_DIV*10;
//localparam                      SPEED_CLK_DIV = (TX_REFCLK == 125) ? SPEED_100M_DIV/2 + 1 : 0 ;
// Register Define 
reg     [6:0]                   aclk_en_cnt;
reg     [3:0]                   txd;
reg                             tx_en;
reg                             tx_er;
reg                             rx_dv_pre;
reg                             rx_dv_dl1;
reg     [3:0]                   rxd_pre;
reg     [3:0]                   rxd_dl1;
reg                             rx_odd_data_ptr;
reg     [3:0]                   rxd;
reg                             rx_dv;
reg                             rx_er;
reg     [3:0]                   gm_tx_d_h;
reg     [7:0]                   gm_tx_d_r;
reg                             gm_tx_en_r;
reg                             gm_tx_err_r;
reg				preamble_flg;
reg     [1:0]			cur_st;
reg     [1:0]			nxt_st;
reg				add_preamble;

// Wire Define

/*----------------------------------------------------------------------------------*\
                                 The main code
\*----------------------------------------------------------------------------------*/

/*----------------------- Tx Region ----------------------------*/

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        tx_mac_aclk_en <= 1'b0;
    else
        tx_mac_aclk_en <= ~tx_mac_aclk_en;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        gm_tx_d_r <= 8'h0;
    else if((gm_tx_en == 1'b1) && (tx_mac_aclk_en == 1'b1))
        gm_tx_d_r <= gm_tx_d;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        gm_tx_en_r <= 1'b0;
    else if(tx_mac_aclk_en == 1'b1)
        gm_tx_en_r <= gm_tx_en;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        gm_tx_err_r <= 1'b0;
    else if(tx_mac_aclk_en == 1'b1)
        gm_tx_err_r <= gm_tx_err;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        txd <= 4'h0;
    else if(gm_tx_en_r == 1'b1) 
        begin
            if(tx_mac_aclk_en == 1'b0)
                txd <= gm_tx_d_r[3:0];
            else
                txd <= gm_tx_d_r[7:4];
        end
    else;    
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        tx_en <= 1'b0;
    else 
        tx_en <= gm_tx_en_r;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        tx_er <= 1'b0;
    else 
        tx_er <= gm_tx_err_r;
end

always @(posedge mii_txc)
begin 
    mii_tx_dv  <= tx_en;
    mii_txd    <= txd[3:0];
    mii_tx_err <= tx_er;
end
/*----------------------- Rx Region ----------------------------*/
always @(posedge mii_rxc)
begin
   if(mii_rxd==4'hd && mii_rx_dv && !mii_rx_err && cur_st==2'b01 && preamble_flg)
   begin
      rxd   <= 4'h5;
      rx_dv <= 1'b1;
   end
   else if(add_preamble)
   begin
      rxd <= rxd_pre;
      rx_dv <= rx_dv_pre;
   end
   else
   begin
      rxd   <= mii_rxd;
      rx_dv <= mii_rx_dv;
      rx_er <= mii_rx_err;
   end
end

assign rx_mac_aclk = mii_rxc;

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
	begin
	rxd_pre <= 4'h0;
	rx_dv_pre <= 1'b0;
	end
    else if((mii_rxd==4'hd && mii_rx_dv && !mii_rx_err && cur_st==2'b01 && preamble_flg) || add_preamble)
	begin
	rxd_pre <= mii_rxd;
	rx_dv_pre <= mii_rx_dv;
	end
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
	add_preamble <= 1'b0;
    else if(mii_rxd==4'hd && mii_rx_dv && !mii_rx_err && cur_st==2'b01 && preamble_flg)
	add_preamble <= 1'b1;
     else if(!mii_rx_dv)
	add_preamble <= 1'b0;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_mac_aclk_en <= 1'b0;
    else
        rx_mac_aclk_en <= ~rx_mac_aclk_en;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
	begin
		cur_st <= 2'b00;
	end
     else
	begin
		cur_st <= nxt_st;
	end
end

always @*
begin
case(cur_st)
2'b00: begin
	if(mii_rxd==4'h5 && mii_rx_dv && !mii_rx_err)	
	nxt_st <= 2'b01;
	else
	nxt_st <= 2'b00;
       end
2'b01: begin
	if(mii_rxd==4'hd && mii_rx_dv && !mii_rx_err)
	nxt_st <= 2'b10;
	else if (mii_rxd==4'h5 && mii_rx_dv && !mii_rx_err)
	nxt_st <= 2'b01;
	else 
	nxt_st <= 2'b00;
	end
2'b10: begin
	if(mii_rx_dv) 
	nxt_st <= 2'b10;
	else
	nxt_st <= 2'b00;
	end
default: nxt_st <= 2'b00;
endcase
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        begin
            preamble_flg <= 1'b0;
	end
    else if(mii_rxd==4'h5 && mii_rx_dv && !mii_rx_err && cur_st==2'b01)
	begin
	    preamble_flg <= ~preamble_flg;
	end
    else begin
	    preamble_flg <= 1'b0;
	end
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        begin
            rx_dv_dl1 <= 1'b0;
            rxd_dl1 <= 4'h0;
        end
    else
        begin
            rx_dv_dl1 <= rx_dv;
            rxd_dl1 <= rxd;
        end
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        gm_rx_dv <= 1'b0;
    else
        gm_rx_dv <= rx_dv_dl1;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_odd_data_ptr <= 1'b0;
    else if(rx_dv == 1'b0)
        rx_odd_data_ptr <= 1'b0;
    else
        rx_odd_data_ptr <= ~rx_odd_data_ptr;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        gm_rx_d <= 8'h0;
    else if((rx_dv == 1'b1) && (rx_odd_data_ptr == 1'b1))
        gm_rx_d <= {rxd[3:0],rxd_dl1[3:0]};
    else;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        gm_rx_err <= 1'b0;
    else
        begin
            if(rx_er == 1'b1)
                gm_rx_err <= 1'b1;
            else if(rx_mac_aclk_en == 1'b1)
                gm_rx_err <= 1'b0;
        end
end


endmodule



//////////////////////////////////////////////////////////////////////////////
//           _____       
//          / _______    Copyright (C) 2013-2020 Efinix Inc. All rights reserved.
//         / /       \   
//        / /  ..    /   
//       / / .'     /    
//    __/ /.'      /     
//   __   \       /      
//  /_/ /\ \_____/ /     
// ____/  \_______/      
//
// ********************************
// Revisions:
// 1.0 Initial rev 
//
// *******************************

`timescale 1 ns / 1 ns
module `IP_MODULE_NAME(tsemac) #(
    parameter    VERSION = 32'h10,
    parameter    RXFIFO_EN = 1,
    parameter    RXFIFO_DTH = 2048,
    parameter    TXFIFO_EN = 1,
    parameter    TXFIFO_DTH = 2048,
    parameter    PHY_INTF_MODE = 0,  //0-rgmii_ad85ad4e859847d39173988e5bf30bac, 1-mii, 2-rmii, 3-gmii
    parameter    AXIS_DW = 8,  // 8, 16, or 32
    parameter    RGMII_RXC_EDGE = 1,
    parameter 	 RGMII_TXC_DLY = 1,
    parameter    SIP600 = 1'b0  // For Internal-use
)
(
//Globle Signals
input                           mac_reset,//Globle Reset
input                           proto_reset,//Tx & Rx Reset
input                           tx_mac_aclk,//125M 
output  wire                    rx_mac_aclk,
output  wire    [2:0]           eth_speed,
//Receive AXI4-Stream Interface
input                           rx_axis_clk,
output  wire    [AXIS_DW-1:0]   rx_axis_mac_tdata,
output  wire                    rx_axis_mac_tvalid,
output  wire                    rx_axis_mac_tlast,
output  wire    [AXIS_DW/8-1:0] rx_axis_mac_tstrb,
output  wire                    rx_axis_mac_tuser,
input                           rx_axis_mac_tready,
//Transmit AXI4-Stream Interface
input                           tx_axis_clk,
input           [AXIS_DW-1:0]   tx_axis_mac_tdata,
input                           tx_axis_mac_tvalid,
input                           tx_axis_mac_tlast,
input           [AXIS_DW/8-1:0] tx_axis_mac_tstrb,
input                           tx_axis_mac_tuser,
output  wire                    tx_axis_mac_tready,
//AXI4-Lite Interface
input                           s_axi_aclk,//AXI Bus Clock.
input           [9:0]           s_axi_awaddr,//Write Address. byte address.
input                           s_axi_awvalid,//Write address valid.
output  wire                    s_axi_awready,//Write address ready.
input           [31:0]          s_axi_wdata,//Write data bus.
input                           s_axi_wvalid,//Write valid.
output  wire                    s_axi_wready,//Write ready.
output  wire    [1:0]           s_axi_bresp,//Write response.
output  wire                    s_axi_bvalid,//Write response valid.
input                           s_axi_bready,//Response ready.
input           [9:0]           s_axi_araddr,//Read address. byte address.
input                           s_axi_arvalid,//Read address valid.
output  wire                    s_axi_arready,//Read address ready.
output  wire    [1:0]           s_axi_rresp,//Read response.
output  wire    [31:0]          s_axi_rdata,//Read data.
output  wire                    s_axi_rvalid,//Read valid.
input                           s_axi_rready,//Read ready.              
//MDIO Interface
output  wire                    Mdo,//MII Management Data Output
output  wire                    MdoEn,//MII Management Data Output Enable
input                           Mdi,//MII Management Data Input
output  wire                    Mdc,//MII Management Data Clock 

//RGMII Interface
output  wire    [3:0]           rgmii_txd_HI,
output  wire    [3:0]           rgmii_txd_LO,
output  wire                    rgmii_tx_ctl_HI,
output  wire                    rgmii_tx_ctl_LO,
output  wire                    rgmii_txc_HI,
output  wire                    rgmii_txc_LO,
input           [3:0]           rgmii_rxd_HI,
input           [3:0]           rgmii_rxd_LO,
input                           rgmii_rx_ctl_HI,
input                           rgmii_rx_ctl_LO,
input                           rgmii_rxc,

//MII Interface
input                           mii_txc,
output  wire    [3:0]           mii_txd,
output  wire                    mii_tx_dv,
output  wire                    mii_tx_err,
input                           mii_rxc,
input           [3:0]           mii_rxd,
input                           mii_rx_dv,
input                           mii_rx_err,

//RMII Interface
input                           rmii_clk_ref,
output  wire    [1:0]           rmii_txd,
output  wire                    rmii_tx_en,
input           [1:0]           rmii_rxd,
input                           rmii_crs_dv,
input                           rmii_rx_err,

//GMII Interface
input                           gm_rx_c,
input           [7:0]           gm_rx_d,
input                           gm_rx_dv,
input                           gm_rx_err,
output  wire                    gm_tx_c,
output  wire    [7:0]           gm_tx_d,
output  wire                    gm_tx_en,
output  wire                    gm_tx_err
);

// Parameter Define 

// Register Define 

// Wire Define 
wire                    tx_mac_aclk_en;
wire                    rx_mac_aclk_en;
wire                    tx_mac_aclk_int;

//GMII Interface
wire    [7:0]           gm_rx_d_int;
wire                    gm_rx_dv_int;
wire                    gm_rx_err_int;
wire    [7:0]           gm_tx_d_int;
wire                    gm_tx_en_int;
wire                    gm_tx_err_int;

/*----------------------------------------------------------------------------------*\
                                 The main code
\*----------------------------------------------------------------------------------*/
generate if (PHY_INTF_MODE == 0) begin
    assign tx_mac_aclk_int = tx_mac_aclk;
end
else if (PHY_INTF_MODE == 1) begin
    assign tx_mac_aclk_int = mii_txc;
end
else if (PHY_INTF_MODE == 2) begin
    assign tx_mac_aclk_int = rmii_clk_ref;
end
else begin
    assign tx_mac_aclk_int = tx_mac_aclk;
end
endgenerate


/*----------------------- The Tri-mode Ethernet MAC core -----------------------*/
`IP_MODULE_NAME(tsemac_core) #(
    .VERSION    (10),
    .RXFIFO_EN  (RXFIFO_EN),
    .RXFIFO_DTH (RXFIFO_DTH),    
    .TXFIFO_EN  (TXFIFO_EN),
    .TXFIFO_DTH (TXFIFO_DTH),
    .AXIS_DW    (AXIS_DW),
    .SIP600     (SIP600) 
)
u_tse_mac
(
//Globle Signals
    .mac_reset                          (mac_reset                          ),
    .proto_reset                        (proto_reset                        ),
    .tx_mac_aclk                        (tx_mac_aclk_int                    ),
    .rx_mac_aclk                        (rx_mac_aclk                        ),
    .tx_mac_aclk_en                     (tx_mac_aclk_en                     ),
    .rx_mac_aclk_en                     (rx_mac_aclk_en                     ),
    .eth_speed                          (eth_speed                          ),
//Receive AXI4-Stream Interface 
    .rx_axis_clk                        (rx_axis_clk                        ),
    .rx_axis_mac_tdata                  (rx_axis_mac_tdata                  ),
    .rx_axis_mac_tvalid                 (rx_axis_mac_tvalid                 ),
    .rx_axis_mac_tlast                  (rx_axis_mac_tlast                  ),
    .rx_axis_mac_tstrb                  (rx_axis_mac_tstrb                  ),    
    .rx_axis_mac_tuser                  (rx_axis_mac_tuser                  ),
    .rx_axis_mac_tready                 (rx_axis_mac_tready                 ),
//Transmit AXI4-Stream Interface
    .tx_axis_clk                        (tx_axis_clk                        ),
    .tx_axis_mac_tdata                  (tx_axis_mac_tdata                  ),
    .tx_axis_mac_tvalid                 (tx_axis_mac_tvalid                 ),
    .tx_axis_mac_tlast                  (tx_axis_mac_tlast                  ),
    .tx_axis_mac_tstrb                  (tx_axis_mac_tstrb                  ),    
    .tx_axis_mac_tuser                  (tx_axis_mac_tuser                  ),
    .tx_axis_mac_tready                 (tx_axis_mac_tready                 ),
//GMII Interface
    .gm_rx_d                            (gm_rx_d_int                        ),
    .gm_rx_dv                           (gm_rx_dv_int                       ),
    .gm_rx_err                          (gm_rx_err_int                      ),
    .gm_tx_d                            (gm_tx_d_int                        ),
    .gm_tx_en                           (gm_tx_en_int                       ),
    .gm_tx_err                          (gm_tx_err_int                      ),
//AXI4-Lite Interface
    .s_axi_aclk                         (s_axi_aclk                         ),
    .s_axi_awaddr                       (s_axi_awaddr                       ),
    .s_axi_awvalid                      (s_axi_awvalid                      ),
    .s_axi_awready                      (s_axi_awready                      ),
    .s_axi_wdata                        (s_axi_wdata                        ),
    .s_axi_wvalid                       (s_axi_wvalid                       ),
    .s_axi_wready                       (s_axi_wready                       ),
    .s_axi_bresp                        (s_axi_bresp                        ),
    .s_axi_bvalid                       (s_axi_bvalid                       ),
    .s_axi_bready                       (s_axi_bready                       ),
    .s_axi_araddr                       (s_axi_araddr                       ),
    .s_axi_arvalid                      (s_axi_arvalid                      ),
    .s_axi_arready                      (s_axi_arready                      ),
    .s_axi_rresp                        (s_axi_rresp                        ),
    .s_axi_rdata                        (s_axi_rdata                        ),
    .s_axi_rvalid                       (s_axi_rvalid                       ),
    .s_axi_rready                       (s_axi_rready                       ),
//MDIO Interface
    .Mdo                                (Mdo                                ),
    .MdoEn                              (MdoEn                              ),
    .Mdi                                (Mdi                                ),
    .Mdc                                (Mdc                                )
);

/*----------------------- Physical Interface Region ----------------------------*/
generate 
if (PHY_INTF_MODE == 0) begin
    rgmii_if_ad85ad4e859847d39173988e5bf30bac u_rgmii_if
    (
    //Globle Signals
        .tx_mac_aclk                        (tx_mac_aclk                        ),
        .tx_mac_aclk_en                     (tx_mac_aclk_en                     ),
        .tx_reset                           (mac_reset || proto_reset           ),
        .rx_mac_aclk                        (rx_mac_aclk                        ),
        .rx_mac_aclk_en                     (rx_mac_aclk_en                     ),
        .rx_reset                           (mac_reset || proto_reset           ),
    //Configuration Signals                                                     
        .eth_speed                          (eth_speed                          ),
        .rgmii_rxc_edge                     (RGMII_RXC_EDGE                     ),
        .rgmii_txc_dly                      (RGMII_TXC_DLY                      ),
    //GMII Interface                                                            
        .gm_rx_d                            (gm_rx_d_int                        ),
        .gm_rx_dv                           (gm_rx_dv_int                       ),
        .gm_rx_err                          (gm_rx_err_int                      ),
        .gm_tx_d                            (gm_tx_d_int                        ),
        .gm_tx_en                           (gm_tx_en_int                       ),
        .gm_tx_err                          (gm_tx_err_int                      ),
    //RGMII Interface                                                           
        .rgmii_txd_HI                       (rgmii_txd_HI                       ),
        .rgmii_txd_LO                       (rgmii_txd_LO                       ),
        .rgmii_tx_ctl_HI                    (rgmii_tx_ctl_HI                    ),
        .rgmii_tx_ctl_LO                    (rgmii_tx_ctl_LO                    ),
        .rgmii_txc_HI                       (rgmii_txc_HI                       ),
        .rgmii_txc_LO                       (rgmii_txc_LO                       ),
        .rgmii_rxd_HI                       (rgmii_rxd_HI                       ),
        .rgmii_rxd_LO                       (rgmii_rxd_LO                       ),
        .rgmii_rx_ctl_HI                    (rgmii_rx_ctl_HI                    ),
        .rgmii_rx_ctl_LO                    (rgmii_rx_ctl_LO                    ),
        .rgmii_rxc                          (rgmii_rxc                          )
    );
end
else if (PHY_INTF_MODE == 1) begin
    mii_if_ad85ad4e859847d39173988e5bf30bac u_mii_if
    (
    //Globle Signals
        .tx_mac_aclk                        (mii_txc                            ),
        .tx_mac_aclk_en                     (tx_mac_aclk_en                     ),
        .tx_reset                           (mac_reset || proto_reset           ),
        .rx_mac_aclk                        (rx_mac_aclk                        ),
        .rx_mac_aclk_en                     (rx_mac_aclk_en                     ),
        .rx_reset                           (mac_reset || proto_reset           ),
    //Configuration Signals                                                     
        .eth_speed                          (eth_speed                          ),
    //GMII Interface                                                            
        .gm_rx_d                            (gm_rx_d_int                        ),
        .gm_rx_dv                           (gm_rx_dv_int                       ),
        .gm_rx_err                          (gm_rx_err_int                      ),
        .gm_tx_d                            (gm_tx_d_int                        ),
        .gm_tx_en                           (gm_tx_en_int                       ),
        .gm_tx_err                          (gm_tx_err_int                      ),
    //MII Interface                                                           
        .mii_txc                            (mii_txc                       ),
        .mii_txd                            (mii_txd                       ),
        .mii_tx_dv                          (mii_tx_dv                     ),
        .mii_tx_err                         (mii_tx_err                    ),
        .mii_rxc                            (mii_rxc                       ),
        .mii_rxd                            (mii_rxd                       ),
        .mii_rx_dv                          (mii_rx_dv                     ),
        .mii_rx_err                         (mii_rx_err                    )
    );
end
else if (PHY_INTF_MODE == 2) begin
    rmii_if_ad85ad4e859847d39173988e5bf30bac u_rmii_if
    (
    //Globle Signals
        .tx_mac_aclk                        (rmii_clk_ref                       ),
        .tx_mac_aclk_en                     (tx_mac_aclk_en                     ),
        .tx_reset                           (mac_reset || proto_reset           ),
        .rx_mac_aclk                        (rx_mac_aclk                        ),
        .rx_mac_aclk_en                     (rx_mac_aclk_en                     ),
        .rx_reset                           (mac_reset || proto_reset           ),
    //Configuration Signals                                                     
        .eth_speed                          (eth_speed                          ),
    //GMII Interface   
        .gm_rx_d                            (gm_rx_d_int                        ),
        .gm_rx_dv                           (gm_rx_dv_int                       ),
        .gm_rx_err                          (gm_rx_err_int                      ),
        .gm_tx_d                            (gm_tx_d_int                        ),
        .gm_tx_en                           (gm_tx_en_int                       ),
        .gm_tx_err                          (gm_tx_err_int                      ),
    //MII Interface                                                           
        .rmii_clk_ref                       (rmii_clk_ref                      ),
        .rmii_txd                           (rmii_txd                          ),
        .rmii_tx_en                         (rmii_tx_en                        ),
        .rmii_rxd                           (rmii_rxd                          ),
        .rmii_crs_dv                        (rmii_crs_dv                       ),
        .rmii_rx_err                        (rmii_rx_err                       )
    );
end
else if (PHY_INTF_MODE == 3) begin
    wire g_reset;
    reg rx_mac_aclk_en_int, tx_mac_aclk_en_int;
    
    assign rx_mac_aclk = gm_rx_c;
    assign g_reset = mac_reset || proto_reset;
    assign rx_mac_aclk_en = rx_mac_aclk_en_int;
    assign tx_mac_aclk_en = tx_mac_aclk_en_int;

    always @(posedge rx_mac_aclk or posedge g_reset)
    begin
        if(g_reset == 1'b1)
            rx_mac_aclk_en_int <= 1'b0;
        else
            rx_mac_aclk_en_int <= 1'b1;
    end
    
    always @(posedge tx_mac_aclk or posedge g_reset)
    begin
        if(g_reset == 1'b1)
            tx_mac_aclk_en_int <= 1'b0;
        else
            tx_mac_aclk_en_int <= 1'b1;
    end
    
    assign gm_rx_d_int   = gm_rx_d;
    assign gm_rx_dv_int  = gm_rx_dv;
    assign gm_rx_err_int = gm_rx_err;
    assign gm_tx_d       = gm_tx_d_int;
    assign gm_tx_en      = gm_tx_en_int;
    assign gm_tx_err     = gm_tx_err_int;
    assign gm_tx_c       = tx_mac_aclk;
end
endgenerate 

endmodule


/////////////////////////////////////////////////////////////////////////////
//           _____       
//          / _______    Copyright (C) 2013-2020 Efinix Inc. All rights reserved.
//         / /       \   
//        / /  ..    /   
//       / / .'     /    
//    __/ /.'      /     
//   __   \       /      
//  /_/ /\ \_____/ /     
// ____/  \_______/      
//
// *******************************
// Revisions:
// 1.0 Initial rev
//
// *******************************

`timescale 1 ns / 1 ns
module rgmii_if_ad85ad4e859847d39173988e5bf30bac#(
    parameter                       RGMII_SYNC_EN = 1
)
(
//Globle Signals
input                           tx_mac_aclk,
output  reg                     tx_mac_aclk_en,
input                           tx_reset,
output  wire                    rx_mac_aclk,
output  reg                     rx_mac_aclk_en,
input                           rx_reset,
//Configuration Signals
input           [2:0]           eth_speed,
input                           rgmii_rxc_edge,//0:DDIO Rising Edge; 1:DDIO Falling Edge; 
input                           rgmii_txc_dly,//0:rgmii_ad85ad4e859847d39173988e5bf30bac tx clock delay disable; 1:rgmii_ad85ad4e859847d39173988e5bf30bac tx clock delay enable;
//GMII Interface
output  reg     [7:0]           gm_rx_d,
output  reg                     gm_rx_dv,
output  reg                     gm_rx_err,
input           [7:0]           gm_tx_d,
input                           gm_tx_en,
input                           gm_tx_err,
//RGMII Interface
output  wire    [3:0]           rgmii_txd_HI,
output  wire    [3:0]           rgmii_txd_LO,
output  wire                    rgmii_tx_ctl_HI,
output  wire                    rgmii_tx_ctl_LO,
output  wire                    rgmii_txc_HI,//if rgmii_txc_dly set 0, used clk_125m clock. if rgmii_txc_dly set 1, used clk_125m_90deg clock.
output  wire                    rgmii_txc_LO,
input           [3:0]           rgmii_rxd_HI,
input           [3:0]           rgmii_rxd_LO,
input                           rgmii_rx_ctl_HI,
input                           rgmii_rx_ctl_LO,
input                           rgmii_rxc
//Status and  Error Signals
);

// Parameter Define 

// Register Define 
reg     [6:0]                   aclk_en_cnt;
reg     [7:0]                   txd;
reg                             tx_en;
reg                             tx_er;
reg     [1:0]                   txc;
reg                             rx_dv_dl1;
reg     [7:0]                   rxd_dl1;
reg                             rx_odd_data_ptr;

// Wire Define
wire                            rx_dv;
wire    [7:0]                   rxd;
wire                            rx_er;

/*----------------------------------------------------------------------------------*\
                                 The main code
\*----------------------------------------------------------------------------------*/

/*----------------------- Tx Region ----------------------------*/
always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        aclk_en_cnt <= 7'd0;
    else if((eth_speed == 3'h4) ||
            ((eth_speed == 3'h2) && (aclk_en_cnt == 7'd9)) ||
            ((eth_speed == 3'h1) && (aclk_en_cnt == 7'd99)))
        aclk_en_cnt <= 7'd0;
    else
        aclk_en_cnt <= aclk_en_cnt + 1'b1;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        tx_mac_aclk_en <= 1'b0;
    else if(aclk_en_cnt == 7'd0)
        tx_mac_aclk_en <= 1'b1;
    else
        tx_mac_aclk_en <= 1'b0;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        txd[7:4] <= 4'h0;
    else if((gm_tx_en == 1'b1) && (tx_mac_aclk_en == 1'b1))
        txd[7:4] <= gm_tx_d[7:4];
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        txd[3:0] <= 4'h0;
    else if((gm_tx_en == 1'b1) && (tx_mac_aclk_en == 1'b1))
        txd[3:0] <= gm_tx_d[3:0];
    else if(((eth_speed == 3'h2) && (aclk_en_cnt == 7'd6)) ||
            ((eth_speed == 3'h1) && (aclk_en_cnt == 7'd51)))
        txd[3:0] <= txd[7:4];
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        tx_en <= 1'b0;
    else if(tx_mac_aclk_en == 1'b1)
        tx_en <= gm_tx_en;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        tx_er <= 1'b0;
    else if(tx_mac_aclk_en == 1'b1)
        tx_er <= gm_tx_err;
end
/*
always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        txc <= 2'b0;
    else
        case(eth_speed)
        3'h4 :
            txc <= 2'b01;
        3'h2 :
            case(rgmii_txc_dly)
            1'b0 ://rgmii_ad85ad4e859847d39173988e5bf30bac tx clock delay disable.
                if((aclk_en_cnt == 7'd0) || (aclk_en_cnt == 7'd5))
                    txc <= 2'b11;
                else if((aclk_en_cnt == 7'd3) || (aclk_en_cnt == 7'd8))
                    txc <= 2'b00;
            1'b1 ://rgmii_ad85ad4e859847d39173988e5bf30bac tx clock delay enable.
                if((aclk_en_cnt == 7'd2) || (aclk_en_cnt == 7'd7))
                    txc <= 2'b11;
                else if((aclk_en_cnt == 7'd0) || (aclk_en_cnt == 7'd5))
                    txc <= 2'b00;
            endcase
        3'h1 :
            case(rgmii_txc_dly)
            1'b0 ://rgmii_ad85ad4e859847d39173988e5bf30bac tx clock delay disable.
                if((aclk_en_cnt == 7'd0) || (aclk_en_cnt == 7'd50))
                    txc <= 2'b11;
                else if((aclk_en_cnt == 7'd25) || (aclk_en_cnt == 7'd75))
                    txc <= 2'b00;
            1'b1 ://rgmii_ad85ad4e859847d39173988e5bf30bac tx clock delay enable.
                if((aclk_en_cnt == 7'd13) || (aclk_en_cnt == 7'd63))
                    txc <= 2'b11;
                else if((aclk_en_cnt == 7'd38) || (aclk_en_cnt == 7'd88))
                    txc <= 2'b00;
            endcase
        default :
            txc <= 2'b0;
        endcase
end

*/
reg [1:0]    txc_100m_r;
reg [1:0]    txc_10m_r;

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        txc_100m_r <= 2'b0;
    else
        case(rgmii_txc_dly)
        1'b0 ://rgmii_ad85ad4e859847d39173988e5bf30bac tx clock delay disable.
            if((aclk_en_cnt == 7'd0) || (aclk_en_cnt == 7'd5))
                txc_100m_r <= 2'b11;
            else if((aclk_en_cnt == 7'd3) || (aclk_en_cnt == 7'd8))
                txc_100m_r <= 2'b00;
        1'b1 ://rgmii_ad85ad4e859847d39173988e5bf30bac tx clock delay enable.
            if((aclk_en_cnt == 7'd2) || (aclk_en_cnt == 7'd7))
                txc_100m_r <= 2'b11;
            else if((aclk_en_cnt == 7'd0) || (aclk_en_cnt == 7'd5))
                txc_100m_r <= 2'b00;
        endcase
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        txc_10m_r <= 2'b0;
    else
        case(rgmii_txc_dly)
        1'b0 ://rgmii_ad85ad4e859847d39173988e5bf30bac tx clock delay disable.
            if((aclk_en_cnt == 7'd0) || (aclk_en_cnt == 7'd50))
                txc_10m_r <= 2'b11;
            else if((aclk_en_cnt == 7'd25) || (aclk_en_cnt == 7'd75))
                txc_10m_r <= 2'b00;
        1'b1 ://rgmii_ad85ad4e859847d39173988e5bf30bac tx clock delay enable.
            if((aclk_en_cnt == 7'd13) || (aclk_en_cnt == 7'd63))
                txc_10m_r <= 2'b11;
            else if((aclk_en_cnt == 7'd38) || (aclk_en_cnt == 7'd88))
                txc_10m_r <= 2'b00;
        endcase
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        txc <= 2'b0;
    else
        case(eth_speed)
            3'h4 :
                txc <= 2'b01;
            3'h2 :
                txc <= txc_100m_r;
            3'h1 :
                txc <= txc_10m_r;
            default :
                txc <= 2'b0;
        endcase
end

/*----------------------- Rx Region ----------------------------*/
assign rx_mac_aclk = rgmii_rxc;

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_mac_aclk_en <= 1'b0;
    else if(eth_speed[2] == 1'b1)
        rx_mac_aclk_en <= 1'b1;
    else
        rx_mac_aclk_en <= ~rx_mac_aclk_en;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        begin
            rx_dv_dl1 <= 1'b0;
            rxd_dl1 <= 8'h0;
        end
    else
        begin
            rx_dv_dl1 <= rx_dv;
            rxd_dl1 <= rxd;
        end
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        gm_rx_dv <= 1'b0;
    else
        gm_rx_dv <= rx_dv_dl1;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_odd_data_ptr <= 1'b0;
    else if(rx_dv == 1'b0)
        rx_odd_data_ptr <= 1'b0;
    else
        rx_odd_data_ptr <= ~rx_odd_data_ptr;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        gm_rx_d <= 8'h0;
    else
        begin
            //if((eth_speed[2] == 1'b1) && (rx_dv_dl1 == 1'b1))
            if((eth_speed[2] == 1'b1))
                gm_rx_d <= rxd_dl1;
            else if((rx_dv == 1'b1) && (rx_odd_data_ptr == 1'b1))
                gm_rx_d <= {rxd[3:0],rxd_dl1[3:0]};
        end
end

reg rx_er_dl1;
always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
	rx_er_dl1 <= 1'b0;
    else
	rx_er_dl1 <= rx_er;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        gm_rx_err <= 1'b0;
    else
        begin
//            if(rx_er == 1'b1)
            if(rx_er_dl1 == 1'b1)
                gm_rx_err <= 1'b1;
            else if(rx_mac_aclk_en == 1'b1)
                gm_rx_err <= 1'b0;
        end
end

/*----------------------- PHY Interface ----------------------------*/
rgmii_ad85ad4e859847d39173988e5bf30bac #(
    .RGMII_SYNC_EN                      (RGMII_SYNC_EN                      )
)
u_rgmii
(
//Globle Signals
    .tx_mac_aclk                        (tx_mac_aclk                        ),
//Configuration Signals
    .eth_speed                          (eth_speed                          ),
    .rgmii_rxc_edge                     (rgmii_rxc_edge                     ),
//Phy Interface
    .txd                                (txd                                ),
    .tx_en                              (tx_en                              ),
    .tx_er                              (tx_er                              ),
    .txc                                (txc                                ),
    .rxd                                (rxd                                ),
    .rx_dv                              (rx_dv                              ),
    .rx_er                              (rx_er                              ),
//RGMII Interface
    .rgmii_txd_HI                       (rgmii_txd_HI                       ),
    .rgmii_txd_LO                       (rgmii_txd_LO                       ),
    .rgmii_tx_ctl_HI                    (rgmii_tx_ctl_HI                    ),
    .rgmii_tx_ctl_LO                    (rgmii_tx_ctl_LO                    ),
    .rgmii_txc_HI                       (rgmii_txc_HI                       ),
    .rgmii_txc_LO                       (rgmii_txc_LO                       ),
    .rgmii_rxd_HI                       (rgmii_rxd_HI                       ),
    .rgmii_rxd_LO                       (rgmii_rxd_LO                       ),
    .rgmii_rx_ctl_HI                    (rgmii_rx_ctl_HI                    ),
    .rgmii_rx_ctl_LO                    (rgmii_rx_ctl_LO                    ),
    .rgmii_rxc                          (rgmii_rxc                          )
);

endmodule


/////////////////////////////////////////////////////////////////////////////
//           _____       
//          / _______    Copyright (C) 2013-2020 Efinix Inc. All rights reserved.
//         / /       \   
//        / /  ..    /   
//       / / .'     /    
//    __/ /.'      /     
//   __   \       /      
//  /_/ /\ \_____/ /     
// ____/  \_______/      
//
// *******************************
// Revisions:
// 1.0 Initial rev
//
// *******************************
`timescale 1 ns / 1 ns
module rgmii_sync_ad85ad4e859847d39173988e5bf30bac
(
//Globle Signals
input                           rgmii_rxc,
input           [2:0]           eth_speed,
//RGMII Rx Interface Input
input           [3:0]           rgmii_rxd_HI_i,
input           [3:0]           rgmii_rxd_LO_i,
input                           rgmii_rx_ctl_HI_i,
input                           rgmii_rx_ctl_LO_i,
//RGMII Rx Interface Output
output  reg     [3:0]           rgmii_rxd_HI_o,
output  reg     [3:0]           rgmii_rxd_LO_o,
output  reg                     rgmii_rx_ctl_HI_o,
output  reg                     rgmii_rx_ctl_LO_o
);


// Parameter Define 
parameter State_idle     = 2'd0;
parameter State_preamble = 2'd1;
parameter State_data_dl1 = 2'd2;
parameter State_data_dl2 = 2'd3;


// Register Define 
reg     [1:0]                   cur_state;
reg     [1:0]                   next_state;
reg                             preamble_odd;
reg     [7:0]                   rx_d_dl1;
reg                             rx_dv_dl1;
reg     [7:0]                   rx_d_dl2;
reg                             rx_dv_dl2;

// Wire Define

/*----------------------------------------------------------------------------------*\
                                 The main code
\*----------------------------------------------------------------------------------*/

always @(posedge rgmii_rxc)
begin
    rx_d_dl1[7:4] <= rgmii_rxd_HI_i;
    rx_d_dl1[3:0] <= rgmii_rxd_LO_i;
    rx_dv_dl1 <= rgmii_rx_ctl_HI_i;
    rx_d_dl2 <= rx_d_dl1;
    rx_dv_dl2 <= rx_dv_dl1;
end

/*----------------------- FSM Region ----------------------------*/
always @(posedge rgmii_rxc)
begin
	cur_state <= next_state;
end

always @(*)
begin
	case(cur_state)
    State_idle :
        if((rx_dv_dl1 == 1'b1) && (rx_d_dl1[3:0] == 4'h5))
            next_state = State_preamble;
        else
            next_state = State_idle;

    State_preamble : 
        if(rx_dv_dl1 == 1'b0)
            next_state = State_idle;
        else if((rx_d_dl1[3:0] == 4'hd) && (preamble_odd == 1'b0))
            next_state = State_data_dl1;
        else if((rx_d_dl1[3:0] == 4'hd) && (preamble_odd == 1'b1))
            next_state = State_data_dl2;
        else if(rx_d_dl1[3:0] != 4'h5)
            next_state = State_idle;
        else
            next_state = State_preamble;
        
    State_data_dl1 :
        if(rx_dv_dl1 == 1'b0)
            next_state = State_idle;
        else
            next_state = State_data_dl1;

    State_data_dl2 :
        if(rx_dv_dl2 == 1'b0)
            next_state = State_idle;
        else
            next_state = State_data_dl2;

    default :
        next_state = State_idle;
    endcase
end

always @(posedge rgmii_rxc)
begin
    if(cur_state == State_preamble)
        preamble_odd <= ~preamble_odd;
    else
        preamble_odd <= 1'b0;
end

/*----------------------- Sync Output Region ----------------------------*/

always @(posedge rgmii_rxc)
begin
    if(eth_speed[2] == 1'b1)
        rgmii_rxd_LO_o <= rgmii_rxd_LO_i;
    else if((cur_state == State_preamble) && (rx_d_dl1[3:0] == 4'hd) && (preamble_odd == 1'b1))
        rgmii_rxd_LO_o <= 4'h5;
    else if(cur_state == State_data_dl2)
        rgmii_rxd_LO_o <= rx_d_dl2[3:0];
    else
        rgmii_rxd_LO_o <= rx_d_dl1[3:0];
end

always @(posedge rgmii_rxc)
begin
    if(eth_speed[2] == 1'b1)
        rgmii_rxd_HI_o <= rgmii_rxd_HI_i;
    else
        rgmii_rxd_HI_o <= 4'h0;
end

always @(posedge rgmii_rxc)
begin
    if(eth_speed[2] == 1'b1)
        rgmii_rx_ctl_HI_o <= rgmii_rx_ctl_HI_i;
    else if((cur_state == State_preamble) && (rx_d_dl1[3:0] == 4'hd) && (preamble_odd == 1'b1))
        rgmii_rx_ctl_HI_o <= 1'b1;
    else if(cur_state == State_data_dl2)
        rgmii_rx_ctl_HI_o <= rx_dv_dl2;
    else
        rgmii_rx_ctl_HI_o <= rx_dv_dl1;
end

always @(posedge rgmii_rxc)
begin
    if(eth_speed[2] == 1'b1)
        rgmii_rx_ctl_LO_o <= rgmii_rx_ctl_LO_i;
    else if((cur_state == State_preamble) && (rx_d_dl1[3:0] == 4'hd) && (preamble_odd == 1'b1))
        rgmii_rx_ctl_LO_o <= 1'b1;
    else if(cur_state == State_data_dl2)
        rgmii_rx_ctl_LO_o <= rx_dv_dl2;
    else
        rgmii_rx_ctl_LO_o <= rx_dv_dl1;
end

endmodule


/////////////////////////////////////////////////////////////////////////////
//           _____       
//          / _______    Copyright (C) 2013-2020 Efinix Inc. All rights reserved.
//         / /       \   
//        / /  ..    /   
//       / / .'     /    
//    __/ /.'      /     
//   __   \       /      
//  /_/ /\ \_____/ /     
// ____/  \_______/      
//
// *******************************
// Revisions:
// 1.0 Initial rev
//
// *******************************

`timescale 1 ns / 1 ns
module rgmii_ad85ad4e859847d39173988e5bf30bac #(
    parameter                       RGMII_SYNC_EN = 1
)
(
//Globle Signals
input                           tx_mac_aclk,
//Configuration Signals
input           [2:0]           eth_speed,
input                           rgmii_rxc_edge,//0:DDIO Rising Edge; 1:DDIO Falling Edge; 
//Phy Interface
input           [7:0]           txd,
input                           tx_en,
input                           tx_er,
input           [1:0]           txc,//if rgmii_txc_dly set 0, used clk_125m clock. if rgmii_txc_dly set 1, used clk_125m_90deg clock.
output  reg     [7:0]           rxd,
output  reg                     rx_dv,
output  reg                     rx_er,
//RGMII Interface
output  reg     [3:0]           rgmii_txd_HI,
output  reg     [3:0]           rgmii_txd_LO,
output  reg                     rgmii_tx_ctl_HI,
output  reg                     rgmii_tx_ctl_LO,
output  reg                     rgmii_txc_HI,
output  reg                     rgmii_txc_LO,
input           [3:0]           rgmii_rxd_HI,
input           [3:0]           rgmii_rxd_LO,
input                           rgmii_rx_ctl_HI,
input                           rgmii_rx_ctl_LO,
input                           rgmii_rxc
//Status and  Error Signals
);
// Parameter Define 

// Register Define 
reg     [3:0]                   rgmii_rxd_HI_d1;
reg                             rgmii_rx_ctl_HI_d1;
reg     [3:0]                   rgmii_txd_HI_r;
reg     [3:0]                   rgmii_txd_LO_r;
reg                             rgmii_tx_ctl_HI_r;
reg                             rgmii_tx_ctl_LO_r;
reg                             rgmii_txc_HI_r;
reg                             rgmii_txc_LO_r;
// Wire Define
wire                            tx_en_to_ddr;
wire                            rgmii_tx_ctl_int;
wire    [3:0]                   txd_falling;
/*----------------------------------------------------------------------------------*\
                                 The main code
\*----------------------------------------------------------------------------------*/

/*----------------------- RGMII Tx Region ----------------------------*/
assign tx_en_to_ddr = (eth_speed[2] == 1'b1) ? tx_en : tx_en && (!tx_er);
assign rgmii_tx_ctl_int = tx_en ^ tx_er;

assign txd_falling = (eth_speed[2] == 1'b1) ? txd[7:4] : txd[3:0];

always @(posedge tx_mac_aclk)
begin
    rgmii_txc_HI_r    <= txc[0];
    rgmii_txc_LO_r    <= txc[1];     
    rgmii_tx_ctl_HI_r <= tx_en_to_ddr;
    rgmii_tx_ctl_LO_r <= rgmii_tx_ctl_int;
    rgmii_txd_HI_r    <= txd[3:0];
    rgmii_txd_LO_r    <= txd_falling;
end

always @(posedge tx_mac_aclk)
begin
    rgmii_txc_HI    <= rgmii_txc_HI_r   ;
    rgmii_txc_LO    <= rgmii_txc_LO_r   ;
    rgmii_tx_ctl_HI <= rgmii_tx_ctl_HI_r;
    rgmii_tx_ctl_LO <= rgmii_tx_ctl_LO_r;
    rgmii_txd_HI    <= rgmii_txd_HI_r   ;
    rgmii_txd_LO    <= rgmii_txd_LO_r   ;
end

/*----------------------- RGMII Rx Region ----------------------------*/
//rgmii_rxd & rgmii_rx_ctl
always @(posedge rgmii_rxc)
begin
	rgmii_rxd_HI_d1 <= rgmii_rxd_HI;
	rgmii_rx_ctl_HI_d1 <= rgmii_rx_ctl_HI;
end

generate
if(RGMII_SYNC_EN == 0)
begin

always @(posedge rgmii_rxc)
begin
    if(eth_speed[2] == 1'b1)//1000M
        begin
            if(rgmii_rxc_edge == 1'b0)//0:DDIO Rising Edge
                begin
	                rxd[7:4] <= rgmii_rxd_LO;
	                rxd[3:0] <= rgmii_rxd_HI_d1;
                    rx_dv <= rgmii_rx_ctl_HI_d1;
                    rx_er <= rgmii_rx_ctl_HI_d1^rgmii_rx_ctl_LO;
                end
            else//1:DDIO Falling Edge
                begin
        	        rxd[7:4] <= rgmii_rxd_HI;
        	        rxd[3:0] <= rgmii_rxd_LO;
                    rx_dv <= rgmii_rx_ctl_LO;
                    rx_er <= rgmii_rx_ctl_LO^rgmii_rx_ctl_HI;
                end
        end
    else//100M or 10M
        begin
        	rxd[7:4] <= 4'b0;
        	rxd[3:0] <= rgmii_rxd_LO;
            rx_dv <= rgmii_rx_ctl_LO;
            rx_er <= rgmii_rx_ctl_LO^rgmii_rx_ctl_HI_d1;
        end
end

end
else
begin

reg     [3:0]                   rgmii_rxd_HI_i;
reg     [3:0]                   rgmii_rxd_LO_i;
reg                             rgmii_rx_ctl_HI_i;
reg                             rgmii_rx_ctl_LO_i;
wire    [3:0]                   rgmii_rxd_HI_sync;
wire    [3:0]                   rgmii_rxd_LO_sync;
wire                            rgmii_rx_ctl_HI_sync;
wire                            rgmii_rx_ctl_LO_sync;

always @(posedge rgmii_rxc)
begin
    if(eth_speed[2] == 1'b1)//1000M
        begin
            if(rgmii_rxc_edge == 1'b0)//0:DDIO Rising Edge
                begin
	                rgmii_rxd_HI_i <= rgmii_rxd_LO;
	                rgmii_rxd_LO_i <= rgmii_rxd_HI_d1;
                    rgmii_rx_ctl_HI_i <= rgmii_rx_ctl_HI_d1;
                    rgmii_rx_ctl_LO_i <= rgmii_rx_ctl_LO;
                end
            else//1:DDIO Falling Edge
                begin
	                rgmii_rxd_HI_i <= rgmii_rxd_HI;
	                rgmii_rxd_LO_i <= rgmii_rxd_LO;
                    rgmii_rx_ctl_HI_i <= rgmii_rx_ctl_HI;
                    rgmii_rx_ctl_LO_i <= rgmii_rx_ctl_LO;
                end
        end        
    else//100M or 10M
        begin
            rgmii_rxd_HI_i <= rgmii_rxd_HI_d1;
	        rgmii_rxd_LO_i <= rgmii_rxd_LO;
            rgmii_rx_ctl_HI_i <= rgmii_rx_ctl_LO;
            rgmii_rx_ctl_LO_i <= rgmii_rx_ctl_HI_d1;
        end
end

always @(posedge rgmii_rxc)
begin
	rxd[7:4] <= rgmii_rxd_HI_sync;
	rxd[3:0] <= rgmii_rxd_LO_sync;
    rx_dv <= rgmii_rx_ctl_HI_sync;
    rx_er <= rgmii_rx_ctl_HI_sync^rgmii_rx_ctl_LO_sync;
end

/*----------------------- RGMII Rx Sync Module -----------------------*/
rgmii_sync_ad85ad4e859847d39173988e5bf30bac u_rgmii_sync
(
//Globle Signals
    .rgmii_rxc                  (rgmii_rxc                  ),
    .eth_speed                  (eth_speed                  ),
//RGMII Rx Interface Input
    .rgmii_rxd_HI_i             (rgmii_rxd_HI_i             ),
    .rgmii_rxd_LO_i             (rgmii_rxd_LO_i             ),
    .rgmii_rx_ctl_HI_i          (rgmii_rx_ctl_HI_i          ),
    .rgmii_rx_ctl_LO_i          (rgmii_rx_ctl_LO_i          ),
//RGMII Rx Interface Output
    .rgmii_rxd_HI_o             (rgmii_rxd_HI_sync          ),
    .rgmii_rxd_LO_o             (rgmii_rxd_LO_sync          ),
    .rgmii_rx_ctl_HI_o          (rgmii_rx_ctl_HI_sync       ),
    .rgmii_rx_ctl_LO_o          (rgmii_rx_ctl_LO_sync       )
);

end
endgenerate


endmodule


`timescale 1 ns / 1 ns
module rmii_if_ad85ad4e859847d39173988e5bf30bac
(
//Globle Signals
input                           tx_mac_aclk,
output  reg                     tx_mac_aclk_en,
input                           tx_reset,
output  wire                    rx_mac_aclk,
output  reg                     rx_mac_aclk_en,
input                           rx_reset,
//Configuration Signals
input           [2:0]           eth_speed,
//GMII Interface
output  reg     [7:0]           gm_rx_d,
output  reg                     gm_rx_dv,
output  reg                     gm_rx_err,
input           [7:0]           gm_tx_d,
input                           gm_tx_en,
input                           gm_tx_err,
//RGMII Interface
input                           rmii_clk_ref,
output  reg     [1:0]           rmii_txd,
output  reg                     rmii_tx_en,

input           [1:0]           rmii_rxd,
input                           rmii_crs_dv,
input                           rmii_rx_err

//Status and  Error Signals
);
// Parameter Define 

// Register Define 
reg     [6:0]                   aclk_en_cnt;
reg     [6:0]                   rx_aclk_en_cnt;
reg     [1:0]                   txd;
reg                             tx_en;
reg                             tx_er;
reg                             rx_err_dl1;
reg                             rx_dv_dl1;
reg     [7:0]                   rxd_dl1;
reg     [6:0]                   rx_odd_data_ptr;
reg     [3:0]                   rxd;
reg                             rx_dv;
reg                             rx_er;
reg     [7:0]                   gm_tx_d_temp;
reg                             tx_en_temp;
reg     [6:0]                   txbit_cnt;
reg                             rx_dv_compensate;
reg                             rx_err_compensate;
reg     [7:0]                   rx_d_compensate;
reg     [6:0]                   rx_compensate_cnt;
// Wire Define

/*----------------------------------------------------------------------------------*\
                                 The main code
\*----------------------------------------------------------------------------------*/

/*----------------------- Tx Region ----------------------------*/
always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        aclk_en_cnt <= 7'd0;
    else if(((eth_speed == 3'h2) && (aclk_en_cnt == 7'd3)) ||
            ((eth_speed == 3'h1) && (aclk_en_cnt == 7'd39)))
        aclk_en_cnt <= 7'd0;
    else
        aclk_en_cnt <= aclk_en_cnt + 1'b1;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        tx_mac_aclk_en <= 1'b0;
    else if(aclk_en_cnt == 7'd0)
        tx_mac_aclk_en <= 1'b1;
    else
        tx_mac_aclk_en <= 1'b0;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        gm_tx_d_temp <= 8'h0;
    else if((gm_tx_en == 1'b1) && (tx_mac_aclk_en == 1'b1))
        gm_tx_d_temp <= gm_tx_d;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        tx_en_temp <= 1'b0;
    else if(tx_mac_aclk_en == 1'b1)
        tx_en_temp <= gm_tx_en;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        txbit_cnt <= 7'd0;
    else if(((eth_speed == 3'h2) && (txbit_cnt == 7'd3)) ||
            ((eth_speed == 3'h1) && (txbit_cnt == 7'd39)))
        txbit_cnt <= 7'd0;
    else if(tx_en_temp == 1'b1)
        txbit_cnt <= txbit_cnt + 1'b1;
    else
        txbit_cnt <= 7'd0; 
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        txd <= 2'h0;
    else if(eth_speed == 3'h2)
        begin
            case(txbit_cnt[1:0])
                2'b00: txd <= gm_tx_d_temp[1:0];
                2'b01: txd <= gm_tx_d_temp[3:2];
                2'b10: txd <= gm_tx_d_temp[5:4];
                2'b11: txd <= gm_tx_d_temp[7:6];
                default; 
            endcase 
        end 
    else if(eth_speed == 3'h1)
        begin
            case(txbit_cnt[5:0])
                6'd00: txd <= gm_tx_d_temp[1:0];
                6'd10: txd <= gm_tx_d_temp[3:2];
                6'd20: txd <= gm_tx_d_temp[5:4];
                6'd30: txd <= gm_tx_d_temp[7:6];
                default; 
            endcase 
        end
    else;    
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        tx_en <= 1'b0;
    else 
        tx_en <= tx_en_temp;
end

always @(posedge tx_mac_aclk or posedge tx_reset)
begin
    if(tx_reset == 1'b1)
        tx_er <= 1'b0;
    else if(tx_mac_aclk_en == 1'b1)
        tx_er <= gm_tx_err;
end

always @(posedge rmii_clk_ref)
begin 
    rmii_tx_en  <= tx_en;
    rmii_txd    <= txd[1:0];
//    rmii_tx_err <= tx_er;
end

/*----------------------- Rx Region ----------------------------*/
always @(posedge rmii_clk_ref)
begin
	rxd   <= rmii_rxd;
    rx_dv <= rmii_crs_dv;
    rx_er <= rmii_rx_err;
end

assign rx_mac_aclk = rmii_clk_ref;

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_aclk_en_cnt <= 7'd0;
    else if(((eth_speed == 3'h2) && (rx_aclk_en_cnt == 7'd3)) ||
            ((eth_speed == 3'h1) && (rx_aclk_en_cnt == 7'd39)))
        rx_aclk_en_cnt <= 7'd0;
    else
        rx_aclk_en_cnt <= rx_aclk_en_cnt + 1'b1;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_mac_aclk_en <= 1'b0;
    else if(rx_aclk_en_cnt == 7'd0)
        rx_mac_aclk_en <= 1'b1;
    else
        rx_mac_aclk_en <= 1'b0;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_odd_data_ptr <= 7'd0;
    else if(((eth_speed == 3'h2) && (rx_odd_data_ptr == 7'd3)) ||
            ((eth_speed == 3'h1) && (rx_odd_data_ptr == 7'd39)) || (rx_dv == 1'b0))
        rx_odd_data_ptr <= 7'd0;
    else 
        rx_odd_data_ptr <= rx_odd_data_ptr + 1'b1;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_dv_dl1 <= 1'b0;
    else 
        rx_dv_dl1 <= rx_dv; 
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_err_dl1 <= 1'b0;
    else 
        rx_err_dl1 <= rx_er; 
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rxd_dl1 <= 8'h0;
    else if(eth_speed == 3'h2)
        begin
            case(rx_odd_data_ptr[1:0])
                2'b00: rxd_dl1[1:0] <= rxd;
                2'b01: rxd_dl1[3:2] <= rxd;
                2'b10: rxd_dl1[5:4] <= rxd;
                2'b11: rxd_dl1[7:6] <= rxd;
                default; 
            endcase 
        end 
    else if(eth_speed == 3'h1)
        begin
            case(rx_odd_data_ptr[5:0])
                6'd00: rxd_dl1[1:0] <= rxd;
                6'd10: rxd_dl1[3:2] <= rxd;
                6'd20: rxd_dl1[5:4] <= rxd;
                6'd30: rxd_dl1[7:6] <= rxd;
                default; 
            endcase 
        end
    else;    
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_compensate_cnt <= 7'b0;
    else if(rx_dv_dl1 == 1'b1)
        rx_compensate_cnt <= 7'b0;
    else if(((eth_speed == 3'h2) && (rx_compensate_cnt == 7'd3)) ||
            ((eth_speed == 3'h1) && (rx_compensate_cnt == 7'd39)))
        rx_compensate_cnt <= rx_compensate_cnt;
    else
        rx_compensate_cnt <= rx_compensate_cnt + 1;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_dv_compensate <= 1'b0;
    else if(((eth_speed == 3'h2) && (rx_compensate_cnt == 7'd3)) ||
            ((eth_speed == 3'h1) && (rx_compensate_cnt == 7'd39)))
        rx_dv_compensate <= 1'b0;
    else if((rx_dv_dl1 == 1'b1) && rx_odd_data_ptr == 7'd0)
        rx_dv_compensate <= 1'b1;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_err_compensate <= 1'b0;
    else if(((eth_speed == 3'h2) && (rx_compensate_cnt == 7'd3)) ||
            ((eth_speed == 3'h1) && (rx_compensate_cnt == 7'd39)))
        rx_err_compensate <= 1'b0;
    else if((rx_dv_dl1 == 1'b1) && (rx_err_dl1 == 1'b1) && rx_odd_data_ptr == 7'd0)
        rx_err_compensate <= 1'b1;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        rx_d_compensate <= 8'h0;
    else if((rx_dv_dl1 == 1'b1) && rx_odd_data_ptr == 7'd0)
        rx_d_compensate <= rxd_dl1;
    else;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        gm_rx_dv <= 1'b0;
    else if(rx_mac_aclk_en == 1'b1)
        gm_rx_dv <= rx_dv_compensate;
end


always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        gm_rx_d <= 8'h0;
    else if(rx_mac_aclk_en == 1'b1)
        gm_rx_d <= rx_d_compensate;
    else;
end

always @(posedge rx_mac_aclk or posedge rx_reset)
begin
    if(rx_reset == 1'b1)
        gm_rx_err <= 1'b0;
    else if(rx_mac_aclk_en == 1'b1)
        gm_rx_err <= rx_err_compensate;
end

endmodule


`undef IP_UUID
`undef IP_NAME_CONCAT
`undef IP_MODULE_NAME
