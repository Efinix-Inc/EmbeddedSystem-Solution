// =============================================================================
// Generated by efx_ipmgr
// Version: 2024.2.294
// IP Version: 5.3
// =============================================================================

////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013-2024 Efinix Inc. All rights reserved.              
//
// This   document  contains  proprietary information  which   is        
// protected by  copyright. All rights  are reserved.  This notice       
// refers to original work by Efinix, Inc. which may be derivitive       
// of other work distributed under license of the authors.  In the       
// case of derivative work, nothing in this notice overrides the         
// original author's license agreement.  Where applicable, the           
// original license agreement is included in it's original               
// unmodified form immediately below this header.                        
//                                                                       
// WARRANTY DISCLAIMER.                                                  
//     THE  DESIGN, CODE, OR INFORMATION ARE PROVIDED “AS IS” AND        
//     EFINIX MAKES NO WARRANTIES, EXPRESS OR IMPLIED WITH               
//     RESPECT THERETO, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES,  
//     INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF          
//     MERCHANTABILITY, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR    
//     PURPOSE.  SOME STATES DO NOT ALLOW EXCLUSIONS OF AN IMPLIED       
//     WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO LICENSEE.           
//                                                                       
// LIMITATION OF LIABILITY.                                              
//     NOTWITHSTANDING ANYTHING TO THE CONTRARY, EXCEPT FOR BODILY       
//     INJURY, EFINIX SHALL NOT BE LIABLE WITH RESPECT TO ANY SUBJECT    
//     MATTER OF THIS AGREEMENT UNDER TORT, CONTRACT, STRICT LIABILITY   
//     OR ANY OTHER LEGAL OR EQUITABLE THEORY (I) FOR ANY INDIRECT,      
//     SPECIAL, INCIDENTAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES OF ANY    
//     CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF      
//     GOODWILL, DATA OR PROFIT, WORK STOPPAGE, OR COMPUTER FAILURE OR   
//     MALFUNCTION, OR IN ANY EVENT (II) FOR ANY AMOUNT IN EXCESS, IN    
//     THE AGGREGATE, OF THE FEE PAID BY LICENSEE TO EFINIX HEREUNDER    
//     (OR, IF THE FEE HAS BEEN WAIVED, $100), EVEN IF EFINIX SHALL HAVE 
//     BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO 
//     NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR            
//     CONSEQUENTIAL DAMAGES, SO THIS LIMITATION AND EXCLUSION MAY NOT   
//     APPLY TO LICENSEE.                                                
//
////////////////////////////////////////////////////////////////////////////////

`define IP_UUID _9c51cd082e6149aeaca9d6aed464db29
`define IP_NAME_CONCAT(a,b) a``b
`define IP_MODULE_NAME(name) `IP_NAME_CONCAT(name,`IP_UUID)
module gSDHC
(
    input sd_rst,
    input sd_base_clk,
    output sd_int,
    input sd_cd_n,
    input sd_wp,
    input [9:0] s_axi_awaddr,
    input s_axi_aclk,
    output s_axi_awready,
    input s_axi_awvalid,
    input [31:0] s_axi_wdata,
    output s_axi_wready,
    input s_axi_wvalid,
    output [1:0] s_axi_bresp,
    output s_axi_bvalid,
    input [9:0] s_axi_araddr,
    input s_axi_bready,
    output s_axi_arready,
    input s_axi_arvalid,
    output [1:0] s_axi_rresp,
    output [31:0] s_axi_rdata,
    output s_axi_rvalid,
    input s_axi_rready,
    output [31:0] m_axi_awaddr,
    output m_axi_awvalid,
    input m_axi_clk,
    output [7:0] m_axi_awlen,
    input m_axi_awready,
    output [2:0] m_axi_awsize,
    output [3:0] m_axi_awcache,
    output [1:0] m_axi_awlock,
    output [2:0] m_axi_awprot,
    output m_axi_wlast,
    output m_axi_wvalid,
    input m_axi_wready,
    input [1:0] m_axi_bresp,
    input m_axi_bvalid,
    output m_axi_bready,
    output m_axi_arvalid,
    output [31:0] m_axi_araddr,
    output [7:0] m_axi_arlen,
    output [2:0] m_axi_arsize,
    output [1:0] m_axi_arburst,
    output [2:0] m_axi_arprot,
    output [1:0] m_axi_arlock,
    output [3:0] m_axi_arcache,
    input m_axi_arready,
    input m_axi_rvalid,
    input m_axi_rlast,
    input [1:0] m_axi_rresp,
    output m_axi_rready,
    output sd_clk_hi,
    output sd_clk_lo,
    input sd_cmd_i,
    output sd_cmd_o,
    output sd_cmd_oe,
    input [3:0] sd_dat_i,
    output [3:0] sd_dat_o,
    output sd_dat_oe,
    output [1:0] m_axi_awburst,
    output [31:0] m_axi_wdata,
    output [3:0] m_axi_wstrb,
    input [31:0] m_axi_rdata,
    input [3:0] s_axi_wstrb
);
`IP_MODULE_NAME(sdhc)
#(
    .DATA_BUFFER_DEPTH (512),
    .ADMA_DATA_WIDTH (32)
)
u_sdhc
(
    .sd_rst ( sd_rst ),
    .sd_base_clk ( sd_base_clk ),
    .sd_int ( sd_int ),
    .sd_cd_n ( sd_cd_n ),
    .sd_wp ( sd_wp ),
    .s_axi_awaddr ( s_axi_awaddr ),
    .s_axi_aclk ( s_axi_aclk ),
    .s_axi_awready ( s_axi_awready ),
    .s_axi_awvalid ( s_axi_awvalid ),
    .s_axi_wdata ( s_axi_wdata ),
    .s_axi_wready ( s_axi_wready ),
    .s_axi_wvalid ( s_axi_wvalid ),
    .s_axi_bresp ( s_axi_bresp ),
    .s_axi_bvalid ( s_axi_bvalid ),
    .s_axi_araddr ( s_axi_araddr ),
    .s_axi_bready ( s_axi_bready ),
    .s_axi_arready ( s_axi_arready ),
    .s_axi_arvalid ( s_axi_arvalid ),
    .s_axi_rresp ( s_axi_rresp ),
    .s_axi_rdata ( s_axi_rdata ),
    .s_axi_rvalid ( s_axi_rvalid ),
    .s_axi_rready ( s_axi_rready ),
    .m_axi_awaddr ( m_axi_awaddr ),
    .m_axi_awvalid ( m_axi_awvalid ),
    .m_axi_clk ( m_axi_clk ),
    .m_axi_awlen ( m_axi_awlen ),
    .m_axi_awready ( m_axi_awready ),
    .m_axi_awsize ( m_axi_awsize ),
    .m_axi_awcache ( m_axi_awcache ),
    .m_axi_awlock ( m_axi_awlock ),
    .m_axi_awprot ( m_axi_awprot ),
    .m_axi_wlast ( m_axi_wlast ),
    .m_axi_wvalid ( m_axi_wvalid ),
    .m_axi_wready ( m_axi_wready ),
    .m_axi_bresp ( m_axi_bresp ),
    .m_axi_bvalid ( m_axi_bvalid ),
    .m_axi_bready ( m_axi_bready ),
    .m_axi_arvalid ( m_axi_arvalid ),
    .m_axi_araddr ( m_axi_araddr ),
    .m_axi_arlen ( m_axi_arlen ),
    .m_axi_arsize ( m_axi_arsize ),
    .m_axi_arburst ( m_axi_arburst ),
    .m_axi_arprot ( m_axi_arprot ),
    .m_axi_arlock ( m_axi_arlock ),
    .m_axi_arcache ( m_axi_arcache ),
    .m_axi_arready ( m_axi_arready ),
    .m_axi_rvalid ( m_axi_rvalid ),
    .m_axi_rlast ( m_axi_rlast ),
    .m_axi_rresp ( m_axi_rresp ),
    .m_axi_rready ( m_axi_rready ),
    .sd_clk_hi ( sd_clk_hi ),
    .sd_clk_lo ( sd_clk_lo ),
    .sd_cmd_i ( sd_cmd_i ),
    .sd_cmd_o ( sd_cmd_o ),
    .sd_cmd_oe ( sd_cmd_oe ),
    .sd_dat_i ( sd_dat_i ),
    .sd_dat_o ( sd_dat_o ),
    .sd_dat_oe ( sd_dat_oe ),
    .m_axi_awburst ( m_axi_awburst ),
    .m_axi_wdata ( m_axi_wdata ),
    .m_axi_wstrb ( m_axi_wstrb ),
    .m_axi_rdata ( m_axi_rdata ),
    .s_axi_wstrb ( s_axi_wstrb )
);
endmodule

// Generator : SpinalHDL dev    git head : 9cdee03b276638ef8e7a948b606bb7acc6e4c8d0
// Component : Asic32To128UpsizerAxi4Upsizer_9c51cd082e6149aeaca9d6aed464db29
// Git hash  : cd16421fb7a4d44431a2445f9a92b82070ab9b8a

`timescale 1ns/1ps

module Asic32To128UpsizerAxi4Upsizer_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_input_aw_valid,
  output              io_input_aw_ready,
  input      [31:0]   io_input_aw_payload_addr,
  input      [7:0]    io_input_aw_payload_id,
  input      [3:0]    io_input_aw_payload_region,
  input      [7:0]    io_input_aw_payload_len,
  input      [2:0]    io_input_aw_payload_size,
  input      [1:0]    io_input_aw_payload_burst,
  input      [0:0]    io_input_aw_payload_lock,
  input      [3:0]    io_input_aw_payload_cache,
  input      [3:0]    io_input_aw_payload_qos,
  input      [2:0]    io_input_aw_payload_prot,
  input               io_input_w_valid,
  output              io_input_w_ready,
  input      [31:0]   io_input_w_payload_data,
  input      [3:0]    io_input_w_payload_strb,
  input               io_input_w_payload_last,
  output              io_input_b_valid,
  input               io_input_b_ready,
  output     [7:0]    io_input_b_payload_id,
  output     [1:0]    io_input_b_payload_resp,
  input               io_input_ar_valid,
  output              io_input_ar_ready,
  input      [31:0]   io_input_ar_payload_addr,
  input      [7:0]    io_input_ar_payload_id,
  input      [3:0]    io_input_ar_payload_region,
  input      [7:0]    io_input_ar_payload_len,
  input      [2:0]    io_input_ar_payload_size,
  input      [1:0]    io_input_ar_payload_burst,
  input      [0:0]    io_input_ar_payload_lock,
  input      [3:0]    io_input_ar_payload_cache,
  input      [3:0]    io_input_ar_payload_qos,
  input      [2:0]    io_input_ar_payload_prot,
  output              io_input_r_valid,
  input               io_input_r_ready,
  output     [31:0]   io_input_r_payload_data,
  output     [7:0]    io_input_r_payload_id,
  output     [1:0]    io_input_r_payload_resp,
  output              io_input_r_payload_last,
  output              io_output_aw_valid,
  input               io_output_aw_ready,
  output     [31:0]   io_output_aw_payload_addr,
  output     [7:0]    io_output_aw_payload_id,
  output     [3:0]    io_output_aw_payload_region,
  output     [7:0]    io_output_aw_payload_len,
  output     [2:0]    io_output_aw_payload_size,
  output     [1:0]    io_output_aw_payload_burst,
  output     [0:0]    io_output_aw_payload_lock,
  output     [3:0]    io_output_aw_payload_cache,
  output     [3:0]    io_output_aw_payload_qos,
  output     [2:0]    io_output_aw_payload_prot,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [127:0]  io_output_w_payload_data,
  output     [15:0]   io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [7:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  output              io_output_ar_valid,
  input               io_output_ar_ready,
  output     [31:0]   io_output_ar_payload_addr,
  output     [7:0]    io_output_ar_payload_id,
  output     [3:0]    io_output_ar_payload_region,
  output     [7:0]    io_output_ar_payload_len,
  output     [2:0]    io_output_ar_payload_size,
  output     [1:0]    io_output_ar_payload_burst,
  output     [0:0]    io_output_ar_payload_lock,
  output     [3:0]    io_output_ar_payload_cache,
  output     [3:0]    io_output_ar_payload_qos,
  output     [2:0]    io_output_ar_payload_prot,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [127:0]  io_output_r_payload_data,
  input      [7:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               clk,
  input               reset
);

  wire                readOnly_io_input_ar_ready;
  wire                readOnly_io_input_r_valid;
  wire       [31:0]   readOnly_io_input_r_payload_data;
  wire       [7:0]    readOnly_io_input_r_payload_id;
  wire       [1:0]    readOnly_io_input_r_payload_resp;
  wire                readOnly_io_input_r_payload_last;
  wire                readOnly_io_output_ar_valid;
  wire       [31:0]   readOnly_io_output_ar_payload_addr;
  wire       [7:0]    readOnly_io_output_ar_payload_id;
  wire       [3:0]    readOnly_io_output_ar_payload_region;
  wire       [7:0]    readOnly_io_output_ar_payload_len;
  wire       [2:0]    readOnly_io_output_ar_payload_size;
  wire       [1:0]    readOnly_io_output_ar_payload_burst;
  wire       [0:0]    readOnly_io_output_ar_payload_lock;
  wire       [3:0]    readOnly_io_output_ar_payload_cache;
  wire       [3:0]    readOnly_io_output_ar_payload_qos;
  wire       [2:0]    readOnly_io_output_ar_payload_prot;
  wire                readOnly_io_output_r_ready;
  wire                writeOnly_io_input_aw_ready;
  wire                writeOnly_io_input_w_ready;
  wire                writeOnly_io_input_b_valid;
  wire       [7:0]    writeOnly_io_input_b_payload_id;
  wire       [1:0]    writeOnly_io_input_b_payload_resp;
  wire                writeOnly_io_output_aw_valid;
  wire       [31:0]   writeOnly_io_output_aw_payload_addr;
  wire       [7:0]    writeOnly_io_output_aw_payload_id;
  wire       [3:0]    writeOnly_io_output_aw_payload_region;
  wire       [7:0]    writeOnly_io_output_aw_payload_len;
  wire       [2:0]    writeOnly_io_output_aw_payload_size;
  wire       [1:0]    writeOnly_io_output_aw_payload_burst;
  wire       [0:0]    writeOnly_io_output_aw_payload_lock;
  wire       [3:0]    writeOnly_io_output_aw_payload_cache;
  wire       [3:0]    writeOnly_io_output_aw_payload_qos;
  wire       [2:0]    writeOnly_io_output_aw_payload_prot;
  wire                writeOnly_io_output_w_valid;
  wire       [127:0]  writeOnly_io_output_w_payload_data;
  wire       [15:0]   writeOnly_io_output_w_payload_strb;
  wire                writeOnly_io_output_w_payload_last;
  wire                writeOnly_io_output_b_ready;

  Asic32To128UpsizerAxi4ReadOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 readOnly (
    .io_input_ar_valid           (io_input_ar_valid                        ), //i
    .io_input_ar_ready           (readOnly_io_input_ar_ready               ), //o
    .io_input_ar_payload_addr    (io_input_ar_payload_addr[31:0]           ), //i
    .io_input_ar_payload_id      (io_input_ar_payload_id[7:0]              ), //i
    .io_input_ar_payload_region  (io_input_ar_payload_region[3:0]          ), //i
    .io_input_ar_payload_len     (io_input_ar_payload_len[7:0]             ), //i
    .io_input_ar_payload_size    (io_input_ar_payload_size[2:0]            ), //i
    .io_input_ar_payload_burst   (io_input_ar_payload_burst[1:0]           ), //i
    .io_input_ar_payload_lock    (io_input_ar_payload_lock                 ), //i
    .io_input_ar_payload_cache   (io_input_ar_payload_cache[3:0]           ), //i
    .io_input_ar_payload_qos     (io_input_ar_payload_qos[3:0]             ), //i
    .io_input_ar_payload_prot    (io_input_ar_payload_prot[2:0]            ), //i
    .io_input_r_valid            (readOnly_io_input_r_valid                ), //o
    .io_input_r_ready            (io_input_r_ready                         ), //i
    .io_input_r_payload_data     (readOnly_io_input_r_payload_data[31:0]   ), //o
    .io_input_r_payload_id       (readOnly_io_input_r_payload_id[7:0]      ), //o
    .io_input_r_payload_resp     (readOnly_io_input_r_payload_resp[1:0]    ), //o
    .io_input_r_payload_last     (readOnly_io_input_r_payload_last         ), //o
    .io_output_ar_valid          (readOnly_io_output_ar_valid              ), //o
    .io_output_ar_ready          (io_output_ar_ready                       ), //i
    .io_output_ar_payload_addr   (readOnly_io_output_ar_payload_addr[31:0] ), //o
    .io_output_ar_payload_id     (readOnly_io_output_ar_payload_id[7:0]    ), //o
    .io_output_ar_payload_region (readOnly_io_output_ar_payload_region[3:0]), //o
    .io_output_ar_payload_len    (readOnly_io_output_ar_payload_len[7:0]   ), //o
    .io_output_ar_payload_size   (readOnly_io_output_ar_payload_size[2:0]  ), //o
    .io_output_ar_payload_burst  (readOnly_io_output_ar_payload_burst[1:0] ), //o
    .io_output_ar_payload_lock   (readOnly_io_output_ar_payload_lock       ), //o
    .io_output_ar_payload_cache  (readOnly_io_output_ar_payload_cache[3:0] ), //o
    .io_output_ar_payload_qos    (readOnly_io_output_ar_payload_qos[3:0]   ), //o
    .io_output_ar_payload_prot   (readOnly_io_output_ar_payload_prot[2:0]  ), //o
    .io_output_r_valid           (io_output_r_valid                        ), //i
    .io_output_r_ready           (readOnly_io_output_r_ready               ), //o
    .io_output_r_payload_data    (io_output_r_payload_data[127:0]          ), //i
    .io_output_r_payload_id      (io_output_r_payload_id[7:0]              ), //i
    .io_output_r_payload_resp    (io_output_r_payload_resp[1:0]            ), //i
    .io_output_r_payload_last    (io_output_r_payload_last                 ), //i
    .clk                         (clk                                      ), //i
    .reset                       (reset                                    )  //i
  );
  Asic32To128UpsizerAxi4WriteOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 writeOnly (
    .io_input_aw_valid           (io_input_aw_valid                         ), //i
    .io_input_aw_ready           (writeOnly_io_input_aw_ready               ), //o
    .io_input_aw_payload_addr    (io_input_aw_payload_addr[31:0]            ), //i
    .io_input_aw_payload_id      (io_input_aw_payload_id[7:0]               ), //i
    .io_input_aw_payload_region  (io_input_aw_payload_region[3:0]           ), //i
    .io_input_aw_payload_len     (io_input_aw_payload_len[7:0]              ), //i
    .io_input_aw_payload_size    (io_input_aw_payload_size[2:0]             ), //i
    .io_input_aw_payload_burst   (io_input_aw_payload_burst[1:0]            ), //i
    .io_input_aw_payload_lock    (io_input_aw_payload_lock                  ), //i
    .io_input_aw_payload_cache   (io_input_aw_payload_cache[3:0]            ), //i
    .io_input_aw_payload_qos     (io_input_aw_payload_qos[3:0]              ), //i
    .io_input_aw_payload_prot    (io_input_aw_payload_prot[2:0]             ), //i
    .io_input_w_valid            (io_input_w_valid                          ), //i
    .io_input_w_ready            (writeOnly_io_input_w_ready                ), //o
    .io_input_w_payload_data     (io_input_w_payload_data[31:0]             ), //i
    .io_input_w_payload_strb     (io_input_w_payload_strb[3:0]              ), //i
    .io_input_w_payload_last     (io_input_w_payload_last                   ), //i
    .io_input_b_valid            (writeOnly_io_input_b_valid                ), //o
    .io_input_b_ready            (io_input_b_ready                          ), //i
    .io_input_b_payload_id       (writeOnly_io_input_b_payload_id[7:0]      ), //o
    .io_input_b_payload_resp     (writeOnly_io_input_b_payload_resp[1:0]    ), //o
    .io_output_aw_valid          (writeOnly_io_output_aw_valid              ), //o
    .io_output_aw_ready          (io_output_aw_ready                        ), //i
    .io_output_aw_payload_addr   (writeOnly_io_output_aw_payload_addr[31:0] ), //o
    .io_output_aw_payload_id     (writeOnly_io_output_aw_payload_id[7:0]    ), //o
    .io_output_aw_payload_region (writeOnly_io_output_aw_payload_region[3:0]), //o
    .io_output_aw_payload_len    (writeOnly_io_output_aw_payload_len[7:0]   ), //o
    .io_output_aw_payload_size   (writeOnly_io_output_aw_payload_size[2:0]  ), //o
    .io_output_aw_payload_burst  (writeOnly_io_output_aw_payload_burst[1:0] ), //o
    .io_output_aw_payload_lock   (writeOnly_io_output_aw_payload_lock       ), //o
    .io_output_aw_payload_cache  (writeOnly_io_output_aw_payload_cache[3:0] ), //o
    .io_output_aw_payload_qos    (writeOnly_io_output_aw_payload_qos[3:0]   ), //o
    .io_output_aw_payload_prot   (writeOnly_io_output_aw_payload_prot[2:0]  ), //o
    .io_output_w_valid           (writeOnly_io_output_w_valid               ), //o
    .io_output_w_ready           (io_output_w_ready                         ), //i
    .io_output_w_payload_data    (writeOnly_io_output_w_payload_data[127:0] ), //o
    .io_output_w_payload_strb    (writeOnly_io_output_w_payload_strb[15:0]  ), //o
    .io_output_w_payload_last    (writeOnly_io_output_w_payload_last        ), //o
    .io_output_b_valid           (io_output_b_valid                         ), //i
    .io_output_b_ready           (writeOnly_io_output_b_ready               ), //o
    .io_output_b_payload_id      (io_output_b_payload_id[7:0]               ), //i
    .io_output_b_payload_resp    (io_output_b_payload_resp[1:0]             ), //i
    .clk                         (clk                                       ), //i
    .reset                       (reset                                     )  //i
  );
  assign io_input_ar_ready = readOnly_io_input_ar_ready;
  assign io_input_r_valid = readOnly_io_input_r_valid;
  assign io_input_r_payload_data = readOnly_io_input_r_payload_data;
  assign io_input_r_payload_id = readOnly_io_input_r_payload_id;
  assign io_input_r_payload_resp = readOnly_io_input_r_payload_resp;
  assign io_input_r_payload_last = readOnly_io_input_r_payload_last;
  assign io_input_aw_ready = writeOnly_io_input_aw_ready;
  assign io_input_w_ready = writeOnly_io_input_w_ready;
  assign io_input_b_valid = writeOnly_io_input_b_valid;
  assign io_input_b_payload_id = writeOnly_io_input_b_payload_id;
  assign io_input_b_payload_resp = writeOnly_io_input_b_payload_resp;
  assign io_output_ar_valid = readOnly_io_output_ar_valid;
  assign io_output_ar_payload_addr = readOnly_io_output_ar_payload_addr;
  assign io_output_ar_payload_id = readOnly_io_output_ar_payload_id;
  assign io_output_ar_payload_region = readOnly_io_output_ar_payload_region;
  assign io_output_ar_payload_len = readOnly_io_output_ar_payload_len;
  assign io_output_ar_payload_size = readOnly_io_output_ar_payload_size;
  assign io_output_ar_payload_burst = readOnly_io_output_ar_payload_burst;
  assign io_output_ar_payload_lock = readOnly_io_output_ar_payload_lock;
  assign io_output_ar_payload_cache = readOnly_io_output_ar_payload_cache;
  assign io_output_ar_payload_qos = readOnly_io_output_ar_payload_qos;
  assign io_output_ar_payload_prot = readOnly_io_output_ar_payload_prot;
  assign io_output_r_ready = readOnly_io_output_r_ready;
  assign io_output_aw_valid = writeOnly_io_output_aw_valid;
  assign io_output_aw_payload_addr = writeOnly_io_output_aw_payload_addr;
  assign io_output_aw_payload_id = writeOnly_io_output_aw_payload_id;
  assign io_output_aw_payload_region = writeOnly_io_output_aw_payload_region;
  assign io_output_aw_payload_len = writeOnly_io_output_aw_payload_len;
  assign io_output_aw_payload_size = writeOnly_io_output_aw_payload_size;
  assign io_output_aw_payload_burst = writeOnly_io_output_aw_payload_burst;
  assign io_output_aw_payload_lock = writeOnly_io_output_aw_payload_lock;
  assign io_output_aw_payload_cache = writeOnly_io_output_aw_payload_cache;
  assign io_output_aw_payload_qos = writeOnly_io_output_aw_payload_qos;
  assign io_output_aw_payload_prot = writeOnly_io_output_aw_payload_prot;
  assign io_output_w_valid = writeOnly_io_output_w_valid;
  assign io_output_w_payload_data = writeOnly_io_output_w_payload_data;
  assign io_output_w_payload_strb = writeOnly_io_output_w_payload_strb;
  assign io_output_w_payload_last = writeOnly_io_output_w_payload_last;
  assign io_output_b_ready = writeOnly_io_output_b_ready;

endmodule

module Asic32To128UpsizerAxi4WriteOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_input_aw_valid,
  output reg          io_input_aw_ready,
  input      [31:0]   io_input_aw_payload_addr,
  input      [7:0]    io_input_aw_payload_id,
  input      [3:0]    io_input_aw_payload_region,
  input      [7:0]    io_input_aw_payload_len,
  input      [2:0]    io_input_aw_payload_size,
  input      [1:0]    io_input_aw_payload_burst,
  input      [0:0]    io_input_aw_payload_lock,
  input      [3:0]    io_input_aw_payload_cache,
  input      [3:0]    io_input_aw_payload_qos,
  input      [2:0]    io_input_aw_payload_prot,
  input               io_input_w_valid,
  output              io_input_w_ready,
  input      [31:0]   io_input_w_payload_data,
  input      [3:0]    io_input_w_payload_strb,
  input               io_input_w_payload_last,
  output              io_input_b_valid,
  input               io_input_b_ready,
  output     [7:0]    io_input_b_payload_id,
  output     [1:0]    io_input_b_payload_resp,
  output              io_output_aw_valid,
  input               io_output_aw_ready,
  output     [31:0]   io_output_aw_payload_addr,
  output     [7:0]    io_output_aw_payload_id,
  output     [3:0]    io_output_aw_payload_region,
  output reg [7:0]    io_output_aw_payload_len,
  output reg [2:0]    io_output_aw_payload_size,
  output     [1:0]    io_output_aw_payload_burst,
  output     [0:0]    io_output_aw_payload_lock,
  output     [3:0]    io_output_aw_payload_cache,
  output     [3:0]    io_output_aw_payload_qos,
  output     [2:0]    io_output_aw_payload_prot,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [127:0]  io_output_w_payload_data,
  output     [15:0]   io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [7:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  input               clk,
  input               reset
);

  wire       [14:0]   _zz_cmdLogic_byteCount;
  wire       [10:0]   _zz_cmdLogic_incrLen;
  wire       [10:0]   _zz_cmdLogic_incrLen_1;
  wire       [3:0]    _zz_cmdLogic_incrLen_2;
  wire       [4:0]    _zz_dataLogic_byteCounterNext;
  wire       [7:0]    _zz_dataLogic_byteCounterNext_1;
  reg        [15:0]   _zz_dataLogic_byteActivity;
  wire       [1:0]    _zz_dataLogic_byteActivity_1;
  wire                cmdLogic_outputFork_valid;
  wire                cmdLogic_outputFork_ready;
  wire       [31:0]   cmdLogic_outputFork_payload_addr;
  wire       [7:0]    cmdLogic_outputFork_payload_id;
  wire       [3:0]    cmdLogic_outputFork_payload_region;
  wire       [7:0]    cmdLogic_outputFork_payload_len;
  wire       [2:0]    cmdLogic_outputFork_payload_size;
  wire       [1:0]    cmdLogic_outputFork_payload_burst;
  wire       [0:0]    cmdLogic_outputFork_payload_lock;
  wire       [3:0]    cmdLogic_outputFork_payload_cache;
  wire       [3:0]    cmdLogic_outputFork_payload_qos;
  wire       [2:0]    cmdLogic_outputFork_payload_prot;
  wire                cmdLogic_dataFork_valid;
  wire                cmdLogic_dataFork_ready;
  wire       [31:0]   cmdLogic_dataFork_payload_addr;
  wire       [7:0]    cmdLogic_dataFork_payload_id;
  wire       [3:0]    cmdLogic_dataFork_payload_region;
  wire       [7:0]    cmdLogic_dataFork_payload_len;
  wire       [2:0]    cmdLogic_dataFork_payload_size;
  wire       [1:0]    cmdLogic_dataFork_payload_burst;
  wire       [0:0]    cmdLogic_dataFork_payload_lock;
  wire       [3:0]    cmdLogic_dataFork_payload_cache;
  wire       [3:0]    cmdLogic_dataFork_payload_qos;
  wire       [2:0]    cmdLogic_dataFork_payload_prot;
  reg                 io_input_aw_fork2_logic_linkEnable_0;
  reg                 io_input_aw_fork2_logic_linkEnable_1;
  wire                when_Stream_l993;
  wire                when_Stream_l993_1;
  wire                cmdLogic_outputFork_fire;
  wire                cmdLogic_dataFork_fire;
  wire       [9:0]    cmdLogic_byteCount;
  wire       [6:0]    cmdLogic_incrLen;
  wire                when_Axi4Upsizer_l21;
  wire                when_Axi4Upsizer_l24;
  reg        [3:0]    dataLogic_byteCounter;
  reg        [2:0]    dataLogic_size;
  reg                 dataLogic_outputValid;
  reg                 dataLogic_outputLast;
  reg                 dataLogic_busy;
  reg                 dataLogic_incrementByteCounter;
  reg                 dataLogic_alwaysFire;
  wire       [4:0]    dataLogic_byteCounterNext;
  reg        [127:0]  dataLogic_dataBuffer;
  reg        [15:0]   dataLogic_maskBuffer;
  wire       [15:0]   dataLogic_byteActivity;
  wire                io_output_w_fire;
  wire                io_output_w_isStall;
  wire                io_input_w_fire;
  wire                when_Axi4Upsizer_l59;
  wire                when_Axi4Upsizer_l59_1;
  wire                when_Axi4Upsizer_l59_2;
  wire                when_Axi4Upsizer_l59_3;
  wire                when_Axi4Upsizer_l59_4;
  wire                when_Axi4Upsizer_l59_5;
  wire                when_Axi4Upsizer_l59_6;
  wire                when_Axi4Upsizer_l59_7;
  wire                when_Axi4Upsizer_l59_8;
  wire                when_Axi4Upsizer_l59_9;
  wire                when_Axi4Upsizer_l59_10;
  wire                when_Axi4Upsizer_l59_11;
  wire                when_Axi4Upsizer_l59_12;
  wire                when_Axi4Upsizer_l59_13;
  wire                when_Axi4Upsizer_l59_14;
  wire                when_Axi4Upsizer_l59_15;
  wire                cmdLogic_dataFork_fire_1;
  wire                when_Axi4Upsizer_l68;
  wire                when_Axi4Upsizer_l68_1;
  wire                when_Axi4Upsizer_l68_2;
  wire                when_Axi4Upsizer_l68_3;

  assign _zz_cmdLogic_byteCount = ({7'd0,io_input_aw_payload_len} <<< io_input_aw_payload_size);
  assign _zz_cmdLogic_incrLen = ({1'b0,cmdLogic_byteCount} + _zz_cmdLogic_incrLen_1);
  assign _zz_cmdLogic_incrLen_2 = io_input_aw_payload_addr[3 : 0];
  assign _zz_cmdLogic_incrLen_1 = {7'd0, _zz_cmdLogic_incrLen_2};
  assign _zz_dataLogic_byteCounterNext_1 = ({7'd0,1'b1} <<< dataLogic_size);
  assign _zz_dataLogic_byteCounterNext = _zz_dataLogic_byteCounterNext_1[4:0];
  assign _zz_dataLogic_byteActivity_1 = dataLogic_size[1:0];
  always @(*) begin
    case(_zz_dataLogic_byteActivity_1)
      2'b00 : _zz_dataLogic_byteActivity = 16'h0001;
      2'b01 : _zz_dataLogic_byteActivity = 16'h0003;
      2'b10 : _zz_dataLogic_byteActivity = 16'h000f;
      default : _zz_dataLogic_byteActivity = 16'h00ff;
    endcase
  end

  always @(*) begin
    io_input_aw_ready = 1'b1;
    if(when_Stream_l993) begin
      io_input_aw_ready = 1'b0;
    end
    if(when_Stream_l993_1) begin
      io_input_aw_ready = 1'b0;
    end
  end

  assign when_Stream_l993 = ((! cmdLogic_outputFork_ready) && io_input_aw_fork2_logic_linkEnable_0);
  assign when_Stream_l993_1 = ((! cmdLogic_dataFork_ready) && io_input_aw_fork2_logic_linkEnable_1);
  assign cmdLogic_outputFork_valid = (io_input_aw_valid && io_input_aw_fork2_logic_linkEnable_0);
  assign cmdLogic_outputFork_payload_addr = io_input_aw_payload_addr;
  assign cmdLogic_outputFork_payload_id = io_input_aw_payload_id;
  assign cmdLogic_outputFork_payload_region = io_input_aw_payload_region;
  assign cmdLogic_outputFork_payload_len = io_input_aw_payload_len;
  assign cmdLogic_outputFork_payload_size = io_input_aw_payload_size;
  assign cmdLogic_outputFork_payload_burst = io_input_aw_payload_burst;
  assign cmdLogic_outputFork_payload_lock = io_input_aw_payload_lock;
  assign cmdLogic_outputFork_payload_cache = io_input_aw_payload_cache;
  assign cmdLogic_outputFork_payload_qos = io_input_aw_payload_qos;
  assign cmdLogic_outputFork_payload_prot = io_input_aw_payload_prot;
  assign cmdLogic_outputFork_fire = (cmdLogic_outputFork_valid && cmdLogic_outputFork_ready);
  assign cmdLogic_dataFork_valid = (io_input_aw_valid && io_input_aw_fork2_logic_linkEnable_1);
  assign cmdLogic_dataFork_payload_addr = io_input_aw_payload_addr;
  assign cmdLogic_dataFork_payload_id = io_input_aw_payload_id;
  assign cmdLogic_dataFork_payload_region = io_input_aw_payload_region;
  assign cmdLogic_dataFork_payload_len = io_input_aw_payload_len;
  assign cmdLogic_dataFork_payload_size = io_input_aw_payload_size;
  assign cmdLogic_dataFork_payload_burst = io_input_aw_payload_burst;
  assign cmdLogic_dataFork_payload_lock = io_input_aw_payload_lock;
  assign cmdLogic_dataFork_payload_cache = io_input_aw_payload_cache;
  assign cmdLogic_dataFork_payload_qos = io_input_aw_payload_qos;
  assign cmdLogic_dataFork_payload_prot = io_input_aw_payload_prot;
  assign cmdLogic_dataFork_fire = (cmdLogic_dataFork_valid && cmdLogic_dataFork_ready);
  assign io_output_aw_valid = cmdLogic_outputFork_valid;
  assign cmdLogic_outputFork_ready = io_output_aw_ready;
  assign io_output_aw_payload_addr = cmdLogic_outputFork_payload_addr;
  assign io_output_aw_payload_id = cmdLogic_outputFork_payload_id;
  assign io_output_aw_payload_region = cmdLogic_outputFork_payload_region;
  always @(*) begin
    io_output_aw_payload_len = cmdLogic_outputFork_payload_len;
    if(when_Axi4Upsizer_l21) begin
      io_output_aw_payload_len = {1'd0, cmdLogic_incrLen};
    end
  end

  always @(*) begin
    io_output_aw_payload_size = cmdLogic_outputFork_payload_size;
    if(when_Axi4Upsizer_l21) begin
      io_output_aw_payload_size = 3'b100;
      if(when_Axi4Upsizer_l24) begin
        io_output_aw_payload_size = io_input_aw_payload_size;
      end
    end
  end

  assign io_output_aw_payload_burst = cmdLogic_outputFork_payload_burst;
  assign io_output_aw_payload_lock = cmdLogic_outputFork_payload_lock;
  assign io_output_aw_payload_cache = cmdLogic_outputFork_payload_cache;
  assign io_output_aw_payload_qos = cmdLogic_outputFork_payload_qos;
  assign io_output_aw_payload_prot = cmdLogic_outputFork_payload_prot;
  assign cmdLogic_byteCount = _zz_cmdLogic_byteCount[9:0];
  assign cmdLogic_incrLen = _zz_cmdLogic_incrLen[10 : 4];
  assign when_Axi4Upsizer_l21 = (io_output_aw_payload_burst == 2'b01);
  assign when_Axi4Upsizer_l24 = (io_input_aw_payload_len == 8'h00);
  assign dataLogic_byteCounterNext = ({1'b0,dataLogic_byteCounter} + _zz_dataLogic_byteCounterNext);
  assign dataLogic_byteActivity = (_zz_dataLogic_byteActivity <<< dataLogic_byteCounter);
  assign io_output_w_fire = (io_output_w_valid && io_output_w_ready);
  assign io_output_w_valid = dataLogic_outputValid;
  assign io_output_w_isStall = (io_output_w_valid && (! io_output_w_ready));
  assign io_input_w_ready = (dataLogic_busy && (! io_output_w_isStall));
  assign io_output_w_payload_data = dataLogic_dataBuffer;
  assign io_output_w_payload_strb = dataLogic_maskBuffer;
  assign io_output_w_payload_last = dataLogic_outputLast;
  assign io_input_w_fire = (io_input_w_valid && io_input_w_ready);
  assign when_Axi4Upsizer_l59 = dataLogic_byteActivity[0];
  assign when_Axi4Upsizer_l59_1 = dataLogic_byteActivity[1];
  assign when_Axi4Upsizer_l59_2 = dataLogic_byteActivity[2];
  assign when_Axi4Upsizer_l59_3 = dataLogic_byteActivity[3];
  assign when_Axi4Upsizer_l59_4 = dataLogic_byteActivity[4];
  assign when_Axi4Upsizer_l59_5 = dataLogic_byteActivity[5];
  assign when_Axi4Upsizer_l59_6 = dataLogic_byteActivity[6];
  assign when_Axi4Upsizer_l59_7 = dataLogic_byteActivity[7];
  assign when_Axi4Upsizer_l59_8 = dataLogic_byteActivity[8];
  assign when_Axi4Upsizer_l59_9 = dataLogic_byteActivity[9];
  assign when_Axi4Upsizer_l59_10 = dataLogic_byteActivity[10];
  assign when_Axi4Upsizer_l59_11 = dataLogic_byteActivity[11];
  assign when_Axi4Upsizer_l59_12 = dataLogic_byteActivity[12];
  assign when_Axi4Upsizer_l59_13 = dataLogic_byteActivity[13];
  assign when_Axi4Upsizer_l59_14 = dataLogic_byteActivity[14];
  assign when_Axi4Upsizer_l59_15 = dataLogic_byteActivity[15];
  assign cmdLogic_dataFork_fire_1 = (cmdLogic_dataFork_valid && cmdLogic_dataFork_ready);
  assign when_Axi4Upsizer_l68 = (3'b000 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_1 = (3'b001 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_2 = (3'b010 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_3 = (3'b011 < cmdLogic_dataFork_payload_size);
  assign cmdLogic_dataFork_ready = (! dataLogic_busy);
  assign io_input_b_valid = io_output_b_valid;
  assign io_output_b_ready = io_input_b_ready;
  assign io_input_b_payload_id = io_output_b_payload_id;
  assign io_input_b_payload_resp = io_output_b_payload_resp;
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      io_input_aw_fork2_logic_linkEnable_0 <= 1'b1;
      io_input_aw_fork2_logic_linkEnable_1 <= 1'b1;
      dataLogic_outputValid <= 1'b0;
      dataLogic_busy <= 1'b0;
      dataLogic_maskBuffer <= 16'h0000;
    end else begin
      if(cmdLogic_outputFork_fire) begin
        io_input_aw_fork2_logic_linkEnable_0 <= 1'b0;
      end
      if(cmdLogic_dataFork_fire) begin
        io_input_aw_fork2_logic_linkEnable_1 <= 1'b0;
      end
      if(io_input_aw_ready) begin
        io_input_aw_fork2_logic_linkEnable_0 <= 1'b1;
        io_input_aw_fork2_logic_linkEnable_1 <= 1'b1;
      end
      if(io_output_w_ready) begin
        dataLogic_outputValid <= 1'b0;
      end
      if(io_output_w_fire) begin
        dataLogic_maskBuffer <= 16'h0000;
      end
      if(io_input_w_fire) begin
        dataLogic_outputValid <= ((dataLogic_byteCounterNext[4] || io_input_w_payload_last) || dataLogic_alwaysFire);
        if(io_input_w_payload_last) begin
          dataLogic_busy <= 1'b0;
        end
        if(when_Axi4Upsizer_l59) begin
          dataLogic_maskBuffer[0] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_1) begin
          dataLogic_maskBuffer[1] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_2) begin
          dataLogic_maskBuffer[2] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_3) begin
          dataLogic_maskBuffer[3] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_4) begin
          dataLogic_maskBuffer[4] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_5) begin
          dataLogic_maskBuffer[5] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_6) begin
          dataLogic_maskBuffer[6] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_7) begin
          dataLogic_maskBuffer[7] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_8) begin
          dataLogic_maskBuffer[8] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_9) begin
          dataLogic_maskBuffer[9] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_10) begin
          dataLogic_maskBuffer[10] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_11) begin
          dataLogic_maskBuffer[11] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_12) begin
          dataLogic_maskBuffer[12] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_13) begin
          dataLogic_maskBuffer[13] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_14) begin
          dataLogic_maskBuffer[14] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_15) begin
          dataLogic_maskBuffer[15] <= io_input_w_payload_strb[3];
        end
      end
      if(cmdLogic_dataFork_fire_1) begin
        dataLogic_busy <= 1'b1;
      end
    end
  end

  always @(posedge clk) begin
    if(io_input_w_fire) begin
      if(dataLogic_incrementByteCounter) begin
        dataLogic_byteCounter <= dataLogic_byteCounterNext[3:0];
      end
      dataLogic_outputLast <= io_input_w_payload_last;
      if(when_Axi4Upsizer_l59) begin
        dataLogic_dataBuffer[7 : 0] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_1) begin
        dataLogic_dataBuffer[15 : 8] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_2) begin
        dataLogic_dataBuffer[23 : 16] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_3) begin
        dataLogic_dataBuffer[31 : 24] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_4) begin
        dataLogic_dataBuffer[39 : 32] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_5) begin
        dataLogic_dataBuffer[47 : 40] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_6) begin
        dataLogic_dataBuffer[55 : 48] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_7) begin
        dataLogic_dataBuffer[63 : 56] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_8) begin
        dataLogic_dataBuffer[71 : 64] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_9) begin
        dataLogic_dataBuffer[79 : 72] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_10) begin
        dataLogic_dataBuffer[87 : 80] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_11) begin
        dataLogic_dataBuffer[95 : 88] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_12) begin
        dataLogic_dataBuffer[103 : 96] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_13) begin
        dataLogic_dataBuffer[111 : 104] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_14) begin
        dataLogic_dataBuffer[119 : 112] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_15) begin
        dataLogic_dataBuffer[127 : 120] <= io_input_w_payload_data[31 : 24];
      end
    end
    if(cmdLogic_dataFork_fire_1) begin
      dataLogic_byteCounter <= cmdLogic_dataFork_payload_addr[3:0];
      if(when_Axi4Upsizer_l68) begin
        dataLogic_byteCounter[0] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_1) begin
        dataLogic_byteCounter[1] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_2) begin
        dataLogic_byteCounter[2] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_3) begin
        dataLogic_byteCounter[3] <= 1'b0;
      end
      dataLogic_size <= cmdLogic_dataFork_payload_size;
      dataLogic_alwaysFire <= (! (cmdLogic_dataFork_payload_burst == 2'b01));
      dataLogic_incrementByteCounter <= (! (cmdLogic_dataFork_payload_burst == 2'b00));
    end
  end


endmodule

module Asic32To128UpsizerAxi4ReadOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_input_ar_valid,
  output reg          io_input_ar_ready,
  input      [31:0]   io_input_ar_payload_addr,
  input      [7:0]    io_input_ar_payload_id,
  input      [3:0]    io_input_ar_payload_region,
  input      [7:0]    io_input_ar_payload_len,
  input      [2:0]    io_input_ar_payload_size,
  input      [1:0]    io_input_ar_payload_burst,
  input      [0:0]    io_input_ar_payload_lock,
  input      [3:0]    io_input_ar_payload_cache,
  input      [3:0]    io_input_ar_payload_qos,
  input      [2:0]    io_input_ar_payload_prot,
  output              io_input_r_valid,
  input               io_input_r_ready,
  output     [31:0]   io_input_r_payload_data,
  output     [7:0]    io_input_r_payload_id,
  output     [1:0]    io_input_r_payload_resp,
  output              io_input_r_payload_last,
  output              io_output_ar_valid,
  input               io_output_ar_ready,
  output     [31:0]   io_output_ar_payload_addr,
  output     [7:0]    io_output_ar_payload_id,
  output     [3:0]    io_output_ar_payload_region,
  output     [7:0]    io_output_ar_payload_len,
  output reg [2:0]    io_output_ar_payload_size,
  output     [1:0]    io_output_ar_payload_burst,
  output     [0:0]    io_output_ar_payload_lock,
  output     [3:0]    io_output_ar_payload_cache,
  output     [3:0]    io_output_ar_payload_qos,
  output     [2:0]    io_output_ar_payload_prot,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [127:0]  io_output_r_payload_data,
  input      [7:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               clk,
  input               reset
);

  wire                dataLogic_cmdPush_fifo_io_pop_ready;
  wire                dataLogic_cmdPush_fifo_io_push_ready;
  wire                dataLogic_cmdPush_fifo_io_pop_valid;
  wire       [3:0]    dataLogic_cmdPush_fifo_io_pop_payload_startAt;
  wire       [3:0]    dataLogic_cmdPush_fifo_io_pop_payload_endAt;
  wire       [2:0]    dataLogic_cmdPush_fifo_io_pop_payload_size;
  wire       [7:0]    dataLogic_cmdPush_fifo_io_pop_payload_id;
  wire       [4:0]    dataLogic_cmdPush_fifo_io_occupancy;
  wire       [4:0]    dataLogic_cmdPush_fifo_io_availability;
  wire       [14:0]   _zz_cmdLogic_byteCount;
  wire       [10:0]   _zz_cmdLogic_incrLen;
  wire       [10:0]   _zz_cmdLogic_incrLen_1;
  wire       [3:0]    _zz_cmdLogic_incrLen_2;
  wire       [31:0]   _zz_dataLogic_cmdPush_payload_endAt;
  wire       [31:0]   _zz_dataLogic_cmdPush_payload_endAt_1;
  wire       [14:0]   _zz_dataLogic_cmdPush_payload_endAt_2;
  wire       [4:0]    _zz_dataLogic_byteCounterNext;
  wire       [7:0]    _zz_dataLogic_byteCounterNext_1;
  reg        [31:0]   _zz_io_input_r_payload_data;
  wire       [1:0]    _zz_io_input_r_payload_data_1;
  wire                cmdLogic_outputFork_valid;
  wire                cmdLogic_outputFork_ready;
  wire       [31:0]   cmdLogic_outputFork_payload_addr;
  wire       [7:0]    cmdLogic_outputFork_payload_id;
  wire       [3:0]    cmdLogic_outputFork_payload_region;
  wire       [7:0]    cmdLogic_outputFork_payload_len;
  wire       [2:0]    cmdLogic_outputFork_payload_size;
  wire       [1:0]    cmdLogic_outputFork_payload_burst;
  wire       [0:0]    cmdLogic_outputFork_payload_lock;
  wire       [3:0]    cmdLogic_outputFork_payload_cache;
  wire       [3:0]    cmdLogic_outputFork_payload_qos;
  wire       [2:0]    cmdLogic_outputFork_payload_prot;
  wire                cmdLogic_dataFork_valid;
  wire                cmdLogic_dataFork_ready;
  wire       [31:0]   cmdLogic_dataFork_payload_addr;
  wire       [7:0]    cmdLogic_dataFork_payload_id;
  wire       [3:0]    cmdLogic_dataFork_payload_region;
  wire       [7:0]    cmdLogic_dataFork_payload_len;
  wire       [2:0]    cmdLogic_dataFork_payload_size;
  wire       [1:0]    cmdLogic_dataFork_payload_burst;
  wire       [0:0]    cmdLogic_dataFork_payload_lock;
  wire       [3:0]    cmdLogic_dataFork_payload_cache;
  wire       [3:0]    cmdLogic_dataFork_payload_qos;
  wire       [2:0]    cmdLogic_dataFork_payload_prot;
  reg                 io_input_ar_fork2_logic_linkEnable_0;
  reg                 io_input_ar_fork2_logic_linkEnable_1;
  wire                when_Stream_l993;
  wire                when_Stream_l993_1;
  wire                cmdLogic_outputFork_fire;
  wire                cmdLogic_dataFork_fire;
  wire       [9:0]    cmdLogic_byteCount;
  wire       [6:0]    cmdLogic_incrLen;
  wire                when_Axi4Upsizer_l108;
  wire                dataLogic_cmdPush_valid;
  wire                dataLogic_cmdPush_ready;
  wire       [3:0]    dataLogic_cmdPush_payload_startAt;
  wire       [3:0]    dataLogic_cmdPush_payload_endAt;
  wire       [2:0]    dataLogic_cmdPush_payload_size;
  wire       [7:0]    dataLogic_cmdPush_payload_id;
  reg        [2:0]    dataLogic_size;
  reg                 dataLogic_busy;
  reg        [7:0]    dataLogic_id;
  reg        [3:0]    dataLogic_byteCounter;
  reg        [3:0]    dataLogic_byteCounterLast;
  wire       [4:0]    dataLogic_byteCounterNext;
  wire                readOnly_dataLogic_cmdPush_fifo_io_pop_fire;
  wire                io_input_r_fire;

  assign _zz_cmdLogic_byteCount = ({7'd0,io_input_ar_payload_len} <<< io_input_ar_payload_size);
  assign _zz_cmdLogic_incrLen = ({1'b0,cmdLogic_byteCount} + _zz_cmdLogic_incrLen_1);
  assign _zz_cmdLogic_incrLen_2 = io_input_ar_payload_addr[3 : 0];
  assign _zz_cmdLogic_incrLen_1 = {7'd0, _zz_cmdLogic_incrLen_2};
  assign _zz_dataLogic_cmdPush_payload_endAt = (cmdLogic_dataFork_payload_addr + _zz_dataLogic_cmdPush_payload_endAt_1);
  assign _zz_dataLogic_cmdPush_payload_endAt_2 = ({7'd0,cmdLogic_dataFork_payload_len} <<< cmdLogic_dataFork_payload_size);
  assign _zz_dataLogic_cmdPush_payload_endAt_1 = {17'd0, _zz_dataLogic_cmdPush_payload_endAt_2};
  assign _zz_dataLogic_byteCounterNext_1 = ({7'd0,1'b1} <<< dataLogic_size);
  assign _zz_dataLogic_byteCounterNext = _zz_dataLogic_byteCounterNext_1[4:0];
  assign _zz_io_input_r_payload_data_1 = (dataLogic_byteCounter >>> 2'd2);
  Asic32To128UpsizerStreamFifo_9c51cd082e6149aeaca9d6aed464db29 dataLogic_cmdPush_fifo (
    .io_push_valid           (dataLogic_cmdPush_valid                           ), //i
    .io_push_ready           (dataLogic_cmdPush_fifo_io_push_ready              ), //o
    .io_push_payload_startAt (dataLogic_cmdPush_payload_startAt[3:0]            ), //i
    .io_push_payload_endAt   (dataLogic_cmdPush_payload_endAt[3:0]              ), //i
    .io_push_payload_size    (dataLogic_cmdPush_payload_size[2:0]               ), //i
    .io_push_payload_id      (dataLogic_cmdPush_payload_id[7:0]                 ), //i
    .io_pop_valid            (dataLogic_cmdPush_fifo_io_pop_valid               ), //o
    .io_pop_ready            (dataLogic_cmdPush_fifo_io_pop_ready               ), //i
    .io_pop_payload_startAt  (dataLogic_cmdPush_fifo_io_pop_payload_startAt[3:0]), //o
    .io_pop_payload_endAt    (dataLogic_cmdPush_fifo_io_pop_payload_endAt[3:0]  ), //o
    .io_pop_payload_size     (dataLogic_cmdPush_fifo_io_pop_payload_size[2:0]   ), //o
    .io_pop_payload_id       (dataLogic_cmdPush_fifo_io_pop_payload_id[7:0]     ), //o
    .io_flush                (1'b0                                              ), //i
    .io_occupancy            (dataLogic_cmdPush_fifo_io_occupancy[4:0]          ), //o
    .io_availability         (dataLogic_cmdPush_fifo_io_availability[4:0]       ), //o
    .clk                     (clk                                               ), //i
    .reset                   (reset                                             )  //i
  );
  always @(*) begin
    case(_zz_io_input_r_payload_data_1)
      2'b00 : _zz_io_input_r_payload_data = io_output_r_payload_data[31 : 0];
      2'b01 : _zz_io_input_r_payload_data = io_output_r_payload_data[63 : 32];
      2'b10 : _zz_io_input_r_payload_data = io_output_r_payload_data[95 : 64];
      default : _zz_io_input_r_payload_data = io_output_r_payload_data[127 : 96];
    endcase
  end

  always @(*) begin
    io_input_ar_ready = 1'b1;
    if(when_Stream_l993) begin
      io_input_ar_ready = 1'b0;
    end
    if(when_Stream_l993_1) begin
      io_input_ar_ready = 1'b0;
    end
  end

  assign when_Stream_l993 = ((! cmdLogic_outputFork_ready) && io_input_ar_fork2_logic_linkEnable_0);
  assign when_Stream_l993_1 = ((! cmdLogic_dataFork_ready) && io_input_ar_fork2_logic_linkEnable_1);
  assign cmdLogic_outputFork_valid = (io_input_ar_valid && io_input_ar_fork2_logic_linkEnable_0);
  assign cmdLogic_outputFork_payload_addr = io_input_ar_payload_addr;
  assign cmdLogic_outputFork_payload_id = io_input_ar_payload_id;
  assign cmdLogic_outputFork_payload_region = io_input_ar_payload_region;
  assign cmdLogic_outputFork_payload_len = io_input_ar_payload_len;
  assign cmdLogic_outputFork_payload_size = io_input_ar_payload_size;
  assign cmdLogic_outputFork_payload_burst = io_input_ar_payload_burst;
  assign cmdLogic_outputFork_payload_lock = io_input_ar_payload_lock;
  assign cmdLogic_outputFork_payload_cache = io_input_ar_payload_cache;
  assign cmdLogic_outputFork_payload_qos = io_input_ar_payload_qos;
  assign cmdLogic_outputFork_payload_prot = io_input_ar_payload_prot;
  assign cmdLogic_outputFork_fire = (cmdLogic_outputFork_valid && cmdLogic_outputFork_ready);
  assign cmdLogic_dataFork_valid = (io_input_ar_valid && io_input_ar_fork2_logic_linkEnable_1);
  assign cmdLogic_dataFork_payload_addr = io_input_ar_payload_addr;
  assign cmdLogic_dataFork_payload_id = io_input_ar_payload_id;
  assign cmdLogic_dataFork_payload_region = io_input_ar_payload_region;
  assign cmdLogic_dataFork_payload_len = io_input_ar_payload_len;
  assign cmdLogic_dataFork_payload_size = io_input_ar_payload_size;
  assign cmdLogic_dataFork_payload_burst = io_input_ar_payload_burst;
  assign cmdLogic_dataFork_payload_lock = io_input_ar_payload_lock;
  assign cmdLogic_dataFork_payload_cache = io_input_ar_payload_cache;
  assign cmdLogic_dataFork_payload_qos = io_input_ar_payload_qos;
  assign cmdLogic_dataFork_payload_prot = io_input_ar_payload_prot;
  assign cmdLogic_dataFork_fire = (cmdLogic_dataFork_valid && cmdLogic_dataFork_ready);
  assign io_output_ar_valid = cmdLogic_outputFork_valid;
  assign cmdLogic_outputFork_ready = io_output_ar_ready;
  assign io_output_ar_payload_addr = cmdLogic_outputFork_payload_addr;
  assign io_output_ar_payload_region = cmdLogic_outputFork_payload_region;
  assign io_output_ar_payload_burst = cmdLogic_outputFork_payload_burst;
  assign io_output_ar_payload_lock = cmdLogic_outputFork_payload_lock;
  assign io_output_ar_payload_cache = cmdLogic_outputFork_payload_cache;
  assign io_output_ar_payload_qos = cmdLogic_outputFork_payload_qos;
  assign io_output_ar_payload_prot = cmdLogic_outputFork_payload_prot;
  assign cmdLogic_byteCount = _zz_cmdLogic_byteCount[9:0];
  assign cmdLogic_incrLen = _zz_cmdLogic_incrLen[10 : 4];
  always @(*) begin
    io_output_ar_payload_size = 3'b100;
    if(when_Axi4Upsizer_l108) begin
      io_output_ar_payload_size = io_input_ar_payload_size;
    end
  end

  assign io_output_ar_payload_len = {1'd0, cmdLogic_incrLen};
  assign io_output_ar_payload_id = 8'h00;
  assign when_Axi4Upsizer_l108 = (io_input_ar_payload_len == 8'h00);
  assign dataLogic_cmdPush_valid = cmdLogic_dataFork_valid;
  assign cmdLogic_dataFork_ready = dataLogic_cmdPush_ready;
  assign dataLogic_cmdPush_payload_startAt = cmdLogic_dataFork_payload_addr[3:0];
  assign dataLogic_cmdPush_payload_endAt = _zz_dataLogic_cmdPush_payload_endAt[3:0];
  assign dataLogic_cmdPush_payload_size = cmdLogic_dataFork_payload_size;
  assign dataLogic_cmdPush_payload_id = cmdLogic_dataFork_payload_id;
  assign dataLogic_cmdPush_ready = dataLogic_cmdPush_fifo_io_push_ready;
  assign dataLogic_byteCounterNext = ({1'b0,dataLogic_byteCounter} + _zz_dataLogic_byteCounterNext);
  assign readOnly_dataLogic_cmdPush_fifo_io_pop_fire = (dataLogic_cmdPush_fifo_io_pop_valid && dataLogic_cmdPush_fifo_io_pop_ready);
  assign dataLogic_cmdPush_fifo_io_pop_ready = (! dataLogic_busy);
  assign io_input_r_fire = (io_input_r_valid && io_input_r_ready);
  assign io_input_r_valid = (io_output_r_valid && dataLogic_busy);
  assign io_input_r_payload_last = (io_output_r_payload_last && (dataLogic_byteCounter == dataLogic_byteCounterLast));
  assign io_input_r_payload_resp = io_output_r_payload_resp;
  assign io_input_r_payload_data = _zz_io_input_r_payload_data;
  assign io_input_r_payload_id = dataLogic_id;
  assign io_output_r_ready = ((dataLogic_busy && io_input_r_ready) && (io_input_r_payload_last || dataLogic_byteCounterNext[4]));
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      io_input_ar_fork2_logic_linkEnable_0 <= 1'b1;
      io_input_ar_fork2_logic_linkEnable_1 <= 1'b1;
      dataLogic_busy <= 1'b0;
    end else begin
      if(cmdLogic_outputFork_fire) begin
        io_input_ar_fork2_logic_linkEnable_0 <= 1'b0;
      end
      if(cmdLogic_dataFork_fire) begin
        io_input_ar_fork2_logic_linkEnable_1 <= 1'b0;
      end
      if(io_input_ar_ready) begin
        io_input_ar_fork2_logic_linkEnable_0 <= 1'b1;
        io_input_ar_fork2_logic_linkEnable_1 <= 1'b1;
      end
      if(readOnly_dataLogic_cmdPush_fifo_io_pop_fire) begin
        dataLogic_busy <= 1'b1;
      end
      if(io_input_r_fire) begin
        if(io_input_r_payload_last) begin
          dataLogic_busy <= 1'b0;
        end
      end
    end
  end

  always @(posedge clk) begin
    if(readOnly_dataLogic_cmdPush_fifo_io_pop_fire) begin
      dataLogic_byteCounter <= dataLogic_cmdPush_fifo_io_pop_payload_startAt;
      dataLogic_byteCounterLast <= dataLogic_cmdPush_fifo_io_pop_payload_endAt;
      dataLogic_size <= dataLogic_cmdPush_fifo_io_pop_payload_size;
      dataLogic_id <= dataLogic_cmdPush_fifo_io_pop_payload_id;
    end
    if(io_input_r_fire) begin
      dataLogic_byteCounter <= dataLogic_byteCounterNext[3:0];
    end
  end


endmodule

module Asic32To128UpsizerStreamFifo_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_push_valid,
  output              io_push_ready,
  input      [3:0]    io_push_payload_startAt,
  input      [3:0]    io_push_payload_endAt,
  input      [2:0]    io_push_payload_size,
  input      [7:0]    io_push_payload_id,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [3:0]    io_pop_payload_startAt,
  output     [3:0]    io_pop_payload_endAt,
  output     [2:0]    io_pop_payload_size,
  output     [7:0]    io_pop_payload_id,
  input               io_flush,
  output     [4:0]    io_occupancy,
  output     [4:0]    io_availability,
  input               clk,
  input               reset
);

  reg        [18:0]   _zz_logic_ram_port0;
  wire       [3:0]    _zz_logic_pushPtr_valueNext;
  wire       [0:0]    _zz_logic_pushPtr_valueNext_1;
  wire       [3:0]    _zz_logic_popPtr_valueNext;
  wire       [0:0]    _zz_logic_popPtr_valueNext_1;
  wire                _zz__zz_logic_ram_port0;
  wire                _zz__zz_io_pop_payload_startAt;
  wire       [18:0]   _zz__zz_logic_ram_port1;
  wire       [3:0]    _zz_io_availability;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [3:0]    logic_pushPtr_valueNext;
  reg        [3:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [3:0]    logic_popPtr_valueNext;
  reg        [3:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_io_pop_valid;
  wire       [18:0]   _zz_io_pop_payload_startAt;
  wire                when_Stream_l1123;
  wire       [3:0]    logic_ptrDif;
  reg [18:0] logic_ram [0:15];

  assign _zz_logic_pushPtr_valueNext_1 = logic_pushPtr_willIncrement;
  assign _zz_logic_pushPtr_valueNext = {3'd0, _zz_logic_pushPtr_valueNext_1};
  assign _zz_logic_popPtr_valueNext_1 = logic_popPtr_willIncrement;
  assign _zz_logic_popPtr_valueNext = {3'd0, _zz_logic_popPtr_valueNext_1};
  assign _zz_io_availability = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz__zz_io_pop_payload_startAt = 1'b1;
  assign _zz__zz_logic_ram_port1 = {io_push_payload_id,{io_push_payload_size,{io_push_payload_endAt,io_push_payload_startAt}}};
  always @(posedge clk) begin
    if(_zz__zz_io_pop_payload_startAt) begin
      _zz_logic_ram_port0 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @(posedge clk) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= _zz__zz_logic_ram_port1;
    end
  end

  always @(*) begin
    _zz_1 = 1'b0;
    if(logic_pushing) begin
      _zz_1 = 1'b1;
    end
  end

  always @(*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing) begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush) begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == 4'b1111);
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @(*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_logic_pushPtr_valueNext);
    if(logic_pushPtr_willClear) begin
      logic_pushPtr_valueNext = 4'b0000;
    end
  end

  always @(*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping) begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush) begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == 4'b1111);
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @(*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_logic_popPtr_valueNext);
    if(logic_popPtr_willClear) begin
      logic_popPtr_valueNext = 4'b0000;
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_io_pop_valid && (! logic_full))));
  assign _zz_io_pop_payload_startAt = _zz_logic_ram_port0;
  assign io_pop_payload_startAt = _zz_io_pop_payload_startAt[3 : 0];
  assign io_pop_payload_endAt = _zz_io_pop_payload_startAt[7 : 4];
  assign io_pop_payload_size = _zz_io_pop_payload_startAt[10 : 8];
  assign io_pop_payload_id = _zz_io_pop_payload_startAt[18 : 11];
  assign when_Stream_l1123 = (logic_pushing != logic_popping);
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_io_availability};
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      logic_pushPtr_value <= 4'b0000;
      logic_popPtr_value <= 4'b0000;
      logic_risingOccupancy <= 1'b0;
      _zz_io_pop_valid <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_io_pop_valid <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if(when_Stream_l1123) begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush) begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule


// Generator : SpinalHDL dev    git head : 9cdee03b276638ef8e7a948b606bb7acc6e4c8d0
// Component : Asic32To256UpsizerAxi4Upsizer_9c51cd082e6149aeaca9d6aed464db29
// Git hash  : cd16421fb7a4d44431a2445f9a92b82070ab9b8a

`timescale 1ns/1ps

module Asic32To256UpsizerAxi4Upsizer_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_input_aw_valid,
  output              io_input_aw_ready,
  input      [31:0]   io_input_aw_payload_addr,
  input      [7:0]    io_input_aw_payload_id,
  input      [3:0]    io_input_aw_payload_region,
  input      [7:0]    io_input_aw_payload_len,
  input      [2:0]    io_input_aw_payload_size,
  input      [1:0]    io_input_aw_payload_burst,
  input      [0:0]    io_input_aw_payload_lock,
  input      [3:0]    io_input_aw_payload_cache,
  input      [3:0]    io_input_aw_payload_qos,
  input      [2:0]    io_input_aw_payload_prot,
  input               io_input_w_valid,
  output              io_input_w_ready,
  input      [31:0]   io_input_w_payload_data,
  input      [3:0]    io_input_w_payload_strb,
  input               io_input_w_payload_last,
  output              io_input_b_valid,
  input               io_input_b_ready,
  output     [7:0]    io_input_b_payload_id,
  output     [1:0]    io_input_b_payload_resp,
  input               io_input_ar_valid,
  output              io_input_ar_ready,
  input      [31:0]   io_input_ar_payload_addr,
  input      [7:0]    io_input_ar_payload_id,
  input      [3:0]    io_input_ar_payload_region,
  input      [7:0]    io_input_ar_payload_len,
  input      [2:0]    io_input_ar_payload_size,
  input      [1:0]    io_input_ar_payload_burst,
  input      [0:0]    io_input_ar_payload_lock,
  input      [3:0]    io_input_ar_payload_cache,
  input      [3:0]    io_input_ar_payload_qos,
  input      [2:0]    io_input_ar_payload_prot,
  output              io_input_r_valid,
  input               io_input_r_ready,
  output     [31:0]   io_input_r_payload_data,
  output     [7:0]    io_input_r_payload_id,
  output     [1:0]    io_input_r_payload_resp,
  output              io_input_r_payload_last,
  output              io_output_aw_valid,
  input               io_output_aw_ready,
  output     [31:0]   io_output_aw_payload_addr,
  output     [7:0]    io_output_aw_payload_id,
  output     [3:0]    io_output_aw_payload_region,
  output     [7:0]    io_output_aw_payload_len,
  output     [2:0]    io_output_aw_payload_size,
  output     [1:0]    io_output_aw_payload_burst,
  output     [0:0]    io_output_aw_payload_lock,
  output     [3:0]    io_output_aw_payload_cache,
  output     [3:0]    io_output_aw_payload_qos,
  output     [2:0]    io_output_aw_payload_prot,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [255:0]  io_output_w_payload_data,
  output     [31:0]   io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [7:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  output              io_output_ar_valid,
  input               io_output_ar_ready,
  output     [31:0]   io_output_ar_payload_addr,
  output     [7:0]    io_output_ar_payload_id,
  output     [3:0]    io_output_ar_payload_region,
  output     [7:0]    io_output_ar_payload_len,
  output     [2:0]    io_output_ar_payload_size,
  output     [1:0]    io_output_ar_payload_burst,
  output     [0:0]    io_output_ar_payload_lock,
  output     [3:0]    io_output_ar_payload_cache,
  output     [3:0]    io_output_ar_payload_qos,
  output     [2:0]    io_output_ar_payload_prot,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [255:0]  io_output_r_payload_data,
  input      [7:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               clk,
  input               reset
);

  wire                readOnly_io_input_ar_ready;
  wire                readOnly_io_input_r_valid;
  wire       [31:0]   readOnly_io_input_r_payload_data;
  wire       [7:0]    readOnly_io_input_r_payload_id;
  wire       [1:0]    readOnly_io_input_r_payload_resp;
  wire                readOnly_io_input_r_payload_last;
  wire                readOnly_io_output_ar_valid;
  wire       [31:0]   readOnly_io_output_ar_payload_addr;
  wire       [7:0]    readOnly_io_output_ar_payload_id;
  wire       [3:0]    readOnly_io_output_ar_payload_region;
  wire       [7:0]    readOnly_io_output_ar_payload_len;
  wire       [2:0]    readOnly_io_output_ar_payload_size;
  wire       [1:0]    readOnly_io_output_ar_payload_burst;
  wire       [0:0]    readOnly_io_output_ar_payload_lock;
  wire       [3:0]    readOnly_io_output_ar_payload_cache;
  wire       [3:0]    readOnly_io_output_ar_payload_qos;
  wire       [2:0]    readOnly_io_output_ar_payload_prot;
  wire                readOnly_io_output_r_ready;
  wire                writeOnly_io_input_aw_ready;
  wire                writeOnly_io_input_w_ready;
  wire                writeOnly_io_input_b_valid;
  wire       [7:0]    writeOnly_io_input_b_payload_id;
  wire       [1:0]    writeOnly_io_input_b_payload_resp;
  wire                writeOnly_io_output_aw_valid;
  wire       [31:0]   writeOnly_io_output_aw_payload_addr;
  wire       [7:0]    writeOnly_io_output_aw_payload_id;
  wire       [3:0]    writeOnly_io_output_aw_payload_region;
  wire       [7:0]    writeOnly_io_output_aw_payload_len;
  wire       [2:0]    writeOnly_io_output_aw_payload_size;
  wire       [1:0]    writeOnly_io_output_aw_payload_burst;
  wire       [0:0]    writeOnly_io_output_aw_payload_lock;
  wire       [3:0]    writeOnly_io_output_aw_payload_cache;
  wire       [3:0]    writeOnly_io_output_aw_payload_qos;
  wire       [2:0]    writeOnly_io_output_aw_payload_prot;
  wire                writeOnly_io_output_w_valid;
  wire       [255:0]  writeOnly_io_output_w_payload_data;
  wire       [31:0]   writeOnly_io_output_w_payload_strb;
  wire                writeOnly_io_output_w_payload_last;
  wire                writeOnly_io_output_b_ready;

  Asic32To256UpsizerAxi4ReadOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 readOnly (
    .io_input_ar_valid           (io_input_ar_valid                        ), //i
    .io_input_ar_ready           (readOnly_io_input_ar_ready               ), //o
    .io_input_ar_payload_addr    (io_input_ar_payload_addr[31:0]           ), //i
    .io_input_ar_payload_id      (io_input_ar_payload_id[7:0]              ), //i
    .io_input_ar_payload_region  (io_input_ar_payload_region[3:0]          ), //i
    .io_input_ar_payload_len     (io_input_ar_payload_len[7:0]             ), //i
    .io_input_ar_payload_size    (io_input_ar_payload_size[2:0]            ), //i
    .io_input_ar_payload_burst   (io_input_ar_payload_burst[1:0]           ), //i
    .io_input_ar_payload_lock    (io_input_ar_payload_lock                 ), //i
    .io_input_ar_payload_cache   (io_input_ar_payload_cache[3:0]           ), //i
    .io_input_ar_payload_qos     (io_input_ar_payload_qos[3:0]             ), //i
    .io_input_ar_payload_prot    (io_input_ar_payload_prot[2:0]            ), //i
    .io_input_r_valid            (readOnly_io_input_r_valid                ), //o
    .io_input_r_ready            (io_input_r_ready                         ), //i
    .io_input_r_payload_data     (readOnly_io_input_r_payload_data[31:0]   ), //o
    .io_input_r_payload_id       (readOnly_io_input_r_payload_id[7:0]      ), //o
    .io_input_r_payload_resp     (readOnly_io_input_r_payload_resp[1:0]    ), //o
    .io_input_r_payload_last     (readOnly_io_input_r_payload_last         ), //o
    .io_output_ar_valid          (readOnly_io_output_ar_valid              ), //o
    .io_output_ar_ready          (io_output_ar_ready                       ), //i
    .io_output_ar_payload_addr   (readOnly_io_output_ar_payload_addr[31:0] ), //o
    .io_output_ar_payload_id     (readOnly_io_output_ar_payload_id[7:0]    ), //o
    .io_output_ar_payload_region (readOnly_io_output_ar_payload_region[3:0]), //o
    .io_output_ar_payload_len    (readOnly_io_output_ar_payload_len[7:0]   ), //o
    .io_output_ar_payload_size   (readOnly_io_output_ar_payload_size[2:0]  ), //o
    .io_output_ar_payload_burst  (readOnly_io_output_ar_payload_burst[1:0] ), //o
    .io_output_ar_payload_lock   (readOnly_io_output_ar_payload_lock       ), //o
    .io_output_ar_payload_cache  (readOnly_io_output_ar_payload_cache[3:0] ), //o
    .io_output_ar_payload_qos    (readOnly_io_output_ar_payload_qos[3:0]   ), //o
    .io_output_ar_payload_prot   (readOnly_io_output_ar_payload_prot[2:0]  ), //o
    .io_output_r_valid           (io_output_r_valid                        ), //i
    .io_output_r_ready           (readOnly_io_output_r_ready               ), //o
    .io_output_r_payload_data    (io_output_r_payload_data[255:0]          ), //i
    .io_output_r_payload_id      (io_output_r_payload_id[7:0]              ), //i
    .io_output_r_payload_resp    (io_output_r_payload_resp[1:0]            ), //i
    .io_output_r_payload_last    (io_output_r_payload_last                 ), //i
    .clk                         (clk                                      ), //i
    .reset                       (reset                                    )  //i
  );
  Asic32To256UpsizerAxi4WriteOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 writeOnly (
    .io_input_aw_valid           (io_input_aw_valid                         ), //i
    .io_input_aw_ready           (writeOnly_io_input_aw_ready               ), //o
    .io_input_aw_payload_addr    (io_input_aw_payload_addr[31:0]            ), //i
    .io_input_aw_payload_id      (io_input_aw_payload_id[7:0]               ), //i
    .io_input_aw_payload_region  (io_input_aw_payload_region[3:0]           ), //i
    .io_input_aw_payload_len     (io_input_aw_payload_len[7:0]              ), //i
    .io_input_aw_payload_size    (io_input_aw_payload_size[2:0]             ), //i
    .io_input_aw_payload_burst   (io_input_aw_payload_burst[1:0]            ), //i
    .io_input_aw_payload_lock    (io_input_aw_payload_lock                  ), //i
    .io_input_aw_payload_cache   (io_input_aw_payload_cache[3:0]            ), //i
    .io_input_aw_payload_qos     (io_input_aw_payload_qos[3:0]              ), //i
    .io_input_aw_payload_prot    (io_input_aw_payload_prot[2:0]             ), //i
    .io_input_w_valid            (io_input_w_valid                          ), //i
    .io_input_w_ready            (writeOnly_io_input_w_ready                ), //o
    .io_input_w_payload_data     (io_input_w_payload_data[31:0]             ), //i
    .io_input_w_payload_strb     (io_input_w_payload_strb[3:0]              ), //i
    .io_input_w_payload_last     (io_input_w_payload_last                   ), //i
    .io_input_b_valid            (writeOnly_io_input_b_valid                ), //o
    .io_input_b_ready            (io_input_b_ready                          ), //i
    .io_input_b_payload_id       (writeOnly_io_input_b_payload_id[7:0]      ), //o
    .io_input_b_payload_resp     (writeOnly_io_input_b_payload_resp[1:0]    ), //o
    .io_output_aw_valid          (writeOnly_io_output_aw_valid              ), //o
    .io_output_aw_ready          (io_output_aw_ready                        ), //i
    .io_output_aw_payload_addr   (writeOnly_io_output_aw_payload_addr[31:0] ), //o
    .io_output_aw_payload_id     (writeOnly_io_output_aw_payload_id[7:0]    ), //o
    .io_output_aw_payload_region (writeOnly_io_output_aw_payload_region[3:0]), //o
    .io_output_aw_payload_len    (writeOnly_io_output_aw_payload_len[7:0]   ), //o
    .io_output_aw_payload_size   (writeOnly_io_output_aw_payload_size[2:0]  ), //o
    .io_output_aw_payload_burst  (writeOnly_io_output_aw_payload_burst[1:0] ), //o
    .io_output_aw_payload_lock   (writeOnly_io_output_aw_payload_lock       ), //o
    .io_output_aw_payload_cache  (writeOnly_io_output_aw_payload_cache[3:0] ), //o
    .io_output_aw_payload_qos    (writeOnly_io_output_aw_payload_qos[3:0]   ), //o
    .io_output_aw_payload_prot   (writeOnly_io_output_aw_payload_prot[2:0]  ), //o
    .io_output_w_valid           (writeOnly_io_output_w_valid               ), //o
    .io_output_w_ready           (io_output_w_ready                         ), //i
    .io_output_w_payload_data    (writeOnly_io_output_w_payload_data[255:0] ), //o
    .io_output_w_payload_strb    (writeOnly_io_output_w_payload_strb[31:0]  ), //o
    .io_output_w_payload_last    (writeOnly_io_output_w_payload_last        ), //o
    .io_output_b_valid           (io_output_b_valid                         ), //i
    .io_output_b_ready           (writeOnly_io_output_b_ready               ), //o
    .io_output_b_payload_id      (io_output_b_payload_id[7:0]               ), //i
    .io_output_b_payload_resp    (io_output_b_payload_resp[1:0]             ), //i
    .clk                         (clk                                       ), //i
    .reset                       (reset                                     )  //i
  );
  assign io_input_ar_ready = readOnly_io_input_ar_ready;
  assign io_input_r_valid = readOnly_io_input_r_valid;
  assign io_input_r_payload_data = readOnly_io_input_r_payload_data;
  assign io_input_r_payload_id = readOnly_io_input_r_payload_id;
  assign io_input_r_payload_resp = readOnly_io_input_r_payload_resp;
  assign io_input_r_payload_last = readOnly_io_input_r_payload_last;
  assign io_input_aw_ready = writeOnly_io_input_aw_ready;
  assign io_input_w_ready = writeOnly_io_input_w_ready;
  assign io_input_b_valid = writeOnly_io_input_b_valid;
  assign io_input_b_payload_id = writeOnly_io_input_b_payload_id;
  assign io_input_b_payload_resp = writeOnly_io_input_b_payload_resp;
  assign io_output_ar_valid = readOnly_io_output_ar_valid;
  assign io_output_ar_payload_addr = readOnly_io_output_ar_payload_addr;
  assign io_output_ar_payload_id = readOnly_io_output_ar_payload_id;
  assign io_output_ar_payload_region = readOnly_io_output_ar_payload_region;
  assign io_output_ar_payload_len = readOnly_io_output_ar_payload_len;
  assign io_output_ar_payload_size = readOnly_io_output_ar_payload_size;
  assign io_output_ar_payload_burst = readOnly_io_output_ar_payload_burst;
  assign io_output_ar_payload_lock = readOnly_io_output_ar_payload_lock;
  assign io_output_ar_payload_cache = readOnly_io_output_ar_payload_cache;
  assign io_output_ar_payload_qos = readOnly_io_output_ar_payload_qos;
  assign io_output_ar_payload_prot = readOnly_io_output_ar_payload_prot;
  assign io_output_r_ready = readOnly_io_output_r_ready;
  assign io_output_aw_valid = writeOnly_io_output_aw_valid;
  assign io_output_aw_payload_addr = writeOnly_io_output_aw_payload_addr;
  assign io_output_aw_payload_id = writeOnly_io_output_aw_payload_id;
  assign io_output_aw_payload_region = writeOnly_io_output_aw_payload_region;
  assign io_output_aw_payload_len = writeOnly_io_output_aw_payload_len;
  assign io_output_aw_payload_size = writeOnly_io_output_aw_payload_size;
  assign io_output_aw_payload_burst = writeOnly_io_output_aw_payload_burst;
  assign io_output_aw_payload_lock = writeOnly_io_output_aw_payload_lock;
  assign io_output_aw_payload_cache = writeOnly_io_output_aw_payload_cache;
  assign io_output_aw_payload_qos = writeOnly_io_output_aw_payload_qos;
  assign io_output_aw_payload_prot = writeOnly_io_output_aw_payload_prot;
  assign io_output_w_valid = writeOnly_io_output_w_valid;
  assign io_output_w_payload_data = writeOnly_io_output_w_payload_data;
  assign io_output_w_payload_strb = writeOnly_io_output_w_payload_strb;
  assign io_output_w_payload_last = writeOnly_io_output_w_payload_last;
  assign io_output_b_ready = writeOnly_io_output_b_ready;

endmodule

module Asic32To256UpsizerAxi4WriteOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_input_aw_valid,
  output reg          io_input_aw_ready,
  input      [31:0]   io_input_aw_payload_addr,
  input      [7:0]    io_input_aw_payload_id,
  input      [3:0]    io_input_aw_payload_region,
  input      [7:0]    io_input_aw_payload_len,
  input      [2:0]    io_input_aw_payload_size,
  input      [1:0]    io_input_aw_payload_burst,
  input      [0:0]    io_input_aw_payload_lock,
  input      [3:0]    io_input_aw_payload_cache,
  input      [3:0]    io_input_aw_payload_qos,
  input      [2:0]    io_input_aw_payload_prot,
  input               io_input_w_valid,
  output              io_input_w_ready,
  input      [31:0]   io_input_w_payload_data,
  input      [3:0]    io_input_w_payload_strb,
  input               io_input_w_payload_last,
  output              io_input_b_valid,
  input               io_input_b_ready,
  output     [7:0]    io_input_b_payload_id,
  output     [1:0]    io_input_b_payload_resp,
  output              io_output_aw_valid,
  input               io_output_aw_ready,
  output     [31:0]   io_output_aw_payload_addr,
  output     [7:0]    io_output_aw_payload_id,
  output     [3:0]    io_output_aw_payload_region,
  output reg [7:0]    io_output_aw_payload_len,
  output reg [2:0]    io_output_aw_payload_size,
  output     [1:0]    io_output_aw_payload_burst,
  output     [0:0]    io_output_aw_payload_lock,
  output     [3:0]    io_output_aw_payload_cache,
  output     [3:0]    io_output_aw_payload_qos,
  output     [2:0]    io_output_aw_payload_prot,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [255:0]  io_output_w_payload_data,
  output     [31:0]   io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [7:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  input               clk,
  input               reset
);

  wire       [14:0]   _zz_cmdLogic_byteCount;
  wire       [10:0]   _zz_cmdLogic_incrLen;
  wire       [10:0]   _zz_cmdLogic_incrLen_1;
  wire       [4:0]    _zz_cmdLogic_incrLen_2;
  wire       [5:0]    _zz_dataLogic_byteCounterNext;
  wire       [7:0]    _zz_dataLogic_byteCounterNext_1;
  reg        [31:0]   _zz_dataLogic_byteActivity;
  wire                cmdLogic_outputFork_valid;
  wire                cmdLogic_outputFork_ready;
  wire       [31:0]   cmdLogic_outputFork_payload_addr;
  wire       [7:0]    cmdLogic_outputFork_payload_id;
  wire       [3:0]    cmdLogic_outputFork_payload_region;
  wire       [7:0]    cmdLogic_outputFork_payload_len;
  wire       [2:0]    cmdLogic_outputFork_payload_size;
  wire       [1:0]    cmdLogic_outputFork_payload_burst;
  wire       [0:0]    cmdLogic_outputFork_payload_lock;
  wire       [3:0]    cmdLogic_outputFork_payload_cache;
  wire       [3:0]    cmdLogic_outputFork_payload_qos;
  wire       [2:0]    cmdLogic_outputFork_payload_prot;
  wire                cmdLogic_dataFork_valid;
  wire                cmdLogic_dataFork_ready;
  wire       [31:0]   cmdLogic_dataFork_payload_addr;
  wire       [7:0]    cmdLogic_dataFork_payload_id;
  wire       [3:0]    cmdLogic_dataFork_payload_region;
  wire       [7:0]    cmdLogic_dataFork_payload_len;
  wire       [2:0]    cmdLogic_dataFork_payload_size;
  wire       [1:0]    cmdLogic_dataFork_payload_burst;
  wire       [0:0]    cmdLogic_dataFork_payload_lock;
  wire       [3:0]    cmdLogic_dataFork_payload_cache;
  wire       [3:0]    cmdLogic_dataFork_payload_qos;
  wire       [2:0]    cmdLogic_dataFork_payload_prot;
  reg                 io_input_aw_fork2_logic_linkEnable_0;
  reg                 io_input_aw_fork2_logic_linkEnable_1;
  wire                when_Stream_l993;
  wire                when_Stream_l993_1;
  wire                cmdLogic_outputFork_fire;
  wire                cmdLogic_dataFork_fire;
  wire       [9:0]    cmdLogic_byteCount;
  wire       [5:0]    cmdLogic_incrLen;
  wire                when_Axi4Upsizer_l21;
  wire                when_Axi4Upsizer_l24;
  reg        [4:0]    dataLogic_byteCounter;
  reg        [2:0]    dataLogic_size;
  reg                 dataLogic_outputValid;
  reg                 dataLogic_outputLast;
  reg                 dataLogic_busy;
  reg                 dataLogic_incrementByteCounter;
  reg                 dataLogic_alwaysFire;
  wire       [5:0]    dataLogic_byteCounterNext;
  reg        [255:0]  dataLogic_dataBuffer;
  reg        [31:0]   dataLogic_maskBuffer;
  wire       [31:0]   dataLogic_byteActivity;
  wire                io_output_w_fire;
  wire                io_output_w_isStall;
  wire                io_input_w_fire;
  wire                when_Axi4Upsizer_l59;
  wire                when_Axi4Upsizer_l59_1;
  wire                when_Axi4Upsizer_l59_2;
  wire                when_Axi4Upsizer_l59_3;
  wire                when_Axi4Upsizer_l59_4;
  wire                when_Axi4Upsizer_l59_5;
  wire                when_Axi4Upsizer_l59_6;
  wire                when_Axi4Upsizer_l59_7;
  wire                when_Axi4Upsizer_l59_8;
  wire                when_Axi4Upsizer_l59_9;
  wire                when_Axi4Upsizer_l59_10;
  wire                when_Axi4Upsizer_l59_11;
  wire                when_Axi4Upsizer_l59_12;
  wire                when_Axi4Upsizer_l59_13;
  wire                when_Axi4Upsizer_l59_14;
  wire                when_Axi4Upsizer_l59_15;
  wire                when_Axi4Upsizer_l59_16;
  wire                when_Axi4Upsizer_l59_17;
  wire                when_Axi4Upsizer_l59_18;
  wire                when_Axi4Upsizer_l59_19;
  wire                when_Axi4Upsizer_l59_20;
  wire                when_Axi4Upsizer_l59_21;
  wire                when_Axi4Upsizer_l59_22;
  wire                when_Axi4Upsizer_l59_23;
  wire                when_Axi4Upsizer_l59_24;
  wire                when_Axi4Upsizer_l59_25;
  wire                when_Axi4Upsizer_l59_26;
  wire                when_Axi4Upsizer_l59_27;
  wire                when_Axi4Upsizer_l59_28;
  wire                when_Axi4Upsizer_l59_29;
  wire                when_Axi4Upsizer_l59_30;
  wire                when_Axi4Upsizer_l59_31;
  wire                cmdLogic_dataFork_fire_1;
  wire                when_Axi4Upsizer_l68;
  wire                when_Axi4Upsizer_l68_1;
  wire                when_Axi4Upsizer_l68_2;
  wire                when_Axi4Upsizer_l68_3;
  wire                when_Axi4Upsizer_l68_4;

  assign _zz_cmdLogic_byteCount = ({7'd0,io_input_aw_payload_len} <<< io_input_aw_payload_size);
  assign _zz_cmdLogic_incrLen = ({1'b0,cmdLogic_byteCount} + _zz_cmdLogic_incrLen_1);
  assign _zz_cmdLogic_incrLen_2 = io_input_aw_payload_addr[4 : 0];
  assign _zz_cmdLogic_incrLen_1 = {6'd0, _zz_cmdLogic_incrLen_2};
  assign _zz_dataLogic_byteCounterNext_1 = ({7'd0,1'b1} <<< dataLogic_size);
  assign _zz_dataLogic_byteCounterNext = _zz_dataLogic_byteCounterNext_1[5:0];
  always @(*) begin
    case(dataLogic_size)
      3'b000 : _zz_dataLogic_byteActivity = 32'h00000001;
      3'b001 : _zz_dataLogic_byteActivity = 32'h00000003;
      3'b010 : _zz_dataLogic_byteActivity = 32'h0000000f;
      3'b011 : _zz_dataLogic_byteActivity = 32'h000000ff;
      default : _zz_dataLogic_byteActivity = 32'h0000ffff;
    endcase
  end

  always @(*) begin
    io_input_aw_ready = 1'b1;
    if(when_Stream_l993) begin
      io_input_aw_ready = 1'b0;
    end
    if(when_Stream_l993_1) begin
      io_input_aw_ready = 1'b0;
    end
  end

  assign when_Stream_l993 = ((! cmdLogic_outputFork_ready) && io_input_aw_fork2_logic_linkEnable_0);
  assign when_Stream_l993_1 = ((! cmdLogic_dataFork_ready) && io_input_aw_fork2_logic_linkEnable_1);
  assign cmdLogic_outputFork_valid = (io_input_aw_valid && io_input_aw_fork2_logic_linkEnable_0);
  assign cmdLogic_outputFork_payload_addr = io_input_aw_payload_addr;
  assign cmdLogic_outputFork_payload_id = io_input_aw_payload_id;
  assign cmdLogic_outputFork_payload_region = io_input_aw_payload_region;
  assign cmdLogic_outputFork_payload_len = io_input_aw_payload_len;
  assign cmdLogic_outputFork_payload_size = io_input_aw_payload_size;
  assign cmdLogic_outputFork_payload_burst = io_input_aw_payload_burst;
  assign cmdLogic_outputFork_payload_lock = io_input_aw_payload_lock;
  assign cmdLogic_outputFork_payload_cache = io_input_aw_payload_cache;
  assign cmdLogic_outputFork_payload_qos = io_input_aw_payload_qos;
  assign cmdLogic_outputFork_payload_prot = io_input_aw_payload_prot;
  assign cmdLogic_outputFork_fire = (cmdLogic_outputFork_valid && cmdLogic_outputFork_ready);
  assign cmdLogic_dataFork_valid = (io_input_aw_valid && io_input_aw_fork2_logic_linkEnable_1);
  assign cmdLogic_dataFork_payload_addr = io_input_aw_payload_addr;
  assign cmdLogic_dataFork_payload_id = io_input_aw_payload_id;
  assign cmdLogic_dataFork_payload_region = io_input_aw_payload_region;
  assign cmdLogic_dataFork_payload_len = io_input_aw_payload_len;
  assign cmdLogic_dataFork_payload_size = io_input_aw_payload_size;
  assign cmdLogic_dataFork_payload_burst = io_input_aw_payload_burst;
  assign cmdLogic_dataFork_payload_lock = io_input_aw_payload_lock;
  assign cmdLogic_dataFork_payload_cache = io_input_aw_payload_cache;
  assign cmdLogic_dataFork_payload_qos = io_input_aw_payload_qos;
  assign cmdLogic_dataFork_payload_prot = io_input_aw_payload_prot;
  assign cmdLogic_dataFork_fire = (cmdLogic_dataFork_valid && cmdLogic_dataFork_ready);
  assign io_output_aw_valid = cmdLogic_outputFork_valid;
  assign cmdLogic_outputFork_ready = io_output_aw_ready;
  assign io_output_aw_payload_addr = cmdLogic_outputFork_payload_addr;
  assign io_output_aw_payload_id = cmdLogic_outputFork_payload_id;
  assign io_output_aw_payload_region = cmdLogic_outputFork_payload_region;
  always @(*) begin
    io_output_aw_payload_len = cmdLogic_outputFork_payload_len;
    if(when_Axi4Upsizer_l21) begin
      io_output_aw_payload_len = {2'd0, cmdLogic_incrLen};
    end
  end

  always @(*) begin
    io_output_aw_payload_size = cmdLogic_outputFork_payload_size;
    if(when_Axi4Upsizer_l21) begin
      io_output_aw_payload_size = 3'b101;
      if(when_Axi4Upsizer_l24) begin
        io_output_aw_payload_size = io_input_aw_payload_size;
      end
    end
  end

  assign io_output_aw_payload_burst = cmdLogic_outputFork_payload_burst;
  assign io_output_aw_payload_lock = cmdLogic_outputFork_payload_lock;
  assign io_output_aw_payload_cache = cmdLogic_outputFork_payload_cache;
  assign io_output_aw_payload_qos = cmdLogic_outputFork_payload_qos;
  assign io_output_aw_payload_prot = cmdLogic_outputFork_payload_prot;
  assign cmdLogic_byteCount = _zz_cmdLogic_byteCount[9:0];
  assign cmdLogic_incrLen = _zz_cmdLogic_incrLen[10 : 5];
  assign when_Axi4Upsizer_l21 = (io_output_aw_payload_burst == 2'b01);
  assign when_Axi4Upsizer_l24 = (io_input_aw_payload_len == 8'h00);
  assign dataLogic_byteCounterNext = ({1'b0,dataLogic_byteCounter} + _zz_dataLogic_byteCounterNext);
  assign dataLogic_byteActivity = (_zz_dataLogic_byteActivity <<< dataLogic_byteCounter);
  assign io_output_w_fire = (io_output_w_valid && io_output_w_ready);
  assign io_output_w_valid = dataLogic_outputValid;
  assign io_output_w_isStall = (io_output_w_valid && (! io_output_w_ready));
  assign io_input_w_ready = (dataLogic_busy && (! io_output_w_isStall));
  assign io_output_w_payload_data = dataLogic_dataBuffer;
  assign io_output_w_payload_strb = dataLogic_maskBuffer;
  assign io_output_w_payload_last = dataLogic_outputLast;
  assign io_input_w_fire = (io_input_w_valid && io_input_w_ready);
  assign when_Axi4Upsizer_l59 = dataLogic_byteActivity[0];
  assign when_Axi4Upsizer_l59_1 = dataLogic_byteActivity[1];
  assign when_Axi4Upsizer_l59_2 = dataLogic_byteActivity[2];
  assign when_Axi4Upsizer_l59_3 = dataLogic_byteActivity[3];
  assign when_Axi4Upsizer_l59_4 = dataLogic_byteActivity[4];
  assign when_Axi4Upsizer_l59_5 = dataLogic_byteActivity[5];
  assign when_Axi4Upsizer_l59_6 = dataLogic_byteActivity[6];
  assign when_Axi4Upsizer_l59_7 = dataLogic_byteActivity[7];
  assign when_Axi4Upsizer_l59_8 = dataLogic_byteActivity[8];
  assign when_Axi4Upsizer_l59_9 = dataLogic_byteActivity[9];
  assign when_Axi4Upsizer_l59_10 = dataLogic_byteActivity[10];
  assign when_Axi4Upsizer_l59_11 = dataLogic_byteActivity[11];
  assign when_Axi4Upsizer_l59_12 = dataLogic_byteActivity[12];
  assign when_Axi4Upsizer_l59_13 = dataLogic_byteActivity[13];
  assign when_Axi4Upsizer_l59_14 = dataLogic_byteActivity[14];
  assign when_Axi4Upsizer_l59_15 = dataLogic_byteActivity[15];
  assign when_Axi4Upsizer_l59_16 = dataLogic_byteActivity[16];
  assign when_Axi4Upsizer_l59_17 = dataLogic_byteActivity[17];
  assign when_Axi4Upsizer_l59_18 = dataLogic_byteActivity[18];
  assign when_Axi4Upsizer_l59_19 = dataLogic_byteActivity[19];
  assign when_Axi4Upsizer_l59_20 = dataLogic_byteActivity[20];
  assign when_Axi4Upsizer_l59_21 = dataLogic_byteActivity[21];
  assign when_Axi4Upsizer_l59_22 = dataLogic_byteActivity[22];
  assign when_Axi4Upsizer_l59_23 = dataLogic_byteActivity[23];
  assign when_Axi4Upsizer_l59_24 = dataLogic_byteActivity[24];
  assign when_Axi4Upsizer_l59_25 = dataLogic_byteActivity[25];
  assign when_Axi4Upsizer_l59_26 = dataLogic_byteActivity[26];
  assign when_Axi4Upsizer_l59_27 = dataLogic_byteActivity[27];
  assign when_Axi4Upsizer_l59_28 = dataLogic_byteActivity[28];
  assign when_Axi4Upsizer_l59_29 = dataLogic_byteActivity[29];
  assign when_Axi4Upsizer_l59_30 = dataLogic_byteActivity[30];
  assign when_Axi4Upsizer_l59_31 = dataLogic_byteActivity[31];
  assign cmdLogic_dataFork_fire_1 = (cmdLogic_dataFork_valid && cmdLogic_dataFork_ready);
  assign when_Axi4Upsizer_l68 = (3'b000 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_1 = (3'b001 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_2 = (3'b010 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_3 = (3'b011 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_4 = (3'b100 < cmdLogic_dataFork_payload_size);
  assign cmdLogic_dataFork_ready = (! dataLogic_busy);
  assign io_input_b_valid = io_output_b_valid;
  assign io_output_b_ready = io_input_b_ready;
  assign io_input_b_payload_id = io_output_b_payload_id;
  assign io_input_b_payload_resp = io_output_b_payload_resp;
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      io_input_aw_fork2_logic_linkEnable_0 <= 1'b1;
      io_input_aw_fork2_logic_linkEnable_1 <= 1'b1;
      dataLogic_outputValid <= 1'b0;
      dataLogic_busy <= 1'b0;
      dataLogic_maskBuffer <= 32'h00000000;
    end else begin
      if(cmdLogic_outputFork_fire) begin
        io_input_aw_fork2_logic_linkEnable_0 <= 1'b0;
      end
      if(cmdLogic_dataFork_fire) begin
        io_input_aw_fork2_logic_linkEnable_1 <= 1'b0;
      end
      if(io_input_aw_ready) begin
        io_input_aw_fork2_logic_linkEnable_0 <= 1'b1;
        io_input_aw_fork2_logic_linkEnable_1 <= 1'b1;
      end
      if(io_output_w_ready) begin
        dataLogic_outputValid <= 1'b0;
      end
      if(io_output_w_fire) begin
        dataLogic_maskBuffer <= 32'h00000000;
      end
      if(io_input_w_fire) begin
        dataLogic_outputValid <= ((dataLogic_byteCounterNext[5] || io_input_w_payload_last) || dataLogic_alwaysFire);
        if(io_input_w_payload_last) begin
          dataLogic_busy <= 1'b0;
        end
        if(when_Axi4Upsizer_l59) begin
          dataLogic_maskBuffer[0] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_1) begin
          dataLogic_maskBuffer[1] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_2) begin
          dataLogic_maskBuffer[2] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_3) begin
          dataLogic_maskBuffer[3] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_4) begin
          dataLogic_maskBuffer[4] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_5) begin
          dataLogic_maskBuffer[5] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_6) begin
          dataLogic_maskBuffer[6] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_7) begin
          dataLogic_maskBuffer[7] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_8) begin
          dataLogic_maskBuffer[8] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_9) begin
          dataLogic_maskBuffer[9] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_10) begin
          dataLogic_maskBuffer[10] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_11) begin
          dataLogic_maskBuffer[11] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_12) begin
          dataLogic_maskBuffer[12] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_13) begin
          dataLogic_maskBuffer[13] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_14) begin
          dataLogic_maskBuffer[14] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_15) begin
          dataLogic_maskBuffer[15] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_16) begin
          dataLogic_maskBuffer[16] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_17) begin
          dataLogic_maskBuffer[17] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_18) begin
          dataLogic_maskBuffer[18] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_19) begin
          dataLogic_maskBuffer[19] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_20) begin
          dataLogic_maskBuffer[20] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_21) begin
          dataLogic_maskBuffer[21] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_22) begin
          dataLogic_maskBuffer[22] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_23) begin
          dataLogic_maskBuffer[23] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_24) begin
          dataLogic_maskBuffer[24] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_25) begin
          dataLogic_maskBuffer[25] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_26) begin
          dataLogic_maskBuffer[26] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_27) begin
          dataLogic_maskBuffer[27] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_28) begin
          dataLogic_maskBuffer[28] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_29) begin
          dataLogic_maskBuffer[29] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_30) begin
          dataLogic_maskBuffer[30] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_31) begin
          dataLogic_maskBuffer[31] <= io_input_w_payload_strb[3];
        end
      end
      if(cmdLogic_dataFork_fire_1) begin
        dataLogic_busy <= 1'b1;
      end
    end
  end

  always @(posedge clk) begin
    if(io_input_w_fire) begin
      if(dataLogic_incrementByteCounter) begin
        dataLogic_byteCounter <= dataLogic_byteCounterNext[4:0];
      end
      dataLogic_outputLast <= io_input_w_payload_last;
      if(when_Axi4Upsizer_l59) begin
        dataLogic_dataBuffer[7 : 0] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_1) begin
        dataLogic_dataBuffer[15 : 8] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_2) begin
        dataLogic_dataBuffer[23 : 16] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_3) begin
        dataLogic_dataBuffer[31 : 24] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_4) begin
        dataLogic_dataBuffer[39 : 32] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_5) begin
        dataLogic_dataBuffer[47 : 40] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_6) begin
        dataLogic_dataBuffer[55 : 48] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_7) begin
        dataLogic_dataBuffer[63 : 56] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_8) begin
        dataLogic_dataBuffer[71 : 64] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_9) begin
        dataLogic_dataBuffer[79 : 72] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_10) begin
        dataLogic_dataBuffer[87 : 80] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_11) begin
        dataLogic_dataBuffer[95 : 88] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_12) begin
        dataLogic_dataBuffer[103 : 96] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_13) begin
        dataLogic_dataBuffer[111 : 104] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_14) begin
        dataLogic_dataBuffer[119 : 112] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_15) begin
        dataLogic_dataBuffer[127 : 120] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_16) begin
        dataLogic_dataBuffer[135 : 128] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_17) begin
        dataLogic_dataBuffer[143 : 136] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_18) begin
        dataLogic_dataBuffer[151 : 144] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_19) begin
        dataLogic_dataBuffer[159 : 152] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_20) begin
        dataLogic_dataBuffer[167 : 160] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_21) begin
        dataLogic_dataBuffer[175 : 168] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_22) begin
        dataLogic_dataBuffer[183 : 176] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_23) begin
        dataLogic_dataBuffer[191 : 184] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_24) begin
        dataLogic_dataBuffer[199 : 192] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_25) begin
        dataLogic_dataBuffer[207 : 200] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_26) begin
        dataLogic_dataBuffer[215 : 208] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_27) begin
        dataLogic_dataBuffer[223 : 216] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_28) begin
        dataLogic_dataBuffer[231 : 224] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_29) begin
        dataLogic_dataBuffer[239 : 232] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_30) begin
        dataLogic_dataBuffer[247 : 240] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_31) begin
        dataLogic_dataBuffer[255 : 248] <= io_input_w_payload_data[31 : 24];
      end
    end
    if(cmdLogic_dataFork_fire_1) begin
      dataLogic_byteCounter <= cmdLogic_dataFork_payload_addr[4:0];
      if(when_Axi4Upsizer_l68) begin
        dataLogic_byteCounter[0] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_1) begin
        dataLogic_byteCounter[1] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_2) begin
        dataLogic_byteCounter[2] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_3) begin
        dataLogic_byteCounter[3] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_4) begin
        dataLogic_byteCounter[4] <= 1'b0;
      end
      dataLogic_size <= cmdLogic_dataFork_payload_size;
      dataLogic_alwaysFire <= (! (cmdLogic_dataFork_payload_burst == 2'b01));
      dataLogic_incrementByteCounter <= (! (cmdLogic_dataFork_payload_burst == 2'b00));
    end
  end


endmodule

module Asic32To256UpsizerAxi4ReadOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_input_ar_valid,
  output reg          io_input_ar_ready,
  input      [31:0]   io_input_ar_payload_addr,
  input      [7:0]    io_input_ar_payload_id,
  input      [3:0]    io_input_ar_payload_region,
  input      [7:0]    io_input_ar_payload_len,
  input      [2:0]    io_input_ar_payload_size,
  input      [1:0]    io_input_ar_payload_burst,
  input      [0:0]    io_input_ar_payload_lock,
  input      [3:0]    io_input_ar_payload_cache,
  input      [3:0]    io_input_ar_payload_qos,
  input      [2:0]    io_input_ar_payload_prot,
  output              io_input_r_valid,
  input               io_input_r_ready,
  output     [31:0]   io_input_r_payload_data,
  output     [7:0]    io_input_r_payload_id,
  output     [1:0]    io_input_r_payload_resp,
  output              io_input_r_payload_last,
  output              io_output_ar_valid,
  input               io_output_ar_ready,
  output     [31:0]   io_output_ar_payload_addr,
  output     [7:0]    io_output_ar_payload_id,
  output     [3:0]    io_output_ar_payload_region,
  output     [7:0]    io_output_ar_payload_len,
  output reg [2:0]    io_output_ar_payload_size,
  output     [1:0]    io_output_ar_payload_burst,
  output     [0:0]    io_output_ar_payload_lock,
  output     [3:0]    io_output_ar_payload_cache,
  output     [3:0]    io_output_ar_payload_qos,
  output     [2:0]    io_output_ar_payload_prot,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [255:0]  io_output_r_payload_data,
  input      [7:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               clk,
  input               reset
);

  wire                dataLogic_cmdPush_fifo_io_pop_ready;
  wire                dataLogic_cmdPush_fifo_io_push_ready;
  wire                dataLogic_cmdPush_fifo_io_pop_valid;
  wire       [4:0]    dataLogic_cmdPush_fifo_io_pop_payload_startAt;
  wire       [4:0]    dataLogic_cmdPush_fifo_io_pop_payload_endAt;
  wire       [2:0]    dataLogic_cmdPush_fifo_io_pop_payload_size;
  wire       [7:0]    dataLogic_cmdPush_fifo_io_pop_payload_id;
  wire       [4:0]    dataLogic_cmdPush_fifo_io_occupancy;
  wire       [4:0]    dataLogic_cmdPush_fifo_io_availability;
  wire       [14:0]   _zz_cmdLogic_byteCount;
  wire       [10:0]   _zz_cmdLogic_incrLen;
  wire       [10:0]   _zz_cmdLogic_incrLen_1;
  wire       [4:0]    _zz_cmdLogic_incrLen_2;
  wire       [31:0]   _zz_dataLogic_cmdPush_payload_endAt;
  wire       [31:0]   _zz_dataLogic_cmdPush_payload_endAt_1;
  wire       [14:0]   _zz_dataLogic_cmdPush_payload_endAt_2;
  wire       [5:0]    _zz_dataLogic_byteCounterNext;
  wire       [7:0]    _zz_dataLogic_byteCounterNext_1;
  reg        [31:0]   _zz_io_input_r_payload_data;
  wire       [2:0]    _zz_io_input_r_payload_data_1;
  wire                cmdLogic_outputFork_valid;
  wire                cmdLogic_outputFork_ready;
  wire       [31:0]   cmdLogic_outputFork_payload_addr;
  wire       [7:0]    cmdLogic_outputFork_payload_id;
  wire       [3:0]    cmdLogic_outputFork_payload_region;
  wire       [7:0]    cmdLogic_outputFork_payload_len;
  wire       [2:0]    cmdLogic_outputFork_payload_size;
  wire       [1:0]    cmdLogic_outputFork_payload_burst;
  wire       [0:0]    cmdLogic_outputFork_payload_lock;
  wire       [3:0]    cmdLogic_outputFork_payload_cache;
  wire       [3:0]    cmdLogic_outputFork_payload_qos;
  wire       [2:0]    cmdLogic_outputFork_payload_prot;
  wire                cmdLogic_dataFork_valid;
  wire                cmdLogic_dataFork_ready;
  wire       [31:0]   cmdLogic_dataFork_payload_addr;
  wire       [7:0]    cmdLogic_dataFork_payload_id;
  wire       [3:0]    cmdLogic_dataFork_payload_region;
  wire       [7:0]    cmdLogic_dataFork_payload_len;
  wire       [2:0]    cmdLogic_dataFork_payload_size;
  wire       [1:0]    cmdLogic_dataFork_payload_burst;
  wire       [0:0]    cmdLogic_dataFork_payload_lock;
  wire       [3:0]    cmdLogic_dataFork_payload_cache;
  wire       [3:0]    cmdLogic_dataFork_payload_qos;
  wire       [2:0]    cmdLogic_dataFork_payload_prot;
  reg                 io_input_ar_fork2_logic_linkEnable_0;
  reg                 io_input_ar_fork2_logic_linkEnable_1;
  wire                when_Stream_l993;
  wire                when_Stream_l993_1;
  wire                cmdLogic_outputFork_fire;
  wire                cmdLogic_dataFork_fire;
  wire       [9:0]    cmdLogic_byteCount;
  wire       [5:0]    cmdLogic_incrLen;
  wire                when_Axi4Upsizer_l108;
  wire                dataLogic_cmdPush_valid;
  wire                dataLogic_cmdPush_ready;
  wire       [4:0]    dataLogic_cmdPush_payload_startAt;
  wire       [4:0]    dataLogic_cmdPush_payload_endAt;
  wire       [2:0]    dataLogic_cmdPush_payload_size;
  wire       [7:0]    dataLogic_cmdPush_payload_id;
  reg        [2:0]    dataLogic_size;
  reg                 dataLogic_busy;
  reg        [7:0]    dataLogic_id;
  reg        [4:0]    dataLogic_byteCounter;
  reg        [4:0]    dataLogic_byteCounterLast;
  wire       [5:0]    dataLogic_byteCounterNext;
  wire                readOnly_dataLogic_cmdPush_fifo_io_pop_fire;
  wire                io_input_r_fire;

  assign _zz_cmdLogic_byteCount = ({7'd0,io_input_ar_payload_len} <<< io_input_ar_payload_size);
  assign _zz_cmdLogic_incrLen = ({1'b0,cmdLogic_byteCount} + _zz_cmdLogic_incrLen_1);
  assign _zz_cmdLogic_incrLen_2 = io_input_ar_payload_addr[4 : 0];
  assign _zz_cmdLogic_incrLen_1 = {6'd0, _zz_cmdLogic_incrLen_2};
  assign _zz_dataLogic_cmdPush_payload_endAt = (cmdLogic_dataFork_payload_addr + _zz_dataLogic_cmdPush_payload_endAt_1);
  assign _zz_dataLogic_cmdPush_payload_endAt_2 = ({7'd0,cmdLogic_dataFork_payload_len} <<< cmdLogic_dataFork_payload_size);
  assign _zz_dataLogic_cmdPush_payload_endAt_1 = {17'd0, _zz_dataLogic_cmdPush_payload_endAt_2};
  assign _zz_dataLogic_byteCounterNext_1 = ({7'd0,1'b1} <<< dataLogic_size);
  assign _zz_dataLogic_byteCounterNext = _zz_dataLogic_byteCounterNext_1[5:0];
  assign _zz_io_input_r_payload_data_1 = (dataLogic_byteCounter >>> 2'd2);
  Asic32To256UpsizerStreamFifo_9c51cd082e6149aeaca9d6aed464db29 dataLogic_cmdPush_fifo (
    .io_push_valid           (dataLogic_cmdPush_valid                           ), //i
    .io_push_ready           (dataLogic_cmdPush_fifo_io_push_ready              ), //o
    .io_push_payload_startAt (dataLogic_cmdPush_payload_startAt[4:0]            ), //i
    .io_push_payload_endAt   (dataLogic_cmdPush_payload_endAt[4:0]              ), //i
    .io_push_payload_size    (dataLogic_cmdPush_payload_size[2:0]               ), //i
    .io_push_payload_id      (dataLogic_cmdPush_payload_id[7:0]                 ), //i
    .io_pop_valid            (dataLogic_cmdPush_fifo_io_pop_valid               ), //o
    .io_pop_ready            (dataLogic_cmdPush_fifo_io_pop_ready               ), //i
    .io_pop_payload_startAt  (dataLogic_cmdPush_fifo_io_pop_payload_startAt[4:0]), //o
    .io_pop_payload_endAt    (dataLogic_cmdPush_fifo_io_pop_payload_endAt[4:0]  ), //o
    .io_pop_payload_size     (dataLogic_cmdPush_fifo_io_pop_payload_size[2:0]   ), //o
    .io_pop_payload_id       (dataLogic_cmdPush_fifo_io_pop_payload_id[7:0]     ), //o
    .io_flush                (1'b0                                              ), //i
    .io_occupancy            (dataLogic_cmdPush_fifo_io_occupancy[4:0]          ), //o
    .io_availability         (dataLogic_cmdPush_fifo_io_availability[4:0]       ), //o
    .clk                     (clk                                               ), //i
    .reset                   (reset                                             )  //i
  );
  always @(*) begin
    case(_zz_io_input_r_payload_data_1)
      3'b000 : _zz_io_input_r_payload_data = io_output_r_payload_data[31 : 0];
      3'b001 : _zz_io_input_r_payload_data = io_output_r_payload_data[63 : 32];
      3'b010 : _zz_io_input_r_payload_data = io_output_r_payload_data[95 : 64];
      3'b011 : _zz_io_input_r_payload_data = io_output_r_payload_data[127 : 96];
      3'b100 : _zz_io_input_r_payload_data = io_output_r_payload_data[159 : 128];
      3'b101 : _zz_io_input_r_payload_data = io_output_r_payload_data[191 : 160];
      3'b110 : _zz_io_input_r_payload_data = io_output_r_payload_data[223 : 192];
      default : _zz_io_input_r_payload_data = io_output_r_payload_data[255 : 224];
    endcase
  end

  always @(*) begin
    io_input_ar_ready = 1'b1;
    if(when_Stream_l993) begin
      io_input_ar_ready = 1'b0;
    end
    if(when_Stream_l993_1) begin
      io_input_ar_ready = 1'b0;
    end
  end

  assign when_Stream_l993 = ((! cmdLogic_outputFork_ready) && io_input_ar_fork2_logic_linkEnable_0);
  assign when_Stream_l993_1 = ((! cmdLogic_dataFork_ready) && io_input_ar_fork2_logic_linkEnable_1);
  assign cmdLogic_outputFork_valid = (io_input_ar_valid && io_input_ar_fork2_logic_linkEnable_0);
  assign cmdLogic_outputFork_payload_addr = io_input_ar_payload_addr;
  assign cmdLogic_outputFork_payload_id = io_input_ar_payload_id;
  assign cmdLogic_outputFork_payload_region = io_input_ar_payload_region;
  assign cmdLogic_outputFork_payload_len = io_input_ar_payload_len;
  assign cmdLogic_outputFork_payload_size = io_input_ar_payload_size;
  assign cmdLogic_outputFork_payload_burst = io_input_ar_payload_burst;
  assign cmdLogic_outputFork_payload_lock = io_input_ar_payload_lock;
  assign cmdLogic_outputFork_payload_cache = io_input_ar_payload_cache;
  assign cmdLogic_outputFork_payload_qos = io_input_ar_payload_qos;
  assign cmdLogic_outputFork_payload_prot = io_input_ar_payload_prot;
  assign cmdLogic_outputFork_fire = (cmdLogic_outputFork_valid && cmdLogic_outputFork_ready);
  assign cmdLogic_dataFork_valid = (io_input_ar_valid && io_input_ar_fork2_logic_linkEnable_1);
  assign cmdLogic_dataFork_payload_addr = io_input_ar_payload_addr;
  assign cmdLogic_dataFork_payload_id = io_input_ar_payload_id;
  assign cmdLogic_dataFork_payload_region = io_input_ar_payload_region;
  assign cmdLogic_dataFork_payload_len = io_input_ar_payload_len;
  assign cmdLogic_dataFork_payload_size = io_input_ar_payload_size;
  assign cmdLogic_dataFork_payload_burst = io_input_ar_payload_burst;
  assign cmdLogic_dataFork_payload_lock = io_input_ar_payload_lock;
  assign cmdLogic_dataFork_payload_cache = io_input_ar_payload_cache;
  assign cmdLogic_dataFork_payload_qos = io_input_ar_payload_qos;
  assign cmdLogic_dataFork_payload_prot = io_input_ar_payload_prot;
  assign cmdLogic_dataFork_fire = (cmdLogic_dataFork_valid && cmdLogic_dataFork_ready);
  assign io_output_ar_valid = cmdLogic_outputFork_valid;
  assign cmdLogic_outputFork_ready = io_output_ar_ready;
  assign io_output_ar_payload_addr = cmdLogic_outputFork_payload_addr;
  assign io_output_ar_payload_region = cmdLogic_outputFork_payload_region;
  assign io_output_ar_payload_burst = cmdLogic_outputFork_payload_burst;
  assign io_output_ar_payload_lock = cmdLogic_outputFork_payload_lock;
  assign io_output_ar_payload_cache = cmdLogic_outputFork_payload_cache;
  assign io_output_ar_payload_qos = cmdLogic_outputFork_payload_qos;
  assign io_output_ar_payload_prot = cmdLogic_outputFork_payload_prot;
  assign cmdLogic_byteCount = _zz_cmdLogic_byteCount[9:0];
  assign cmdLogic_incrLen = _zz_cmdLogic_incrLen[10 : 5];
  always @(*) begin
    io_output_ar_payload_size = 3'b101;
    if(when_Axi4Upsizer_l108) begin
      io_output_ar_payload_size = io_input_ar_payload_size;
    end
  end

  assign io_output_ar_payload_len = {2'd0, cmdLogic_incrLen};
  assign io_output_ar_payload_id = 8'h00;
  assign when_Axi4Upsizer_l108 = (io_input_ar_payload_len == 8'h00);
  assign dataLogic_cmdPush_valid = cmdLogic_dataFork_valid;
  assign cmdLogic_dataFork_ready = dataLogic_cmdPush_ready;
  assign dataLogic_cmdPush_payload_startAt = cmdLogic_dataFork_payload_addr[4:0];
  assign dataLogic_cmdPush_payload_endAt = _zz_dataLogic_cmdPush_payload_endAt[4:0];
  assign dataLogic_cmdPush_payload_size = cmdLogic_dataFork_payload_size;
  assign dataLogic_cmdPush_payload_id = cmdLogic_dataFork_payload_id;
  assign dataLogic_cmdPush_ready = dataLogic_cmdPush_fifo_io_push_ready;
  assign dataLogic_byteCounterNext = ({1'b0,dataLogic_byteCounter} + _zz_dataLogic_byteCounterNext);
  assign readOnly_dataLogic_cmdPush_fifo_io_pop_fire = (dataLogic_cmdPush_fifo_io_pop_valid && dataLogic_cmdPush_fifo_io_pop_ready);
  assign dataLogic_cmdPush_fifo_io_pop_ready = (! dataLogic_busy);
  assign io_input_r_fire = (io_input_r_valid && io_input_r_ready);
  assign io_input_r_valid = (io_output_r_valid && dataLogic_busy);
  assign io_input_r_payload_last = (io_output_r_payload_last && (dataLogic_byteCounter == dataLogic_byteCounterLast));
  assign io_input_r_payload_resp = io_output_r_payload_resp;
  assign io_input_r_payload_data = _zz_io_input_r_payload_data;
  assign io_input_r_payload_id = dataLogic_id;
  assign io_output_r_ready = ((dataLogic_busy && io_input_r_ready) && (io_input_r_payload_last || dataLogic_byteCounterNext[5]));
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      io_input_ar_fork2_logic_linkEnable_0 <= 1'b1;
      io_input_ar_fork2_logic_linkEnable_1 <= 1'b1;
      dataLogic_busy <= 1'b0;
    end else begin
      if(cmdLogic_outputFork_fire) begin
        io_input_ar_fork2_logic_linkEnable_0 <= 1'b0;
      end
      if(cmdLogic_dataFork_fire) begin
        io_input_ar_fork2_logic_linkEnable_1 <= 1'b0;
      end
      if(io_input_ar_ready) begin
        io_input_ar_fork2_logic_linkEnable_0 <= 1'b1;
        io_input_ar_fork2_logic_linkEnable_1 <= 1'b1;
      end
      if(readOnly_dataLogic_cmdPush_fifo_io_pop_fire) begin
        dataLogic_busy <= 1'b1;
      end
      if(io_input_r_fire) begin
        if(io_input_r_payload_last) begin
          dataLogic_busy <= 1'b0;
        end
      end
    end
  end

  always @(posedge clk) begin
    if(readOnly_dataLogic_cmdPush_fifo_io_pop_fire) begin
      dataLogic_byteCounter <= dataLogic_cmdPush_fifo_io_pop_payload_startAt;
      dataLogic_byteCounterLast <= dataLogic_cmdPush_fifo_io_pop_payload_endAt;
      dataLogic_size <= dataLogic_cmdPush_fifo_io_pop_payload_size;
      dataLogic_id <= dataLogic_cmdPush_fifo_io_pop_payload_id;
    end
    if(io_input_r_fire) begin
      dataLogic_byteCounter <= dataLogic_byteCounterNext[4:0];
    end
  end


endmodule

module Asic32To256UpsizerStreamFifo_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_push_valid,
  output              io_push_ready,
  input      [4:0]    io_push_payload_startAt,
  input      [4:0]    io_push_payload_endAt,
  input      [2:0]    io_push_payload_size,
  input      [7:0]    io_push_payload_id,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [4:0]    io_pop_payload_startAt,
  output     [4:0]    io_pop_payload_endAt,
  output     [2:0]    io_pop_payload_size,
  output     [7:0]    io_pop_payload_id,
  input               io_flush,
  output     [4:0]    io_occupancy,
  output     [4:0]    io_availability,
  input               clk,
  input               reset
);

  reg        [20:0]   _zz_logic_ram_port0;
  wire       [3:0]    _zz_logic_pushPtr_valueNext;
  wire       [0:0]    _zz_logic_pushPtr_valueNext_1;
  wire       [3:0]    _zz_logic_popPtr_valueNext;
  wire       [0:0]    _zz_logic_popPtr_valueNext_1;
  wire                _zz__zz_logic_ram_port0;
  wire                _zz__zz_io_pop_payload_startAt;
  wire       [20:0]   _zz__zz_logic_ram_port1;
  wire       [3:0]    _zz_io_availability;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [3:0]    logic_pushPtr_valueNext;
  reg        [3:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [3:0]    logic_popPtr_valueNext;
  reg        [3:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_io_pop_valid;
  wire       [20:0]   _zz_io_pop_payload_startAt;
  wire                when_Stream_l1123;
  wire       [3:0]    logic_ptrDif;
  reg [20:0] logic_ram [0:15];

  assign _zz_logic_pushPtr_valueNext_1 = logic_pushPtr_willIncrement;
  assign _zz_logic_pushPtr_valueNext = {3'd0, _zz_logic_pushPtr_valueNext_1};
  assign _zz_logic_popPtr_valueNext_1 = logic_popPtr_willIncrement;
  assign _zz_logic_popPtr_valueNext = {3'd0, _zz_logic_popPtr_valueNext_1};
  assign _zz_io_availability = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz__zz_io_pop_payload_startAt = 1'b1;
  assign _zz__zz_logic_ram_port1 = {io_push_payload_id,{io_push_payload_size,{io_push_payload_endAt,io_push_payload_startAt}}};
  always @(posedge clk) begin
    if(_zz__zz_io_pop_payload_startAt) begin
      _zz_logic_ram_port0 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @(posedge clk) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= _zz__zz_logic_ram_port1;
    end
  end

  always @(*) begin
    _zz_1 = 1'b0;
    if(logic_pushing) begin
      _zz_1 = 1'b1;
    end
  end

  always @(*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing) begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush) begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == 4'b1111);
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @(*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_logic_pushPtr_valueNext);
    if(logic_pushPtr_willClear) begin
      logic_pushPtr_valueNext = 4'b0000;
    end
  end

  always @(*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping) begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush) begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == 4'b1111);
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @(*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_logic_popPtr_valueNext);
    if(logic_popPtr_willClear) begin
      logic_popPtr_valueNext = 4'b0000;
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_io_pop_valid && (! logic_full))));
  assign _zz_io_pop_payload_startAt = _zz_logic_ram_port0;
  assign io_pop_payload_startAt = _zz_io_pop_payload_startAt[4 : 0];
  assign io_pop_payload_endAt = _zz_io_pop_payload_startAt[9 : 5];
  assign io_pop_payload_size = _zz_io_pop_payload_startAt[12 : 10];
  assign io_pop_payload_id = _zz_io_pop_payload_startAt[20 : 13];
  assign when_Stream_l1123 = (logic_pushing != logic_popping);
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_io_availability};
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      logic_pushPtr_value <= 4'b0000;
      logic_popPtr_value <= 4'b0000;
      logic_risingOccupancy <= 1'b0;
      _zz_io_pop_valid <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_io_pop_valid <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if(when_Stream_l1123) begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush) begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule


// Generator : SpinalHDL dev    git head : 9cdee03b276638ef8e7a948b606bb7acc6e4c8d0
// Component : Asic32To512UpsizerAxi4Upsizer_9c51cd082e6149aeaca9d6aed464db29
// Git hash  : cd16421fb7a4d44431a2445f9a92b82070ab9b8a

`timescale 1ns/1ps

module Asic32To512UpsizerAxi4Upsizer_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_input_aw_valid,
  output              io_input_aw_ready,
  input      [31:0]   io_input_aw_payload_addr,
  input      [7:0]    io_input_aw_payload_id,
  input      [3:0]    io_input_aw_payload_region,
  input      [7:0]    io_input_aw_payload_len,
  input      [2:0]    io_input_aw_payload_size,
  input      [1:0]    io_input_aw_payload_burst,
  input      [0:0]    io_input_aw_payload_lock,
  input      [3:0]    io_input_aw_payload_cache,
  input      [3:0]    io_input_aw_payload_qos,
  input      [2:0]    io_input_aw_payload_prot,
  input               io_input_w_valid,
  output              io_input_w_ready,
  input      [31:0]   io_input_w_payload_data,
  input      [3:0]    io_input_w_payload_strb,
  input               io_input_w_payload_last,
  output              io_input_b_valid,
  input               io_input_b_ready,
  output     [7:0]    io_input_b_payload_id,
  output     [1:0]    io_input_b_payload_resp,
  input               io_input_ar_valid,
  output              io_input_ar_ready,
  input      [31:0]   io_input_ar_payload_addr,
  input      [7:0]    io_input_ar_payload_id,
  input      [3:0]    io_input_ar_payload_region,
  input      [7:0]    io_input_ar_payload_len,
  input      [2:0]    io_input_ar_payload_size,
  input      [1:0]    io_input_ar_payload_burst,
  input      [0:0]    io_input_ar_payload_lock,
  input      [3:0]    io_input_ar_payload_cache,
  input      [3:0]    io_input_ar_payload_qos,
  input      [2:0]    io_input_ar_payload_prot,
  output              io_input_r_valid,
  input               io_input_r_ready,
  output     [31:0]   io_input_r_payload_data,
  output     [7:0]    io_input_r_payload_id,
  output     [1:0]    io_input_r_payload_resp,
  output              io_input_r_payload_last,
  output              io_output_aw_valid,
  input               io_output_aw_ready,
  output     [31:0]   io_output_aw_payload_addr,
  output     [7:0]    io_output_aw_payload_id,
  output     [3:0]    io_output_aw_payload_region,
  output     [7:0]    io_output_aw_payload_len,
  output     [2:0]    io_output_aw_payload_size,
  output     [1:0]    io_output_aw_payload_burst,
  output     [0:0]    io_output_aw_payload_lock,
  output     [3:0]    io_output_aw_payload_cache,
  output     [3:0]    io_output_aw_payload_qos,
  output     [2:0]    io_output_aw_payload_prot,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [511:0]  io_output_w_payload_data,
  output     [63:0]   io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [7:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  output              io_output_ar_valid,
  input               io_output_ar_ready,
  output     [31:0]   io_output_ar_payload_addr,
  output     [7:0]    io_output_ar_payload_id,
  output     [3:0]    io_output_ar_payload_region,
  output     [7:0]    io_output_ar_payload_len,
  output     [2:0]    io_output_ar_payload_size,
  output     [1:0]    io_output_ar_payload_burst,
  output     [0:0]    io_output_ar_payload_lock,
  output     [3:0]    io_output_ar_payload_cache,
  output     [3:0]    io_output_ar_payload_qos,
  output     [2:0]    io_output_ar_payload_prot,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [511:0]  io_output_r_payload_data,
  input      [7:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               clk,
  input               reset
);

  wire                readOnly_io_input_ar_ready;
  wire                readOnly_io_input_r_valid;
  wire       [31:0]   readOnly_io_input_r_payload_data;
  wire       [7:0]    readOnly_io_input_r_payload_id;
  wire       [1:0]    readOnly_io_input_r_payload_resp;
  wire                readOnly_io_input_r_payload_last;
  wire                readOnly_io_output_ar_valid;
  wire       [31:0]   readOnly_io_output_ar_payload_addr;
  wire       [7:0]    readOnly_io_output_ar_payload_id;
  wire       [3:0]    readOnly_io_output_ar_payload_region;
  wire       [7:0]    readOnly_io_output_ar_payload_len;
  wire       [2:0]    readOnly_io_output_ar_payload_size;
  wire       [1:0]    readOnly_io_output_ar_payload_burst;
  wire       [0:0]    readOnly_io_output_ar_payload_lock;
  wire       [3:0]    readOnly_io_output_ar_payload_cache;
  wire       [3:0]    readOnly_io_output_ar_payload_qos;
  wire       [2:0]    readOnly_io_output_ar_payload_prot;
  wire                readOnly_io_output_r_ready;
  wire                writeOnly_io_input_aw_ready;
  wire                writeOnly_io_input_w_ready;
  wire                writeOnly_io_input_b_valid;
  wire       [7:0]    writeOnly_io_input_b_payload_id;
  wire       [1:0]    writeOnly_io_input_b_payload_resp;
  wire                writeOnly_io_output_aw_valid;
  wire       [31:0]   writeOnly_io_output_aw_payload_addr;
  wire       [7:0]    writeOnly_io_output_aw_payload_id;
  wire       [3:0]    writeOnly_io_output_aw_payload_region;
  wire       [7:0]    writeOnly_io_output_aw_payload_len;
  wire       [2:0]    writeOnly_io_output_aw_payload_size;
  wire       [1:0]    writeOnly_io_output_aw_payload_burst;
  wire       [0:0]    writeOnly_io_output_aw_payload_lock;
  wire       [3:0]    writeOnly_io_output_aw_payload_cache;
  wire       [3:0]    writeOnly_io_output_aw_payload_qos;
  wire       [2:0]    writeOnly_io_output_aw_payload_prot;
  wire                writeOnly_io_output_w_valid;
  wire       [511:0]  writeOnly_io_output_w_payload_data;
  wire       [63:0]   writeOnly_io_output_w_payload_strb;
  wire                writeOnly_io_output_w_payload_last;
  wire                writeOnly_io_output_b_ready;

  Asic32To512UpsizerAxi4ReadOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 readOnly (
    .io_input_ar_valid           (io_input_ar_valid                        ), //i
    .io_input_ar_ready           (readOnly_io_input_ar_ready               ), //o
    .io_input_ar_payload_addr    (io_input_ar_payload_addr[31:0]           ), //i
    .io_input_ar_payload_id      (io_input_ar_payload_id[7:0]              ), //i
    .io_input_ar_payload_region  (io_input_ar_payload_region[3:0]          ), //i
    .io_input_ar_payload_len     (io_input_ar_payload_len[7:0]             ), //i
    .io_input_ar_payload_size    (io_input_ar_payload_size[2:0]            ), //i
    .io_input_ar_payload_burst   (io_input_ar_payload_burst[1:0]           ), //i
    .io_input_ar_payload_lock    (io_input_ar_payload_lock                 ), //i
    .io_input_ar_payload_cache   (io_input_ar_payload_cache[3:0]           ), //i
    .io_input_ar_payload_qos     (io_input_ar_payload_qos[3:0]             ), //i
    .io_input_ar_payload_prot    (io_input_ar_payload_prot[2:0]            ), //i
    .io_input_r_valid            (readOnly_io_input_r_valid                ), //o
    .io_input_r_ready            (io_input_r_ready                         ), //i
    .io_input_r_payload_data     (readOnly_io_input_r_payload_data[31:0]   ), //o
    .io_input_r_payload_id       (readOnly_io_input_r_payload_id[7:0]      ), //o
    .io_input_r_payload_resp     (readOnly_io_input_r_payload_resp[1:0]    ), //o
    .io_input_r_payload_last     (readOnly_io_input_r_payload_last         ), //o
    .io_output_ar_valid          (readOnly_io_output_ar_valid              ), //o
    .io_output_ar_ready          (io_output_ar_ready                       ), //i
    .io_output_ar_payload_addr   (readOnly_io_output_ar_payload_addr[31:0] ), //o
    .io_output_ar_payload_id     (readOnly_io_output_ar_payload_id[7:0]    ), //o
    .io_output_ar_payload_region (readOnly_io_output_ar_payload_region[3:0]), //o
    .io_output_ar_payload_len    (readOnly_io_output_ar_payload_len[7:0]   ), //o
    .io_output_ar_payload_size   (readOnly_io_output_ar_payload_size[2:0]  ), //o
    .io_output_ar_payload_burst  (readOnly_io_output_ar_payload_burst[1:0] ), //o
    .io_output_ar_payload_lock   (readOnly_io_output_ar_payload_lock       ), //o
    .io_output_ar_payload_cache  (readOnly_io_output_ar_payload_cache[3:0] ), //o
    .io_output_ar_payload_qos    (readOnly_io_output_ar_payload_qos[3:0]   ), //o
    .io_output_ar_payload_prot   (readOnly_io_output_ar_payload_prot[2:0]  ), //o
    .io_output_r_valid           (io_output_r_valid                        ), //i
    .io_output_r_ready           (readOnly_io_output_r_ready               ), //o
    .io_output_r_payload_data    (io_output_r_payload_data[511:0]          ), //i
    .io_output_r_payload_id      (io_output_r_payload_id[7:0]              ), //i
    .io_output_r_payload_resp    (io_output_r_payload_resp[1:0]            ), //i
    .io_output_r_payload_last    (io_output_r_payload_last                 ), //i
    .clk                         (clk                                      ), //i
    .reset                       (reset                                    )  //i
  );
  Asic32To512UpsizerAxi4WriteOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 writeOnly (
    .io_input_aw_valid           (io_input_aw_valid                         ), //i
    .io_input_aw_ready           (writeOnly_io_input_aw_ready               ), //o
    .io_input_aw_payload_addr    (io_input_aw_payload_addr[31:0]            ), //i
    .io_input_aw_payload_id      (io_input_aw_payload_id[7:0]               ), //i
    .io_input_aw_payload_region  (io_input_aw_payload_region[3:0]           ), //i
    .io_input_aw_payload_len     (io_input_aw_payload_len[7:0]              ), //i
    .io_input_aw_payload_size    (io_input_aw_payload_size[2:0]             ), //i
    .io_input_aw_payload_burst   (io_input_aw_payload_burst[1:0]            ), //i
    .io_input_aw_payload_lock    (io_input_aw_payload_lock                  ), //i
    .io_input_aw_payload_cache   (io_input_aw_payload_cache[3:0]            ), //i
    .io_input_aw_payload_qos     (io_input_aw_payload_qos[3:0]              ), //i
    .io_input_aw_payload_prot    (io_input_aw_payload_prot[2:0]             ), //i
    .io_input_w_valid            (io_input_w_valid                          ), //i
    .io_input_w_ready            (writeOnly_io_input_w_ready                ), //o
    .io_input_w_payload_data     (io_input_w_payload_data[31:0]             ), //i
    .io_input_w_payload_strb     (io_input_w_payload_strb[3:0]              ), //i
    .io_input_w_payload_last     (io_input_w_payload_last                   ), //i
    .io_input_b_valid            (writeOnly_io_input_b_valid                ), //o
    .io_input_b_ready            (io_input_b_ready                          ), //i
    .io_input_b_payload_id       (writeOnly_io_input_b_payload_id[7:0]      ), //o
    .io_input_b_payload_resp     (writeOnly_io_input_b_payload_resp[1:0]    ), //o
    .io_output_aw_valid          (writeOnly_io_output_aw_valid              ), //o
    .io_output_aw_ready          (io_output_aw_ready                        ), //i
    .io_output_aw_payload_addr   (writeOnly_io_output_aw_payload_addr[31:0] ), //o
    .io_output_aw_payload_id     (writeOnly_io_output_aw_payload_id[7:0]    ), //o
    .io_output_aw_payload_region (writeOnly_io_output_aw_payload_region[3:0]), //o
    .io_output_aw_payload_len    (writeOnly_io_output_aw_payload_len[7:0]   ), //o
    .io_output_aw_payload_size   (writeOnly_io_output_aw_payload_size[2:0]  ), //o
    .io_output_aw_payload_burst  (writeOnly_io_output_aw_payload_burst[1:0] ), //o
    .io_output_aw_payload_lock   (writeOnly_io_output_aw_payload_lock       ), //o
    .io_output_aw_payload_cache  (writeOnly_io_output_aw_payload_cache[3:0] ), //o
    .io_output_aw_payload_qos    (writeOnly_io_output_aw_payload_qos[3:0]   ), //o
    .io_output_aw_payload_prot   (writeOnly_io_output_aw_payload_prot[2:0]  ), //o
    .io_output_w_valid           (writeOnly_io_output_w_valid               ), //o
    .io_output_w_ready           (io_output_w_ready                         ), //i
    .io_output_w_payload_data    (writeOnly_io_output_w_payload_data[511:0] ), //o
    .io_output_w_payload_strb    (writeOnly_io_output_w_payload_strb[63:0]  ), //o
    .io_output_w_payload_last    (writeOnly_io_output_w_payload_last        ), //o
    .io_output_b_valid           (io_output_b_valid                         ), //i
    .io_output_b_ready           (writeOnly_io_output_b_ready               ), //o
    .io_output_b_payload_id      (io_output_b_payload_id[7:0]               ), //i
    .io_output_b_payload_resp    (io_output_b_payload_resp[1:0]             ), //i
    .clk                         (clk                                       ), //i
    .reset                       (reset                                     )  //i
  );
  assign io_input_ar_ready = readOnly_io_input_ar_ready;
  assign io_input_r_valid = readOnly_io_input_r_valid;
  assign io_input_r_payload_data = readOnly_io_input_r_payload_data;
  assign io_input_r_payload_id = readOnly_io_input_r_payload_id;
  assign io_input_r_payload_resp = readOnly_io_input_r_payload_resp;
  assign io_input_r_payload_last = readOnly_io_input_r_payload_last;
  assign io_input_aw_ready = writeOnly_io_input_aw_ready;
  assign io_input_w_ready = writeOnly_io_input_w_ready;
  assign io_input_b_valid = writeOnly_io_input_b_valid;
  assign io_input_b_payload_id = writeOnly_io_input_b_payload_id;
  assign io_input_b_payload_resp = writeOnly_io_input_b_payload_resp;
  assign io_output_ar_valid = readOnly_io_output_ar_valid;
  assign io_output_ar_payload_addr = readOnly_io_output_ar_payload_addr;
  assign io_output_ar_payload_id = readOnly_io_output_ar_payload_id;
  assign io_output_ar_payload_region = readOnly_io_output_ar_payload_region;
  assign io_output_ar_payload_len = readOnly_io_output_ar_payload_len;
  assign io_output_ar_payload_size = readOnly_io_output_ar_payload_size;
  assign io_output_ar_payload_burst = readOnly_io_output_ar_payload_burst;
  assign io_output_ar_payload_lock = readOnly_io_output_ar_payload_lock;
  assign io_output_ar_payload_cache = readOnly_io_output_ar_payload_cache;
  assign io_output_ar_payload_qos = readOnly_io_output_ar_payload_qos;
  assign io_output_ar_payload_prot = readOnly_io_output_ar_payload_prot;
  assign io_output_r_ready = readOnly_io_output_r_ready;
  assign io_output_aw_valid = writeOnly_io_output_aw_valid;
  assign io_output_aw_payload_addr = writeOnly_io_output_aw_payload_addr;
  assign io_output_aw_payload_id = writeOnly_io_output_aw_payload_id;
  assign io_output_aw_payload_region = writeOnly_io_output_aw_payload_region;
  assign io_output_aw_payload_len = writeOnly_io_output_aw_payload_len;
  assign io_output_aw_payload_size = writeOnly_io_output_aw_payload_size;
  assign io_output_aw_payload_burst = writeOnly_io_output_aw_payload_burst;
  assign io_output_aw_payload_lock = writeOnly_io_output_aw_payload_lock;
  assign io_output_aw_payload_cache = writeOnly_io_output_aw_payload_cache;
  assign io_output_aw_payload_qos = writeOnly_io_output_aw_payload_qos;
  assign io_output_aw_payload_prot = writeOnly_io_output_aw_payload_prot;
  assign io_output_w_valid = writeOnly_io_output_w_valid;
  assign io_output_w_payload_data = writeOnly_io_output_w_payload_data;
  assign io_output_w_payload_strb = writeOnly_io_output_w_payload_strb;
  assign io_output_w_payload_last = writeOnly_io_output_w_payload_last;
  assign io_output_b_ready = writeOnly_io_output_b_ready;

endmodule

module Asic32To512UpsizerAxi4WriteOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_input_aw_valid,
  output reg          io_input_aw_ready,
  input      [31:0]   io_input_aw_payload_addr,
  input      [7:0]    io_input_aw_payload_id,
  input      [3:0]    io_input_aw_payload_region,
  input      [7:0]    io_input_aw_payload_len,
  input      [2:0]    io_input_aw_payload_size,
  input      [1:0]    io_input_aw_payload_burst,
  input      [0:0]    io_input_aw_payload_lock,
  input      [3:0]    io_input_aw_payload_cache,
  input      [3:0]    io_input_aw_payload_qos,
  input      [2:0]    io_input_aw_payload_prot,
  input               io_input_w_valid,
  output              io_input_w_ready,
  input      [31:0]   io_input_w_payload_data,
  input      [3:0]    io_input_w_payload_strb,
  input               io_input_w_payload_last,
  output              io_input_b_valid,
  input               io_input_b_ready,
  output     [7:0]    io_input_b_payload_id,
  output     [1:0]    io_input_b_payload_resp,
  output              io_output_aw_valid,
  input               io_output_aw_ready,
  output     [31:0]   io_output_aw_payload_addr,
  output     [7:0]    io_output_aw_payload_id,
  output     [3:0]    io_output_aw_payload_region,
  output reg [7:0]    io_output_aw_payload_len,
  output reg [2:0]    io_output_aw_payload_size,
  output     [1:0]    io_output_aw_payload_burst,
  output     [0:0]    io_output_aw_payload_lock,
  output     [3:0]    io_output_aw_payload_cache,
  output     [3:0]    io_output_aw_payload_qos,
  output     [2:0]    io_output_aw_payload_prot,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [511:0]  io_output_w_payload_data,
  output     [63:0]   io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [7:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  input               clk,
  input               reset
);

  wire       [14:0]   _zz_cmdLogic_byteCount;
  wire       [10:0]   _zz_cmdLogic_incrLen;
  wire       [10:0]   _zz_cmdLogic_incrLen_1;
  wire       [5:0]    _zz_cmdLogic_incrLen_2;
  wire       [6:0]    _zz_dataLogic_byteCounterNext;
  wire       [7:0]    _zz_dataLogic_byteCounterNext_1;
  reg        [63:0]   _zz_dataLogic_byteActivity;
  wire                cmdLogic_outputFork_valid;
  wire                cmdLogic_outputFork_ready;
  wire       [31:0]   cmdLogic_outputFork_payload_addr;
  wire       [7:0]    cmdLogic_outputFork_payload_id;
  wire       [3:0]    cmdLogic_outputFork_payload_region;
  wire       [7:0]    cmdLogic_outputFork_payload_len;
  wire       [2:0]    cmdLogic_outputFork_payload_size;
  wire       [1:0]    cmdLogic_outputFork_payload_burst;
  wire       [0:0]    cmdLogic_outputFork_payload_lock;
  wire       [3:0]    cmdLogic_outputFork_payload_cache;
  wire       [3:0]    cmdLogic_outputFork_payload_qos;
  wire       [2:0]    cmdLogic_outputFork_payload_prot;
  wire                cmdLogic_dataFork_valid;
  wire                cmdLogic_dataFork_ready;
  wire       [31:0]   cmdLogic_dataFork_payload_addr;
  wire       [7:0]    cmdLogic_dataFork_payload_id;
  wire       [3:0]    cmdLogic_dataFork_payload_region;
  wire       [7:0]    cmdLogic_dataFork_payload_len;
  wire       [2:0]    cmdLogic_dataFork_payload_size;
  wire       [1:0]    cmdLogic_dataFork_payload_burst;
  wire       [0:0]    cmdLogic_dataFork_payload_lock;
  wire       [3:0]    cmdLogic_dataFork_payload_cache;
  wire       [3:0]    cmdLogic_dataFork_payload_qos;
  wire       [2:0]    cmdLogic_dataFork_payload_prot;
  reg                 io_input_aw_fork2_logic_linkEnable_0;
  reg                 io_input_aw_fork2_logic_linkEnable_1;
  wire                when_Stream_l993;
  wire                when_Stream_l993_1;
  wire                cmdLogic_outputFork_fire;
  wire                cmdLogic_dataFork_fire;
  wire       [9:0]    cmdLogic_byteCount;
  wire       [4:0]    cmdLogic_incrLen;
  wire                when_Axi4Upsizer_l21;
  wire                when_Axi4Upsizer_l24;
  reg        [5:0]    dataLogic_byteCounter;
  reg        [2:0]    dataLogic_size;
  reg                 dataLogic_outputValid;
  reg                 dataLogic_outputLast;
  reg                 dataLogic_busy;
  reg                 dataLogic_incrementByteCounter;
  reg                 dataLogic_alwaysFire;
  wire       [6:0]    dataLogic_byteCounterNext;
  reg        [511:0]  dataLogic_dataBuffer;
  reg        [63:0]   dataLogic_maskBuffer;
  wire       [63:0]   dataLogic_byteActivity;
  wire                io_output_w_fire;
  wire                io_output_w_isStall;
  wire                io_input_w_fire;
  wire                when_Axi4Upsizer_l59;
  wire                when_Axi4Upsizer_l59_1;
  wire                when_Axi4Upsizer_l59_2;
  wire                when_Axi4Upsizer_l59_3;
  wire                when_Axi4Upsizer_l59_4;
  wire                when_Axi4Upsizer_l59_5;
  wire                when_Axi4Upsizer_l59_6;
  wire                when_Axi4Upsizer_l59_7;
  wire                when_Axi4Upsizer_l59_8;
  wire                when_Axi4Upsizer_l59_9;
  wire                when_Axi4Upsizer_l59_10;
  wire                when_Axi4Upsizer_l59_11;
  wire                when_Axi4Upsizer_l59_12;
  wire                when_Axi4Upsizer_l59_13;
  wire                when_Axi4Upsizer_l59_14;
  wire                when_Axi4Upsizer_l59_15;
  wire                when_Axi4Upsizer_l59_16;
  wire                when_Axi4Upsizer_l59_17;
  wire                when_Axi4Upsizer_l59_18;
  wire                when_Axi4Upsizer_l59_19;
  wire                when_Axi4Upsizer_l59_20;
  wire                when_Axi4Upsizer_l59_21;
  wire                when_Axi4Upsizer_l59_22;
  wire                when_Axi4Upsizer_l59_23;
  wire                when_Axi4Upsizer_l59_24;
  wire                when_Axi4Upsizer_l59_25;
  wire                when_Axi4Upsizer_l59_26;
  wire                when_Axi4Upsizer_l59_27;
  wire                when_Axi4Upsizer_l59_28;
  wire                when_Axi4Upsizer_l59_29;
  wire                when_Axi4Upsizer_l59_30;
  wire                when_Axi4Upsizer_l59_31;
  wire                when_Axi4Upsizer_l59_32;
  wire                when_Axi4Upsizer_l59_33;
  wire                when_Axi4Upsizer_l59_34;
  wire                when_Axi4Upsizer_l59_35;
  wire                when_Axi4Upsizer_l59_36;
  wire                when_Axi4Upsizer_l59_37;
  wire                when_Axi4Upsizer_l59_38;
  wire                when_Axi4Upsizer_l59_39;
  wire                when_Axi4Upsizer_l59_40;
  wire                when_Axi4Upsizer_l59_41;
  wire                when_Axi4Upsizer_l59_42;
  wire                when_Axi4Upsizer_l59_43;
  wire                when_Axi4Upsizer_l59_44;
  wire                when_Axi4Upsizer_l59_45;
  wire                when_Axi4Upsizer_l59_46;
  wire                when_Axi4Upsizer_l59_47;
  wire                when_Axi4Upsizer_l59_48;
  wire                when_Axi4Upsizer_l59_49;
  wire                when_Axi4Upsizer_l59_50;
  wire                when_Axi4Upsizer_l59_51;
  wire                when_Axi4Upsizer_l59_52;
  wire                when_Axi4Upsizer_l59_53;
  wire                when_Axi4Upsizer_l59_54;
  wire                when_Axi4Upsizer_l59_55;
  wire                when_Axi4Upsizer_l59_56;
  wire                when_Axi4Upsizer_l59_57;
  wire                when_Axi4Upsizer_l59_58;
  wire                when_Axi4Upsizer_l59_59;
  wire                when_Axi4Upsizer_l59_60;
  wire                when_Axi4Upsizer_l59_61;
  wire                when_Axi4Upsizer_l59_62;
  wire                when_Axi4Upsizer_l59_63;
  wire                cmdLogic_dataFork_fire_1;
  wire                when_Axi4Upsizer_l68;
  wire                when_Axi4Upsizer_l68_1;
  wire                when_Axi4Upsizer_l68_2;
  wire                when_Axi4Upsizer_l68_3;
  wire                when_Axi4Upsizer_l68_4;
  wire                when_Axi4Upsizer_l68_5;

  assign _zz_cmdLogic_byteCount = ({7'd0,io_input_aw_payload_len} <<< io_input_aw_payload_size);
  assign _zz_cmdLogic_incrLen = ({1'b0,cmdLogic_byteCount} + _zz_cmdLogic_incrLen_1);
  assign _zz_cmdLogic_incrLen_2 = io_input_aw_payload_addr[5 : 0];
  assign _zz_cmdLogic_incrLen_1 = {5'd0, _zz_cmdLogic_incrLen_2};
  assign _zz_dataLogic_byteCounterNext_1 = ({7'd0,1'b1} <<< dataLogic_size);
  assign _zz_dataLogic_byteCounterNext = _zz_dataLogic_byteCounterNext_1[6:0];
  always @(*) begin
    case(dataLogic_size)
      3'b000 : _zz_dataLogic_byteActivity = 64'h0000000000000001;
      3'b001 : _zz_dataLogic_byteActivity = 64'h0000000000000003;
      3'b010 : _zz_dataLogic_byteActivity = 64'h000000000000000f;
      3'b011 : _zz_dataLogic_byteActivity = 64'h00000000000000ff;
      3'b100 : _zz_dataLogic_byteActivity = 64'h000000000000ffff;
      default : _zz_dataLogic_byteActivity = 64'h00000000ffffffff;
    endcase
  end

  always @(*) begin
    io_input_aw_ready = 1'b1;
    if(when_Stream_l993) begin
      io_input_aw_ready = 1'b0;
    end
    if(when_Stream_l993_1) begin
      io_input_aw_ready = 1'b0;
    end
  end

  assign when_Stream_l993 = ((! cmdLogic_outputFork_ready) && io_input_aw_fork2_logic_linkEnable_0);
  assign when_Stream_l993_1 = ((! cmdLogic_dataFork_ready) && io_input_aw_fork2_logic_linkEnable_1);
  assign cmdLogic_outputFork_valid = (io_input_aw_valid && io_input_aw_fork2_logic_linkEnable_0);
  assign cmdLogic_outputFork_payload_addr = io_input_aw_payload_addr;
  assign cmdLogic_outputFork_payload_id = io_input_aw_payload_id;
  assign cmdLogic_outputFork_payload_region = io_input_aw_payload_region;
  assign cmdLogic_outputFork_payload_len = io_input_aw_payload_len;
  assign cmdLogic_outputFork_payload_size = io_input_aw_payload_size;
  assign cmdLogic_outputFork_payload_burst = io_input_aw_payload_burst;
  assign cmdLogic_outputFork_payload_lock = io_input_aw_payload_lock;
  assign cmdLogic_outputFork_payload_cache = io_input_aw_payload_cache;
  assign cmdLogic_outputFork_payload_qos = io_input_aw_payload_qos;
  assign cmdLogic_outputFork_payload_prot = io_input_aw_payload_prot;
  assign cmdLogic_outputFork_fire = (cmdLogic_outputFork_valid && cmdLogic_outputFork_ready);
  assign cmdLogic_dataFork_valid = (io_input_aw_valid && io_input_aw_fork2_logic_linkEnable_1);
  assign cmdLogic_dataFork_payload_addr = io_input_aw_payload_addr;
  assign cmdLogic_dataFork_payload_id = io_input_aw_payload_id;
  assign cmdLogic_dataFork_payload_region = io_input_aw_payload_region;
  assign cmdLogic_dataFork_payload_len = io_input_aw_payload_len;
  assign cmdLogic_dataFork_payload_size = io_input_aw_payload_size;
  assign cmdLogic_dataFork_payload_burst = io_input_aw_payload_burst;
  assign cmdLogic_dataFork_payload_lock = io_input_aw_payload_lock;
  assign cmdLogic_dataFork_payload_cache = io_input_aw_payload_cache;
  assign cmdLogic_dataFork_payload_qos = io_input_aw_payload_qos;
  assign cmdLogic_dataFork_payload_prot = io_input_aw_payload_prot;
  assign cmdLogic_dataFork_fire = (cmdLogic_dataFork_valid && cmdLogic_dataFork_ready);
  assign io_output_aw_valid = cmdLogic_outputFork_valid;
  assign cmdLogic_outputFork_ready = io_output_aw_ready;
  assign io_output_aw_payload_addr = cmdLogic_outputFork_payload_addr;
  assign io_output_aw_payload_id = cmdLogic_outputFork_payload_id;
  assign io_output_aw_payload_region = cmdLogic_outputFork_payload_region;
  always @(*) begin
    io_output_aw_payload_len = cmdLogic_outputFork_payload_len;
    if(when_Axi4Upsizer_l21) begin
      io_output_aw_payload_len = {3'd0, cmdLogic_incrLen};
    end
  end

  always @(*) begin
    io_output_aw_payload_size = cmdLogic_outputFork_payload_size;
    if(when_Axi4Upsizer_l21) begin
      io_output_aw_payload_size = 3'b110;
      if(when_Axi4Upsizer_l24) begin
        io_output_aw_payload_size = io_input_aw_payload_size;
      end
    end
  end

  assign io_output_aw_payload_burst = cmdLogic_outputFork_payload_burst;
  assign io_output_aw_payload_lock = cmdLogic_outputFork_payload_lock;
  assign io_output_aw_payload_cache = cmdLogic_outputFork_payload_cache;
  assign io_output_aw_payload_qos = cmdLogic_outputFork_payload_qos;
  assign io_output_aw_payload_prot = cmdLogic_outputFork_payload_prot;
  assign cmdLogic_byteCount = _zz_cmdLogic_byteCount[9:0];
  assign cmdLogic_incrLen = _zz_cmdLogic_incrLen[10 : 6];
  assign when_Axi4Upsizer_l21 = (io_output_aw_payload_burst == 2'b01);
  assign when_Axi4Upsizer_l24 = (io_input_aw_payload_len == 8'h00);
  assign dataLogic_byteCounterNext = ({1'b0,dataLogic_byteCounter} + _zz_dataLogic_byteCounterNext);
  assign dataLogic_byteActivity = (_zz_dataLogic_byteActivity <<< dataLogic_byteCounter);
  assign io_output_w_fire = (io_output_w_valid && io_output_w_ready);
  assign io_output_w_valid = dataLogic_outputValid;
  assign io_output_w_isStall = (io_output_w_valid && (! io_output_w_ready));
  assign io_input_w_ready = (dataLogic_busy && (! io_output_w_isStall));
  assign io_output_w_payload_data = dataLogic_dataBuffer;
  assign io_output_w_payload_strb = dataLogic_maskBuffer;
  assign io_output_w_payload_last = dataLogic_outputLast;
  assign io_input_w_fire = (io_input_w_valid && io_input_w_ready);
  assign when_Axi4Upsizer_l59 = dataLogic_byteActivity[0];
  assign when_Axi4Upsizer_l59_1 = dataLogic_byteActivity[1];
  assign when_Axi4Upsizer_l59_2 = dataLogic_byteActivity[2];
  assign when_Axi4Upsizer_l59_3 = dataLogic_byteActivity[3];
  assign when_Axi4Upsizer_l59_4 = dataLogic_byteActivity[4];
  assign when_Axi4Upsizer_l59_5 = dataLogic_byteActivity[5];
  assign when_Axi4Upsizer_l59_6 = dataLogic_byteActivity[6];
  assign when_Axi4Upsizer_l59_7 = dataLogic_byteActivity[7];
  assign when_Axi4Upsizer_l59_8 = dataLogic_byteActivity[8];
  assign when_Axi4Upsizer_l59_9 = dataLogic_byteActivity[9];
  assign when_Axi4Upsizer_l59_10 = dataLogic_byteActivity[10];
  assign when_Axi4Upsizer_l59_11 = dataLogic_byteActivity[11];
  assign when_Axi4Upsizer_l59_12 = dataLogic_byteActivity[12];
  assign when_Axi4Upsizer_l59_13 = dataLogic_byteActivity[13];
  assign when_Axi4Upsizer_l59_14 = dataLogic_byteActivity[14];
  assign when_Axi4Upsizer_l59_15 = dataLogic_byteActivity[15];
  assign when_Axi4Upsizer_l59_16 = dataLogic_byteActivity[16];
  assign when_Axi4Upsizer_l59_17 = dataLogic_byteActivity[17];
  assign when_Axi4Upsizer_l59_18 = dataLogic_byteActivity[18];
  assign when_Axi4Upsizer_l59_19 = dataLogic_byteActivity[19];
  assign when_Axi4Upsizer_l59_20 = dataLogic_byteActivity[20];
  assign when_Axi4Upsizer_l59_21 = dataLogic_byteActivity[21];
  assign when_Axi4Upsizer_l59_22 = dataLogic_byteActivity[22];
  assign when_Axi4Upsizer_l59_23 = dataLogic_byteActivity[23];
  assign when_Axi4Upsizer_l59_24 = dataLogic_byteActivity[24];
  assign when_Axi4Upsizer_l59_25 = dataLogic_byteActivity[25];
  assign when_Axi4Upsizer_l59_26 = dataLogic_byteActivity[26];
  assign when_Axi4Upsizer_l59_27 = dataLogic_byteActivity[27];
  assign when_Axi4Upsizer_l59_28 = dataLogic_byteActivity[28];
  assign when_Axi4Upsizer_l59_29 = dataLogic_byteActivity[29];
  assign when_Axi4Upsizer_l59_30 = dataLogic_byteActivity[30];
  assign when_Axi4Upsizer_l59_31 = dataLogic_byteActivity[31];
  assign when_Axi4Upsizer_l59_32 = dataLogic_byteActivity[32];
  assign when_Axi4Upsizer_l59_33 = dataLogic_byteActivity[33];
  assign when_Axi4Upsizer_l59_34 = dataLogic_byteActivity[34];
  assign when_Axi4Upsizer_l59_35 = dataLogic_byteActivity[35];
  assign when_Axi4Upsizer_l59_36 = dataLogic_byteActivity[36];
  assign when_Axi4Upsizer_l59_37 = dataLogic_byteActivity[37];
  assign when_Axi4Upsizer_l59_38 = dataLogic_byteActivity[38];
  assign when_Axi4Upsizer_l59_39 = dataLogic_byteActivity[39];
  assign when_Axi4Upsizer_l59_40 = dataLogic_byteActivity[40];
  assign when_Axi4Upsizer_l59_41 = dataLogic_byteActivity[41];
  assign when_Axi4Upsizer_l59_42 = dataLogic_byteActivity[42];
  assign when_Axi4Upsizer_l59_43 = dataLogic_byteActivity[43];
  assign when_Axi4Upsizer_l59_44 = dataLogic_byteActivity[44];
  assign when_Axi4Upsizer_l59_45 = dataLogic_byteActivity[45];
  assign when_Axi4Upsizer_l59_46 = dataLogic_byteActivity[46];
  assign when_Axi4Upsizer_l59_47 = dataLogic_byteActivity[47];
  assign when_Axi4Upsizer_l59_48 = dataLogic_byteActivity[48];
  assign when_Axi4Upsizer_l59_49 = dataLogic_byteActivity[49];
  assign when_Axi4Upsizer_l59_50 = dataLogic_byteActivity[50];
  assign when_Axi4Upsizer_l59_51 = dataLogic_byteActivity[51];
  assign when_Axi4Upsizer_l59_52 = dataLogic_byteActivity[52];
  assign when_Axi4Upsizer_l59_53 = dataLogic_byteActivity[53];
  assign when_Axi4Upsizer_l59_54 = dataLogic_byteActivity[54];
  assign when_Axi4Upsizer_l59_55 = dataLogic_byteActivity[55];
  assign when_Axi4Upsizer_l59_56 = dataLogic_byteActivity[56];
  assign when_Axi4Upsizer_l59_57 = dataLogic_byteActivity[57];
  assign when_Axi4Upsizer_l59_58 = dataLogic_byteActivity[58];
  assign when_Axi4Upsizer_l59_59 = dataLogic_byteActivity[59];
  assign when_Axi4Upsizer_l59_60 = dataLogic_byteActivity[60];
  assign when_Axi4Upsizer_l59_61 = dataLogic_byteActivity[61];
  assign when_Axi4Upsizer_l59_62 = dataLogic_byteActivity[62];
  assign when_Axi4Upsizer_l59_63 = dataLogic_byteActivity[63];
  assign cmdLogic_dataFork_fire_1 = (cmdLogic_dataFork_valid && cmdLogic_dataFork_ready);
  assign when_Axi4Upsizer_l68 = (3'b000 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_1 = (3'b001 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_2 = (3'b010 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_3 = (3'b011 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_4 = (3'b100 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_5 = (3'b101 < cmdLogic_dataFork_payload_size);
  assign cmdLogic_dataFork_ready = (! dataLogic_busy);
  assign io_input_b_valid = io_output_b_valid;
  assign io_output_b_ready = io_input_b_ready;
  assign io_input_b_payload_id = io_output_b_payload_id;
  assign io_input_b_payload_resp = io_output_b_payload_resp;
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      io_input_aw_fork2_logic_linkEnable_0 <= 1'b1;
      io_input_aw_fork2_logic_linkEnable_1 <= 1'b1;
      dataLogic_outputValid <= 1'b0;
      dataLogic_busy <= 1'b0;
      dataLogic_maskBuffer <= 64'h0000000000000000;
    end else begin
      if(cmdLogic_outputFork_fire) begin
        io_input_aw_fork2_logic_linkEnable_0 <= 1'b0;
      end
      if(cmdLogic_dataFork_fire) begin
        io_input_aw_fork2_logic_linkEnable_1 <= 1'b0;
      end
      if(io_input_aw_ready) begin
        io_input_aw_fork2_logic_linkEnable_0 <= 1'b1;
        io_input_aw_fork2_logic_linkEnable_1 <= 1'b1;
      end
      if(io_output_w_ready) begin
        dataLogic_outputValid <= 1'b0;
      end
      if(io_output_w_fire) begin
        dataLogic_maskBuffer <= 64'h0000000000000000;
      end
      if(io_input_w_fire) begin
        dataLogic_outputValid <= ((dataLogic_byteCounterNext[6] || io_input_w_payload_last) || dataLogic_alwaysFire);
        if(io_input_w_payload_last) begin
          dataLogic_busy <= 1'b0;
        end
        if(when_Axi4Upsizer_l59) begin
          dataLogic_maskBuffer[0] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_1) begin
          dataLogic_maskBuffer[1] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_2) begin
          dataLogic_maskBuffer[2] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_3) begin
          dataLogic_maskBuffer[3] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_4) begin
          dataLogic_maskBuffer[4] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_5) begin
          dataLogic_maskBuffer[5] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_6) begin
          dataLogic_maskBuffer[6] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_7) begin
          dataLogic_maskBuffer[7] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_8) begin
          dataLogic_maskBuffer[8] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_9) begin
          dataLogic_maskBuffer[9] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_10) begin
          dataLogic_maskBuffer[10] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_11) begin
          dataLogic_maskBuffer[11] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_12) begin
          dataLogic_maskBuffer[12] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_13) begin
          dataLogic_maskBuffer[13] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_14) begin
          dataLogic_maskBuffer[14] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_15) begin
          dataLogic_maskBuffer[15] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_16) begin
          dataLogic_maskBuffer[16] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_17) begin
          dataLogic_maskBuffer[17] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_18) begin
          dataLogic_maskBuffer[18] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_19) begin
          dataLogic_maskBuffer[19] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_20) begin
          dataLogic_maskBuffer[20] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_21) begin
          dataLogic_maskBuffer[21] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_22) begin
          dataLogic_maskBuffer[22] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_23) begin
          dataLogic_maskBuffer[23] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_24) begin
          dataLogic_maskBuffer[24] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_25) begin
          dataLogic_maskBuffer[25] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_26) begin
          dataLogic_maskBuffer[26] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_27) begin
          dataLogic_maskBuffer[27] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_28) begin
          dataLogic_maskBuffer[28] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_29) begin
          dataLogic_maskBuffer[29] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_30) begin
          dataLogic_maskBuffer[30] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_31) begin
          dataLogic_maskBuffer[31] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_32) begin
          dataLogic_maskBuffer[32] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_33) begin
          dataLogic_maskBuffer[33] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_34) begin
          dataLogic_maskBuffer[34] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_35) begin
          dataLogic_maskBuffer[35] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_36) begin
          dataLogic_maskBuffer[36] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_37) begin
          dataLogic_maskBuffer[37] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_38) begin
          dataLogic_maskBuffer[38] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_39) begin
          dataLogic_maskBuffer[39] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_40) begin
          dataLogic_maskBuffer[40] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_41) begin
          dataLogic_maskBuffer[41] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_42) begin
          dataLogic_maskBuffer[42] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_43) begin
          dataLogic_maskBuffer[43] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_44) begin
          dataLogic_maskBuffer[44] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_45) begin
          dataLogic_maskBuffer[45] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_46) begin
          dataLogic_maskBuffer[46] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_47) begin
          dataLogic_maskBuffer[47] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_48) begin
          dataLogic_maskBuffer[48] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_49) begin
          dataLogic_maskBuffer[49] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_50) begin
          dataLogic_maskBuffer[50] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_51) begin
          dataLogic_maskBuffer[51] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_52) begin
          dataLogic_maskBuffer[52] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_53) begin
          dataLogic_maskBuffer[53] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_54) begin
          dataLogic_maskBuffer[54] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_55) begin
          dataLogic_maskBuffer[55] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_56) begin
          dataLogic_maskBuffer[56] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_57) begin
          dataLogic_maskBuffer[57] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_58) begin
          dataLogic_maskBuffer[58] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_59) begin
          dataLogic_maskBuffer[59] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_60) begin
          dataLogic_maskBuffer[60] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_61) begin
          dataLogic_maskBuffer[61] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_62) begin
          dataLogic_maskBuffer[62] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_63) begin
          dataLogic_maskBuffer[63] <= io_input_w_payload_strb[3];
        end
      end
      if(cmdLogic_dataFork_fire_1) begin
        dataLogic_busy <= 1'b1;
      end
    end
  end

  always @(posedge clk) begin
    if(io_input_w_fire) begin
      if(dataLogic_incrementByteCounter) begin
        dataLogic_byteCounter <= dataLogic_byteCounterNext[5:0];
      end
      dataLogic_outputLast <= io_input_w_payload_last;
      if(when_Axi4Upsizer_l59) begin
        dataLogic_dataBuffer[7 : 0] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_1) begin
        dataLogic_dataBuffer[15 : 8] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_2) begin
        dataLogic_dataBuffer[23 : 16] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_3) begin
        dataLogic_dataBuffer[31 : 24] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_4) begin
        dataLogic_dataBuffer[39 : 32] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_5) begin
        dataLogic_dataBuffer[47 : 40] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_6) begin
        dataLogic_dataBuffer[55 : 48] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_7) begin
        dataLogic_dataBuffer[63 : 56] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_8) begin
        dataLogic_dataBuffer[71 : 64] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_9) begin
        dataLogic_dataBuffer[79 : 72] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_10) begin
        dataLogic_dataBuffer[87 : 80] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_11) begin
        dataLogic_dataBuffer[95 : 88] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_12) begin
        dataLogic_dataBuffer[103 : 96] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_13) begin
        dataLogic_dataBuffer[111 : 104] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_14) begin
        dataLogic_dataBuffer[119 : 112] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_15) begin
        dataLogic_dataBuffer[127 : 120] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_16) begin
        dataLogic_dataBuffer[135 : 128] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_17) begin
        dataLogic_dataBuffer[143 : 136] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_18) begin
        dataLogic_dataBuffer[151 : 144] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_19) begin
        dataLogic_dataBuffer[159 : 152] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_20) begin
        dataLogic_dataBuffer[167 : 160] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_21) begin
        dataLogic_dataBuffer[175 : 168] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_22) begin
        dataLogic_dataBuffer[183 : 176] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_23) begin
        dataLogic_dataBuffer[191 : 184] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_24) begin
        dataLogic_dataBuffer[199 : 192] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_25) begin
        dataLogic_dataBuffer[207 : 200] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_26) begin
        dataLogic_dataBuffer[215 : 208] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_27) begin
        dataLogic_dataBuffer[223 : 216] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_28) begin
        dataLogic_dataBuffer[231 : 224] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_29) begin
        dataLogic_dataBuffer[239 : 232] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_30) begin
        dataLogic_dataBuffer[247 : 240] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_31) begin
        dataLogic_dataBuffer[255 : 248] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_32) begin
        dataLogic_dataBuffer[263 : 256] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_33) begin
        dataLogic_dataBuffer[271 : 264] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_34) begin
        dataLogic_dataBuffer[279 : 272] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_35) begin
        dataLogic_dataBuffer[287 : 280] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_36) begin
        dataLogic_dataBuffer[295 : 288] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_37) begin
        dataLogic_dataBuffer[303 : 296] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_38) begin
        dataLogic_dataBuffer[311 : 304] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_39) begin
        dataLogic_dataBuffer[319 : 312] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_40) begin
        dataLogic_dataBuffer[327 : 320] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_41) begin
        dataLogic_dataBuffer[335 : 328] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_42) begin
        dataLogic_dataBuffer[343 : 336] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_43) begin
        dataLogic_dataBuffer[351 : 344] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_44) begin
        dataLogic_dataBuffer[359 : 352] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_45) begin
        dataLogic_dataBuffer[367 : 360] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_46) begin
        dataLogic_dataBuffer[375 : 368] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_47) begin
        dataLogic_dataBuffer[383 : 376] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_48) begin
        dataLogic_dataBuffer[391 : 384] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_49) begin
        dataLogic_dataBuffer[399 : 392] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_50) begin
        dataLogic_dataBuffer[407 : 400] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_51) begin
        dataLogic_dataBuffer[415 : 408] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_52) begin
        dataLogic_dataBuffer[423 : 416] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_53) begin
        dataLogic_dataBuffer[431 : 424] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_54) begin
        dataLogic_dataBuffer[439 : 432] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_55) begin
        dataLogic_dataBuffer[447 : 440] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_56) begin
        dataLogic_dataBuffer[455 : 448] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_57) begin
        dataLogic_dataBuffer[463 : 456] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_58) begin
        dataLogic_dataBuffer[471 : 464] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_59) begin
        dataLogic_dataBuffer[479 : 472] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_60) begin
        dataLogic_dataBuffer[487 : 480] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_61) begin
        dataLogic_dataBuffer[495 : 488] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_62) begin
        dataLogic_dataBuffer[503 : 496] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_63) begin
        dataLogic_dataBuffer[511 : 504] <= io_input_w_payload_data[31 : 24];
      end
    end
    if(cmdLogic_dataFork_fire_1) begin
      dataLogic_byteCounter <= cmdLogic_dataFork_payload_addr[5:0];
      if(when_Axi4Upsizer_l68) begin
        dataLogic_byteCounter[0] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_1) begin
        dataLogic_byteCounter[1] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_2) begin
        dataLogic_byteCounter[2] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_3) begin
        dataLogic_byteCounter[3] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_4) begin
        dataLogic_byteCounter[4] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_5) begin
        dataLogic_byteCounter[5] <= 1'b0;
      end
      dataLogic_size <= cmdLogic_dataFork_payload_size;
      dataLogic_alwaysFire <= (! (cmdLogic_dataFork_payload_burst == 2'b01));
      dataLogic_incrementByteCounter <= (! (cmdLogic_dataFork_payload_burst == 2'b00));
    end
  end


endmodule

module Asic32To512UpsizerAxi4ReadOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_input_ar_valid,
  output reg          io_input_ar_ready,
  input      [31:0]   io_input_ar_payload_addr,
  input      [7:0]    io_input_ar_payload_id,
  input      [3:0]    io_input_ar_payload_region,
  input      [7:0]    io_input_ar_payload_len,
  input      [2:0]    io_input_ar_payload_size,
  input      [1:0]    io_input_ar_payload_burst,
  input      [0:0]    io_input_ar_payload_lock,
  input      [3:0]    io_input_ar_payload_cache,
  input      [3:0]    io_input_ar_payload_qos,
  input      [2:0]    io_input_ar_payload_prot,
  output              io_input_r_valid,
  input               io_input_r_ready,
  output     [31:0]   io_input_r_payload_data,
  output     [7:0]    io_input_r_payload_id,
  output     [1:0]    io_input_r_payload_resp,
  output              io_input_r_payload_last,
  output              io_output_ar_valid,
  input               io_output_ar_ready,
  output     [31:0]   io_output_ar_payload_addr,
  output     [7:0]    io_output_ar_payload_id,
  output     [3:0]    io_output_ar_payload_region,
  output     [7:0]    io_output_ar_payload_len,
  output reg [2:0]    io_output_ar_payload_size,
  output     [1:0]    io_output_ar_payload_burst,
  output     [0:0]    io_output_ar_payload_lock,
  output     [3:0]    io_output_ar_payload_cache,
  output     [3:0]    io_output_ar_payload_qos,
  output     [2:0]    io_output_ar_payload_prot,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [511:0]  io_output_r_payload_data,
  input      [7:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               clk,
  input               reset
);

  wire                dataLogic_cmdPush_fifo_io_pop_ready;
  wire                dataLogic_cmdPush_fifo_io_push_ready;
  wire                dataLogic_cmdPush_fifo_io_pop_valid;
  wire       [5:0]    dataLogic_cmdPush_fifo_io_pop_payload_startAt;
  wire       [5:0]    dataLogic_cmdPush_fifo_io_pop_payload_endAt;
  wire       [2:0]    dataLogic_cmdPush_fifo_io_pop_payload_size;
  wire       [7:0]    dataLogic_cmdPush_fifo_io_pop_payload_id;
  wire       [4:0]    dataLogic_cmdPush_fifo_io_occupancy;
  wire       [4:0]    dataLogic_cmdPush_fifo_io_availability;
  wire       [14:0]   _zz_cmdLogic_byteCount;
  wire       [10:0]   _zz_cmdLogic_incrLen;
  wire       [10:0]   _zz_cmdLogic_incrLen_1;
  wire       [5:0]    _zz_cmdLogic_incrLen_2;
  wire       [31:0]   _zz_dataLogic_cmdPush_payload_endAt;
  wire       [31:0]   _zz_dataLogic_cmdPush_payload_endAt_1;
  wire       [14:0]   _zz_dataLogic_cmdPush_payload_endAt_2;
  wire       [6:0]    _zz_dataLogic_byteCounterNext;
  wire       [7:0]    _zz_dataLogic_byteCounterNext_1;
  reg        [31:0]   _zz_io_input_r_payload_data;
  wire       [3:0]    _zz_io_input_r_payload_data_1;
  wire                cmdLogic_outputFork_valid;
  wire                cmdLogic_outputFork_ready;
  wire       [31:0]   cmdLogic_outputFork_payload_addr;
  wire       [7:0]    cmdLogic_outputFork_payload_id;
  wire       [3:0]    cmdLogic_outputFork_payload_region;
  wire       [7:0]    cmdLogic_outputFork_payload_len;
  wire       [2:0]    cmdLogic_outputFork_payload_size;
  wire       [1:0]    cmdLogic_outputFork_payload_burst;
  wire       [0:0]    cmdLogic_outputFork_payload_lock;
  wire       [3:0]    cmdLogic_outputFork_payload_cache;
  wire       [3:0]    cmdLogic_outputFork_payload_qos;
  wire       [2:0]    cmdLogic_outputFork_payload_prot;
  wire                cmdLogic_dataFork_valid;
  wire                cmdLogic_dataFork_ready;
  wire       [31:0]   cmdLogic_dataFork_payload_addr;
  wire       [7:0]    cmdLogic_dataFork_payload_id;
  wire       [3:0]    cmdLogic_dataFork_payload_region;
  wire       [7:0]    cmdLogic_dataFork_payload_len;
  wire       [2:0]    cmdLogic_dataFork_payload_size;
  wire       [1:0]    cmdLogic_dataFork_payload_burst;
  wire       [0:0]    cmdLogic_dataFork_payload_lock;
  wire       [3:0]    cmdLogic_dataFork_payload_cache;
  wire       [3:0]    cmdLogic_dataFork_payload_qos;
  wire       [2:0]    cmdLogic_dataFork_payload_prot;
  reg                 io_input_ar_fork2_logic_linkEnable_0;
  reg                 io_input_ar_fork2_logic_linkEnable_1;
  wire                when_Stream_l993;
  wire                when_Stream_l993_1;
  wire                cmdLogic_outputFork_fire;
  wire                cmdLogic_dataFork_fire;
  wire       [9:0]    cmdLogic_byteCount;
  wire       [4:0]    cmdLogic_incrLen;
  wire                when_Axi4Upsizer_l108;
  wire                dataLogic_cmdPush_valid;
  wire                dataLogic_cmdPush_ready;
  wire       [5:0]    dataLogic_cmdPush_payload_startAt;
  wire       [5:0]    dataLogic_cmdPush_payload_endAt;
  wire       [2:0]    dataLogic_cmdPush_payload_size;
  wire       [7:0]    dataLogic_cmdPush_payload_id;
  reg        [2:0]    dataLogic_size;
  reg                 dataLogic_busy;
  reg        [7:0]    dataLogic_id;
  reg        [5:0]    dataLogic_byteCounter;
  reg        [5:0]    dataLogic_byteCounterLast;
  wire       [6:0]    dataLogic_byteCounterNext;
  wire                readOnly_dataLogic_cmdPush_fifo_io_pop_fire;
  wire                io_input_r_fire;

  assign _zz_cmdLogic_byteCount = ({7'd0,io_input_ar_payload_len} <<< io_input_ar_payload_size);
  assign _zz_cmdLogic_incrLen = ({1'b0,cmdLogic_byteCount} + _zz_cmdLogic_incrLen_1);
  assign _zz_cmdLogic_incrLen_2 = io_input_ar_payload_addr[5 : 0];
  assign _zz_cmdLogic_incrLen_1 = {5'd0, _zz_cmdLogic_incrLen_2};
  assign _zz_dataLogic_cmdPush_payload_endAt = (cmdLogic_dataFork_payload_addr + _zz_dataLogic_cmdPush_payload_endAt_1);
  assign _zz_dataLogic_cmdPush_payload_endAt_2 = ({7'd0,cmdLogic_dataFork_payload_len} <<< cmdLogic_dataFork_payload_size);
  assign _zz_dataLogic_cmdPush_payload_endAt_1 = {17'd0, _zz_dataLogic_cmdPush_payload_endAt_2};
  assign _zz_dataLogic_byteCounterNext_1 = ({7'd0,1'b1} <<< dataLogic_size);
  assign _zz_dataLogic_byteCounterNext = _zz_dataLogic_byteCounterNext_1[6:0];
  assign _zz_io_input_r_payload_data_1 = (dataLogic_byteCounter >>> 2'd2);
  Asic32To512UpsizerStreamFifo_9c51cd082e6149aeaca9d6aed464db29 dataLogic_cmdPush_fifo (
    .io_push_valid           (dataLogic_cmdPush_valid                           ), //i
    .io_push_ready           (dataLogic_cmdPush_fifo_io_push_ready              ), //o
    .io_push_payload_startAt (dataLogic_cmdPush_payload_startAt[5:0]            ), //i
    .io_push_payload_endAt   (dataLogic_cmdPush_payload_endAt[5:0]              ), //i
    .io_push_payload_size    (dataLogic_cmdPush_payload_size[2:0]               ), //i
    .io_push_payload_id      (dataLogic_cmdPush_payload_id[7:0]                 ), //i
    .io_pop_valid            (dataLogic_cmdPush_fifo_io_pop_valid               ), //o
    .io_pop_ready            (dataLogic_cmdPush_fifo_io_pop_ready               ), //i
    .io_pop_payload_startAt  (dataLogic_cmdPush_fifo_io_pop_payload_startAt[5:0]), //o
    .io_pop_payload_endAt    (dataLogic_cmdPush_fifo_io_pop_payload_endAt[5:0]  ), //o
    .io_pop_payload_size     (dataLogic_cmdPush_fifo_io_pop_payload_size[2:0]   ), //o
    .io_pop_payload_id       (dataLogic_cmdPush_fifo_io_pop_payload_id[7:0]     ), //o
    .io_flush                (1'b0                                              ), //i
    .io_occupancy            (dataLogic_cmdPush_fifo_io_occupancy[4:0]          ), //o
    .io_availability         (dataLogic_cmdPush_fifo_io_availability[4:0]       ), //o
    .clk                     (clk                                               ), //i
    .reset                   (reset                                             )  //i
  );
  always @(*) begin
    case(_zz_io_input_r_payload_data_1)
      4'b0000 : _zz_io_input_r_payload_data = io_output_r_payload_data[31 : 0];
      4'b0001 : _zz_io_input_r_payload_data = io_output_r_payload_data[63 : 32];
      4'b0010 : _zz_io_input_r_payload_data = io_output_r_payload_data[95 : 64];
      4'b0011 : _zz_io_input_r_payload_data = io_output_r_payload_data[127 : 96];
      4'b0100 : _zz_io_input_r_payload_data = io_output_r_payload_data[159 : 128];
      4'b0101 : _zz_io_input_r_payload_data = io_output_r_payload_data[191 : 160];
      4'b0110 : _zz_io_input_r_payload_data = io_output_r_payload_data[223 : 192];
      4'b0111 : _zz_io_input_r_payload_data = io_output_r_payload_data[255 : 224];
      4'b1000 : _zz_io_input_r_payload_data = io_output_r_payload_data[287 : 256];
      4'b1001 : _zz_io_input_r_payload_data = io_output_r_payload_data[319 : 288];
      4'b1010 : _zz_io_input_r_payload_data = io_output_r_payload_data[351 : 320];
      4'b1011 : _zz_io_input_r_payload_data = io_output_r_payload_data[383 : 352];
      4'b1100 : _zz_io_input_r_payload_data = io_output_r_payload_data[415 : 384];
      4'b1101 : _zz_io_input_r_payload_data = io_output_r_payload_data[447 : 416];
      4'b1110 : _zz_io_input_r_payload_data = io_output_r_payload_data[479 : 448];
      default : _zz_io_input_r_payload_data = io_output_r_payload_data[511 : 480];
    endcase
  end

  always @(*) begin
    io_input_ar_ready = 1'b1;
    if(when_Stream_l993) begin
      io_input_ar_ready = 1'b0;
    end
    if(when_Stream_l993_1) begin
      io_input_ar_ready = 1'b0;
    end
  end

  assign when_Stream_l993 = ((! cmdLogic_outputFork_ready) && io_input_ar_fork2_logic_linkEnable_0);
  assign when_Stream_l993_1 = ((! cmdLogic_dataFork_ready) && io_input_ar_fork2_logic_linkEnable_1);
  assign cmdLogic_outputFork_valid = (io_input_ar_valid && io_input_ar_fork2_logic_linkEnable_0);
  assign cmdLogic_outputFork_payload_addr = io_input_ar_payload_addr;
  assign cmdLogic_outputFork_payload_id = io_input_ar_payload_id;
  assign cmdLogic_outputFork_payload_region = io_input_ar_payload_region;
  assign cmdLogic_outputFork_payload_len = io_input_ar_payload_len;
  assign cmdLogic_outputFork_payload_size = io_input_ar_payload_size;
  assign cmdLogic_outputFork_payload_burst = io_input_ar_payload_burst;
  assign cmdLogic_outputFork_payload_lock = io_input_ar_payload_lock;
  assign cmdLogic_outputFork_payload_cache = io_input_ar_payload_cache;
  assign cmdLogic_outputFork_payload_qos = io_input_ar_payload_qos;
  assign cmdLogic_outputFork_payload_prot = io_input_ar_payload_prot;
  assign cmdLogic_outputFork_fire = (cmdLogic_outputFork_valid && cmdLogic_outputFork_ready);
  assign cmdLogic_dataFork_valid = (io_input_ar_valid && io_input_ar_fork2_logic_linkEnable_1);
  assign cmdLogic_dataFork_payload_addr = io_input_ar_payload_addr;
  assign cmdLogic_dataFork_payload_id = io_input_ar_payload_id;
  assign cmdLogic_dataFork_payload_region = io_input_ar_payload_region;
  assign cmdLogic_dataFork_payload_len = io_input_ar_payload_len;
  assign cmdLogic_dataFork_payload_size = io_input_ar_payload_size;
  assign cmdLogic_dataFork_payload_burst = io_input_ar_payload_burst;
  assign cmdLogic_dataFork_payload_lock = io_input_ar_payload_lock;
  assign cmdLogic_dataFork_payload_cache = io_input_ar_payload_cache;
  assign cmdLogic_dataFork_payload_qos = io_input_ar_payload_qos;
  assign cmdLogic_dataFork_payload_prot = io_input_ar_payload_prot;
  assign cmdLogic_dataFork_fire = (cmdLogic_dataFork_valid && cmdLogic_dataFork_ready);
  assign io_output_ar_valid = cmdLogic_outputFork_valid;
  assign cmdLogic_outputFork_ready = io_output_ar_ready;
  assign io_output_ar_payload_addr = cmdLogic_outputFork_payload_addr;
  assign io_output_ar_payload_region = cmdLogic_outputFork_payload_region;
  assign io_output_ar_payload_burst = cmdLogic_outputFork_payload_burst;
  assign io_output_ar_payload_lock = cmdLogic_outputFork_payload_lock;
  assign io_output_ar_payload_cache = cmdLogic_outputFork_payload_cache;
  assign io_output_ar_payload_qos = cmdLogic_outputFork_payload_qos;
  assign io_output_ar_payload_prot = cmdLogic_outputFork_payload_prot;
  assign cmdLogic_byteCount = _zz_cmdLogic_byteCount[9:0];
  assign cmdLogic_incrLen = _zz_cmdLogic_incrLen[10 : 6];
  always @(*) begin
    io_output_ar_payload_size = 3'b110;
    if(when_Axi4Upsizer_l108) begin
      io_output_ar_payload_size = io_input_ar_payload_size;
    end
  end

  assign io_output_ar_payload_len = {3'd0, cmdLogic_incrLen};
  assign io_output_ar_payload_id = 8'h00;
  assign when_Axi4Upsizer_l108 = (io_input_ar_payload_len == 8'h00);
  assign dataLogic_cmdPush_valid = cmdLogic_dataFork_valid;
  assign cmdLogic_dataFork_ready = dataLogic_cmdPush_ready;
  assign dataLogic_cmdPush_payload_startAt = cmdLogic_dataFork_payload_addr[5:0];
  assign dataLogic_cmdPush_payload_endAt = _zz_dataLogic_cmdPush_payload_endAt[5:0];
  assign dataLogic_cmdPush_payload_size = cmdLogic_dataFork_payload_size;
  assign dataLogic_cmdPush_payload_id = cmdLogic_dataFork_payload_id;
  assign dataLogic_cmdPush_ready = dataLogic_cmdPush_fifo_io_push_ready;
  assign dataLogic_byteCounterNext = ({1'b0,dataLogic_byteCounter} + _zz_dataLogic_byteCounterNext);
  assign readOnly_dataLogic_cmdPush_fifo_io_pop_fire = (dataLogic_cmdPush_fifo_io_pop_valid && dataLogic_cmdPush_fifo_io_pop_ready);
  assign dataLogic_cmdPush_fifo_io_pop_ready = (! dataLogic_busy);
  assign io_input_r_fire = (io_input_r_valid && io_input_r_ready);
  assign io_input_r_valid = (io_output_r_valid && dataLogic_busy);
  assign io_input_r_payload_last = (io_output_r_payload_last && (dataLogic_byteCounter == dataLogic_byteCounterLast));
  assign io_input_r_payload_resp = io_output_r_payload_resp;
  assign io_input_r_payload_data = _zz_io_input_r_payload_data;
  assign io_input_r_payload_id = dataLogic_id;
  assign io_output_r_ready = ((dataLogic_busy && io_input_r_ready) && (io_input_r_payload_last || dataLogic_byteCounterNext[6]));
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      io_input_ar_fork2_logic_linkEnable_0 <= 1'b1;
      io_input_ar_fork2_logic_linkEnable_1 <= 1'b1;
      dataLogic_busy <= 1'b0;
    end else begin
      if(cmdLogic_outputFork_fire) begin
        io_input_ar_fork2_logic_linkEnable_0 <= 1'b0;
      end
      if(cmdLogic_dataFork_fire) begin
        io_input_ar_fork2_logic_linkEnable_1 <= 1'b0;
      end
      if(io_input_ar_ready) begin
        io_input_ar_fork2_logic_linkEnable_0 <= 1'b1;
        io_input_ar_fork2_logic_linkEnable_1 <= 1'b1;
      end
      if(readOnly_dataLogic_cmdPush_fifo_io_pop_fire) begin
        dataLogic_busy <= 1'b1;
      end
      if(io_input_r_fire) begin
        if(io_input_r_payload_last) begin
          dataLogic_busy <= 1'b0;
        end
      end
    end
  end

  always @(posedge clk) begin
    if(readOnly_dataLogic_cmdPush_fifo_io_pop_fire) begin
      dataLogic_byteCounter <= dataLogic_cmdPush_fifo_io_pop_payload_startAt;
      dataLogic_byteCounterLast <= dataLogic_cmdPush_fifo_io_pop_payload_endAt;
      dataLogic_size <= dataLogic_cmdPush_fifo_io_pop_payload_size;
      dataLogic_id <= dataLogic_cmdPush_fifo_io_pop_payload_id;
    end
    if(io_input_r_fire) begin
      dataLogic_byteCounter <= dataLogic_byteCounterNext[5:0];
    end
  end


endmodule

module Asic32To512UpsizerStreamFifo_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_push_valid,
  output              io_push_ready,
  input      [5:0]    io_push_payload_startAt,
  input      [5:0]    io_push_payload_endAt,
  input      [2:0]    io_push_payload_size,
  input      [7:0]    io_push_payload_id,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [5:0]    io_pop_payload_startAt,
  output     [5:0]    io_pop_payload_endAt,
  output     [2:0]    io_pop_payload_size,
  output     [7:0]    io_pop_payload_id,
  input               io_flush,
  output     [4:0]    io_occupancy,
  output     [4:0]    io_availability,
  input               clk,
  input               reset
);

  reg        [22:0]   _zz_logic_ram_port0;
  wire       [3:0]    _zz_logic_pushPtr_valueNext;
  wire       [0:0]    _zz_logic_pushPtr_valueNext_1;
  wire       [3:0]    _zz_logic_popPtr_valueNext;
  wire       [0:0]    _zz_logic_popPtr_valueNext_1;
  wire                _zz__zz_logic_ram_port0;
  wire                _zz__zz_io_pop_payload_startAt;
  wire       [22:0]   _zz__zz_logic_ram_port1;
  wire       [3:0]    _zz_io_availability;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [3:0]    logic_pushPtr_valueNext;
  reg        [3:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [3:0]    logic_popPtr_valueNext;
  reg        [3:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_io_pop_valid;
  wire       [22:0]   _zz_io_pop_payload_startAt;
  wire                when_Stream_l1123;
  wire       [3:0]    logic_ptrDif;
  reg [22:0] logic_ram [0:15];

  assign _zz_logic_pushPtr_valueNext_1 = logic_pushPtr_willIncrement;
  assign _zz_logic_pushPtr_valueNext = {3'd0, _zz_logic_pushPtr_valueNext_1};
  assign _zz_logic_popPtr_valueNext_1 = logic_popPtr_willIncrement;
  assign _zz_logic_popPtr_valueNext = {3'd0, _zz_logic_popPtr_valueNext_1};
  assign _zz_io_availability = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz__zz_io_pop_payload_startAt = 1'b1;
  assign _zz__zz_logic_ram_port1 = {io_push_payload_id,{io_push_payload_size,{io_push_payload_endAt,io_push_payload_startAt}}};
  always @(posedge clk) begin
    if(_zz__zz_io_pop_payload_startAt) begin
      _zz_logic_ram_port0 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @(posedge clk) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= _zz__zz_logic_ram_port1;
    end
  end

  always @(*) begin
    _zz_1 = 1'b0;
    if(logic_pushing) begin
      _zz_1 = 1'b1;
    end
  end

  always @(*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing) begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush) begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == 4'b1111);
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @(*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_logic_pushPtr_valueNext);
    if(logic_pushPtr_willClear) begin
      logic_pushPtr_valueNext = 4'b0000;
    end
  end

  always @(*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping) begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush) begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == 4'b1111);
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @(*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_logic_popPtr_valueNext);
    if(logic_popPtr_willClear) begin
      logic_popPtr_valueNext = 4'b0000;
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_io_pop_valid && (! logic_full))));
  assign _zz_io_pop_payload_startAt = _zz_logic_ram_port0;
  assign io_pop_payload_startAt = _zz_io_pop_payload_startAt[5 : 0];
  assign io_pop_payload_endAt = _zz_io_pop_payload_startAt[11 : 6];
  assign io_pop_payload_size = _zz_io_pop_payload_startAt[14 : 12];
  assign io_pop_payload_id = _zz_io_pop_payload_startAt[22 : 15];
  assign when_Stream_l1123 = (logic_pushing != logic_popping);
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_io_availability};
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      logic_pushPtr_value <= 4'b0000;
      logic_popPtr_value <= 4'b0000;
      logic_risingOccupancy <= 1'b0;
      _zz_io_pop_valid <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_io_pop_valid <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if(when_Stream_l1123) begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush) begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule


// Generator : SpinalHDL dev    git head : 9cdee03b276638ef8e7a948b606bb7acc6e4c8d0
// Component : Asic32To64UpsizerAxi4Upsizer_9c51cd082e6149aeaca9d6aed464db29
// Git hash  : cd16421fb7a4d44431a2445f9a92b82070ab9b8a

`timescale 1ns/1ps

module Asic32To64UpsizerAxi4Upsizer_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_input_aw_valid,
  output              io_input_aw_ready,
  input      [31:0]   io_input_aw_payload_addr,
  input      [7:0]    io_input_aw_payload_id,
  input      [3:0]    io_input_aw_payload_region,
  input      [7:0]    io_input_aw_payload_len,
  input      [2:0]    io_input_aw_payload_size,
  input      [1:0]    io_input_aw_payload_burst,
  input      [0:0]    io_input_aw_payload_lock,
  input      [3:0]    io_input_aw_payload_cache,
  input      [3:0]    io_input_aw_payload_qos,
  input      [2:0]    io_input_aw_payload_prot,
  input               io_input_w_valid,
  output              io_input_w_ready,
  input      [31:0]   io_input_w_payload_data,
  input      [3:0]    io_input_w_payload_strb,
  input               io_input_w_payload_last,
  output              io_input_b_valid,
  input               io_input_b_ready,
  output     [7:0]    io_input_b_payload_id,
  output     [1:0]    io_input_b_payload_resp,
  input               io_input_ar_valid,
  output              io_input_ar_ready,
  input      [31:0]   io_input_ar_payload_addr,
  input      [7:0]    io_input_ar_payload_id,
  input      [3:0]    io_input_ar_payload_region,
  input      [7:0]    io_input_ar_payload_len,
  input      [2:0]    io_input_ar_payload_size,
  input      [1:0]    io_input_ar_payload_burst,
  input      [0:0]    io_input_ar_payload_lock,
  input      [3:0]    io_input_ar_payload_cache,
  input      [3:0]    io_input_ar_payload_qos,
  input      [2:0]    io_input_ar_payload_prot,
  output              io_input_r_valid,
  input               io_input_r_ready,
  output     [31:0]   io_input_r_payload_data,
  output     [7:0]    io_input_r_payload_id,
  output     [1:0]    io_input_r_payload_resp,
  output              io_input_r_payload_last,
  output              io_output_aw_valid,
  input               io_output_aw_ready,
  output     [31:0]   io_output_aw_payload_addr,
  output     [7:0]    io_output_aw_payload_id,
  output     [3:0]    io_output_aw_payload_region,
  output     [7:0]    io_output_aw_payload_len,
  output     [2:0]    io_output_aw_payload_size,
  output     [1:0]    io_output_aw_payload_burst,
  output     [0:0]    io_output_aw_payload_lock,
  output     [3:0]    io_output_aw_payload_cache,
  output     [3:0]    io_output_aw_payload_qos,
  output     [2:0]    io_output_aw_payload_prot,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [63:0]   io_output_w_payload_data,
  output     [7:0]    io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [7:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  output              io_output_ar_valid,
  input               io_output_ar_ready,
  output     [31:0]   io_output_ar_payload_addr,
  output     [7:0]    io_output_ar_payload_id,
  output     [3:0]    io_output_ar_payload_region,
  output     [7:0]    io_output_ar_payload_len,
  output     [2:0]    io_output_ar_payload_size,
  output     [1:0]    io_output_ar_payload_burst,
  output     [0:0]    io_output_ar_payload_lock,
  output     [3:0]    io_output_ar_payload_cache,
  output     [3:0]    io_output_ar_payload_qos,
  output     [2:0]    io_output_ar_payload_prot,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [63:0]   io_output_r_payload_data,
  input      [7:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               clk,
  input               reset
);

  wire                readOnly_io_input_ar_ready;
  wire                readOnly_io_input_r_valid;
  wire       [31:0]   readOnly_io_input_r_payload_data;
  wire       [7:0]    readOnly_io_input_r_payload_id;
  wire       [1:0]    readOnly_io_input_r_payload_resp;
  wire                readOnly_io_input_r_payload_last;
  wire                readOnly_io_output_ar_valid;
  wire       [31:0]   readOnly_io_output_ar_payload_addr;
  wire       [7:0]    readOnly_io_output_ar_payload_id;
  wire       [3:0]    readOnly_io_output_ar_payload_region;
  wire       [7:0]    readOnly_io_output_ar_payload_len;
  wire       [2:0]    readOnly_io_output_ar_payload_size;
  wire       [1:0]    readOnly_io_output_ar_payload_burst;
  wire       [0:0]    readOnly_io_output_ar_payload_lock;
  wire       [3:0]    readOnly_io_output_ar_payload_cache;
  wire       [3:0]    readOnly_io_output_ar_payload_qos;
  wire       [2:0]    readOnly_io_output_ar_payload_prot;
  wire                readOnly_io_output_r_ready;
  wire                writeOnly_io_input_aw_ready;
  wire                writeOnly_io_input_w_ready;
  wire                writeOnly_io_input_b_valid;
  wire       [7:0]    writeOnly_io_input_b_payload_id;
  wire       [1:0]    writeOnly_io_input_b_payload_resp;
  wire                writeOnly_io_output_aw_valid;
  wire       [31:0]   writeOnly_io_output_aw_payload_addr;
  wire       [7:0]    writeOnly_io_output_aw_payload_id;
  wire       [3:0]    writeOnly_io_output_aw_payload_region;
  wire       [7:0]    writeOnly_io_output_aw_payload_len;
  wire       [2:0]    writeOnly_io_output_aw_payload_size;
  wire       [1:0]    writeOnly_io_output_aw_payload_burst;
  wire       [0:0]    writeOnly_io_output_aw_payload_lock;
  wire       [3:0]    writeOnly_io_output_aw_payload_cache;
  wire       [3:0]    writeOnly_io_output_aw_payload_qos;
  wire       [2:0]    writeOnly_io_output_aw_payload_prot;
  wire                writeOnly_io_output_w_valid;
  wire       [63:0]   writeOnly_io_output_w_payload_data;
  wire       [7:0]    writeOnly_io_output_w_payload_strb;
  wire                writeOnly_io_output_w_payload_last;
  wire                writeOnly_io_output_b_ready;

  Asic32To64UpsizerAxi4ReadOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 readOnly (
    .io_input_ar_valid           (io_input_ar_valid                        ), //i
    .io_input_ar_ready           (readOnly_io_input_ar_ready               ), //o
    .io_input_ar_payload_addr    (io_input_ar_payload_addr[31:0]           ), //i
    .io_input_ar_payload_id      (io_input_ar_payload_id[7:0]              ), //i
    .io_input_ar_payload_region  (io_input_ar_payload_region[3:0]          ), //i
    .io_input_ar_payload_len     (io_input_ar_payload_len[7:0]             ), //i
    .io_input_ar_payload_size    (io_input_ar_payload_size[2:0]            ), //i
    .io_input_ar_payload_burst   (io_input_ar_payload_burst[1:0]           ), //i
    .io_input_ar_payload_lock    (io_input_ar_payload_lock                 ), //i
    .io_input_ar_payload_cache   (io_input_ar_payload_cache[3:0]           ), //i
    .io_input_ar_payload_qos     (io_input_ar_payload_qos[3:0]             ), //i
    .io_input_ar_payload_prot    (io_input_ar_payload_prot[2:0]            ), //i
    .io_input_r_valid            (readOnly_io_input_r_valid                ), //o
    .io_input_r_ready            (io_input_r_ready                         ), //i
    .io_input_r_payload_data     (readOnly_io_input_r_payload_data[31:0]   ), //o
    .io_input_r_payload_id       (readOnly_io_input_r_payload_id[7:0]      ), //o
    .io_input_r_payload_resp     (readOnly_io_input_r_payload_resp[1:0]    ), //o
    .io_input_r_payload_last     (readOnly_io_input_r_payload_last         ), //o
    .io_output_ar_valid          (readOnly_io_output_ar_valid              ), //o
    .io_output_ar_ready          (io_output_ar_ready                       ), //i
    .io_output_ar_payload_addr   (readOnly_io_output_ar_payload_addr[31:0] ), //o
    .io_output_ar_payload_id     (readOnly_io_output_ar_payload_id[7:0]    ), //o
    .io_output_ar_payload_region (readOnly_io_output_ar_payload_region[3:0]), //o
    .io_output_ar_payload_len    (readOnly_io_output_ar_payload_len[7:0]   ), //o
    .io_output_ar_payload_size   (readOnly_io_output_ar_payload_size[2:0]  ), //o
    .io_output_ar_payload_burst  (readOnly_io_output_ar_payload_burst[1:0] ), //o
    .io_output_ar_payload_lock   (readOnly_io_output_ar_payload_lock       ), //o
    .io_output_ar_payload_cache  (readOnly_io_output_ar_payload_cache[3:0] ), //o
    .io_output_ar_payload_qos    (readOnly_io_output_ar_payload_qos[3:0]   ), //o
    .io_output_ar_payload_prot   (readOnly_io_output_ar_payload_prot[2:0]  ), //o
    .io_output_r_valid           (io_output_r_valid                        ), //i
    .io_output_r_ready           (readOnly_io_output_r_ready               ), //o
    .io_output_r_payload_data    (io_output_r_payload_data[63:0]           ), //i
    .io_output_r_payload_id      (io_output_r_payload_id[7:0]              ), //i
    .io_output_r_payload_resp    (io_output_r_payload_resp[1:0]            ), //i
    .io_output_r_payload_last    (io_output_r_payload_last                 ), //i
    .clk                         (clk                                      ), //i
    .reset                       (reset                                    )  //i
  );
  Asic32To64UpsizerAxi4WriteOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 writeOnly (
    .io_input_aw_valid           (io_input_aw_valid                         ), //i
    .io_input_aw_ready           (writeOnly_io_input_aw_ready               ), //o
    .io_input_aw_payload_addr    (io_input_aw_payload_addr[31:0]            ), //i
    .io_input_aw_payload_id      (io_input_aw_payload_id[7:0]               ), //i
    .io_input_aw_payload_region  (io_input_aw_payload_region[3:0]           ), //i
    .io_input_aw_payload_len     (io_input_aw_payload_len[7:0]              ), //i
    .io_input_aw_payload_size    (io_input_aw_payload_size[2:0]             ), //i
    .io_input_aw_payload_burst   (io_input_aw_payload_burst[1:0]            ), //i
    .io_input_aw_payload_lock    (io_input_aw_payload_lock                  ), //i
    .io_input_aw_payload_cache   (io_input_aw_payload_cache[3:0]            ), //i
    .io_input_aw_payload_qos     (io_input_aw_payload_qos[3:0]              ), //i
    .io_input_aw_payload_prot    (io_input_aw_payload_prot[2:0]             ), //i
    .io_input_w_valid            (io_input_w_valid                          ), //i
    .io_input_w_ready            (writeOnly_io_input_w_ready                ), //o
    .io_input_w_payload_data     (io_input_w_payload_data[31:0]             ), //i
    .io_input_w_payload_strb     (io_input_w_payload_strb[3:0]              ), //i
    .io_input_w_payload_last     (io_input_w_payload_last                   ), //i
    .io_input_b_valid            (writeOnly_io_input_b_valid                ), //o
    .io_input_b_ready            (io_input_b_ready                          ), //i
    .io_input_b_payload_id       (writeOnly_io_input_b_payload_id[7:0]      ), //o
    .io_input_b_payload_resp     (writeOnly_io_input_b_payload_resp[1:0]    ), //o
    .io_output_aw_valid          (writeOnly_io_output_aw_valid              ), //o
    .io_output_aw_ready          (io_output_aw_ready                        ), //i
    .io_output_aw_payload_addr   (writeOnly_io_output_aw_payload_addr[31:0] ), //o
    .io_output_aw_payload_id     (writeOnly_io_output_aw_payload_id[7:0]    ), //o
    .io_output_aw_payload_region (writeOnly_io_output_aw_payload_region[3:0]), //o
    .io_output_aw_payload_len    (writeOnly_io_output_aw_payload_len[7:0]   ), //o
    .io_output_aw_payload_size   (writeOnly_io_output_aw_payload_size[2:0]  ), //o
    .io_output_aw_payload_burst  (writeOnly_io_output_aw_payload_burst[1:0] ), //o
    .io_output_aw_payload_lock   (writeOnly_io_output_aw_payload_lock       ), //o
    .io_output_aw_payload_cache  (writeOnly_io_output_aw_payload_cache[3:0] ), //o
    .io_output_aw_payload_qos    (writeOnly_io_output_aw_payload_qos[3:0]   ), //o
    .io_output_aw_payload_prot   (writeOnly_io_output_aw_payload_prot[2:0]  ), //o
    .io_output_w_valid           (writeOnly_io_output_w_valid               ), //o
    .io_output_w_ready           (io_output_w_ready                         ), //i
    .io_output_w_payload_data    (writeOnly_io_output_w_payload_data[63:0]  ), //o
    .io_output_w_payload_strb    (writeOnly_io_output_w_payload_strb[7:0]   ), //o
    .io_output_w_payload_last    (writeOnly_io_output_w_payload_last        ), //o
    .io_output_b_valid           (io_output_b_valid                         ), //i
    .io_output_b_ready           (writeOnly_io_output_b_ready               ), //o
    .io_output_b_payload_id      (io_output_b_payload_id[7:0]               ), //i
    .io_output_b_payload_resp    (io_output_b_payload_resp[1:0]             ), //i
    .clk                         (clk                                       ), //i
    .reset                       (reset                                     )  //i
  );
  assign io_input_ar_ready = readOnly_io_input_ar_ready;
  assign io_input_r_valid = readOnly_io_input_r_valid;
  assign io_input_r_payload_data = readOnly_io_input_r_payload_data;
  assign io_input_r_payload_id = readOnly_io_input_r_payload_id;
  assign io_input_r_payload_resp = readOnly_io_input_r_payload_resp;
  assign io_input_r_payload_last = readOnly_io_input_r_payload_last;
  assign io_input_aw_ready = writeOnly_io_input_aw_ready;
  assign io_input_w_ready = writeOnly_io_input_w_ready;
  assign io_input_b_valid = writeOnly_io_input_b_valid;
  assign io_input_b_payload_id = writeOnly_io_input_b_payload_id;
  assign io_input_b_payload_resp = writeOnly_io_input_b_payload_resp;
  assign io_output_ar_valid = readOnly_io_output_ar_valid;
  assign io_output_ar_payload_addr = readOnly_io_output_ar_payload_addr;
  assign io_output_ar_payload_id = readOnly_io_output_ar_payload_id;
  assign io_output_ar_payload_region = readOnly_io_output_ar_payload_region;
  assign io_output_ar_payload_len = readOnly_io_output_ar_payload_len;
  assign io_output_ar_payload_size = readOnly_io_output_ar_payload_size;
  assign io_output_ar_payload_burst = readOnly_io_output_ar_payload_burst;
  assign io_output_ar_payload_lock = readOnly_io_output_ar_payload_lock;
  assign io_output_ar_payload_cache = readOnly_io_output_ar_payload_cache;
  assign io_output_ar_payload_qos = readOnly_io_output_ar_payload_qos;
  assign io_output_ar_payload_prot = readOnly_io_output_ar_payload_prot;
  assign io_output_r_ready = readOnly_io_output_r_ready;
  assign io_output_aw_valid = writeOnly_io_output_aw_valid;
  assign io_output_aw_payload_addr = writeOnly_io_output_aw_payload_addr;
  assign io_output_aw_payload_id = writeOnly_io_output_aw_payload_id;
  assign io_output_aw_payload_region = writeOnly_io_output_aw_payload_region;
  assign io_output_aw_payload_len = writeOnly_io_output_aw_payload_len;
  assign io_output_aw_payload_size = writeOnly_io_output_aw_payload_size;
  assign io_output_aw_payload_burst = writeOnly_io_output_aw_payload_burst;
  assign io_output_aw_payload_lock = writeOnly_io_output_aw_payload_lock;
  assign io_output_aw_payload_cache = writeOnly_io_output_aw_payload_cache;
  assign io_output_aw_payload_qos = writeOnly_io_output_aw_payload_qos;
  assign io_output_aw_payload_prot = writeOnly_io_output_aw_payload_prot;
  assign io_output_w_valid = writeOnly_io_output_w_valid;
  assign io_output_w_payload_data = writeOnly_io_output_w_payload_data;
  assign io_output_w_payload_strb = writeOnly_io_output_w_payload_strb;
  assign io_output_w_payload_last = writeOnly_io_output_w_payload_last;
  assign io_output_b_ready = writeOnly_io_output_b_ready;

endmodule

module Asic32To64UpsizerAxi4WriteOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_input_aw_valid,
  output reg          io_input_aw_ready,
  input      [31:0]   io_input_aw_payload_addr,
  input      [7:0]    io_input_aw_payload_id,
  input      [3:0]    io_input_aw_payload_region,
  input      [7:0]    io_input_aw_payload_len,
  input      [2:0]    io_input_aw_payload_size,
  input      [1:0]    io_input_aw_payload_burst,
  input      [0:0]    io_input_aw_payload_lock,
  input      [3:0]    io_input_aw_payload_cache,
  input      [3:0]    io_input_aw_payload_qos,
  input      [2:0]    io_input_aw_payload_prot,
  input               io_input_w_valid,
  output              io_input_w_ready,
  input      [31:0]   io_input_w_payload_data,
  input      [3:0]    io_input_w_payload_strb,
  input               io_input_w_payload_last,
  output              io_input_b_valid,
  input               io_input_b_ready,
  output     [7:0]    io_input_b_payload_id,
  output     [1:0]    io_input_b_payload_resp,
  output              io_output_aw_valid,
  input               io_output_aw_ready,
  output     [31:0]   io_output_aw_payload_addr,
  output     [7:0]    io_output_aw_payload_id,
  output     [3:0]    io_output_aw_payload_region,
  output reg [7:0]    io_output_aw_payload_len,
  output reg [2:0]    io_output_aw_payload_size,
  output     [1:0]    io_output_aw_payload_burst,
  output     [0:0]    io_output_aw_payload_lock,
  output     [3:0]    io_output_aw_payload_cache,
  output     [3:0]    io_output_aw_payload_qos,
  output     [2:0]    io_output_aw_payload_prot,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [63:0]   io_output_w_payload_data,
  output     [7:0]    io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [7:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  input               clk,
  input               reset
);

  wire       [14:0]   _zz_cmdLogic_byteCount;
  wire       [10:0]   _zz_cmdLogic_incrLen;
  wire       [10:0]   _zz_cmdLogic_incrLen_1;
  wire       [2:0]    _zz_cmdLogic_incrLen_2;
  wire       [3:0]    _zz_dataLogic_byteCounterNext;
  wire       [7:0]    _zz_dataLogic_byteCounterNext_1;
  reg        [7:0]    _zz_dataLogic_byteActivity;
  wire       [1:0]    _zz_dataLogic_byteActivity_1;
  wire                cmdLogic_outputFork_valid;
  wire                cmdLogic_outputFork_ready;
  wire       [31:0]   cmdLogic_outputFork_payload_addr;
  wire       [7:0]    cmdLogic_outputFork_payload_id;
  wire       [3:0]    cmdLogic_outputFork_payload_region;
  wire       [7:0]    cmdLogic_outputFork_payload_len;
  wire       [2:0]    cmdLogic_outputFork_payload_size;
  wire       [1:0]    cmdLogic_outputFork_payload_burst;
  wire       [0:0]    cmdLogic_outputFork_payload_lock;
  wire       [3:0]    cmdLogic_outputFork_payload_cache;
  wire       [3:0]    cmdLogic_outputFork_payload_qos;
  wire       [2:0]    cmdLogic_outputFork_payload_prot;
  wire                cmdLogic_dataFork_valid;
  wire                cmdLogic_dataFork_ready;
  wire       [31:0]   cmdLogic_dataFork_payload_addr;
  wire       [7:0]    cmdLogic_dataFork_payload_id;
  wire       [3:0]    cmdLogic_dataFork_payload_region;
  wire       [7:0]    cmdLogic_dataFork_payload_len;
  wire       [2:0]    cmdLogic_dataFork_payload_size;
  wire       [1:0]    cmdLogic_dataFork_payload_burst;
  wire       [0:0]    cmdLogic_dataFork_payload_lock;
  wire       [3:0]    cmdLogic_dataFork_payload_cache;
  wire       [3:0]    cmdLogic_dataFork_payload_qos;
  wire       [2:0]    cmdLogic_dataFork_payload_prot;
  reg                 io_input_aw_fork2_logic_linkEnable_0;
  reg                 io_input_aw_fork2_logic_linkEnable_1;
  wire                when_Stream_l993;
  wire                when_Stream_l993_1;
  wire                cmdLogic_outputFork_fire;
  wire                cmdLogic_dataFork_fire;
  wire       [9:0]    cmdLogic_byteCount;
  wire       [7:0]    cmdLogic_incrLen;
  wire                when_Axi4Upsizer_l21;
  wire                when_Axi4Upsizer_l24;
  reg        [2:0]    dataLogic_byteCounter;
  reg        [2:0]    dataLogic_size;
  reg                 dataLogic_outputValid;
  reg                 dataLogic_outputLast;
  reg                 dataLogic_busy;
  reg                 dataLogic_incrementByteCounter;
  reg                 dataLogic_alwaysFire;
  wire       [3:0]    dataLogic_byteCounterNext;
  reg        [63:0]   dataLogic_dataBuffer;
  reg        [7:0]    dataLogic_maskBuffer;
  wire       [7:0]    dataLogic_byteActivity;
  wire                io_output_w_fire;
  wire                io_output_w_isStall;
  wire                io_input_w_fire;
  wire                when_Axi4Upsizer_l59;
  wire                when_Axi4Upsizer_l59_1;
  wire                when_Axi4Upsizer_l59_2;
  wire                when_Axi4Upsizer_l59_3;
  wire                when_Axi4Upsizer_l59_4;
  wire                when_Axi4Upsizer_l59_5;
  wire                when_Axi4Upsizer_l59_6;
  wire                when_Axi4Upsizer_l59_7;
  wire                cmdLogic_dataFork_fire_1;
  wire                when_Axi4Upsizer_l68;
  wire                when_Axi4Upsizer_l68_1;
  wire                when_Axi4Upsizer_l68_2;

  assign _zz_cmdLogic_byteCount = ({7'd0,io_input_aw_payload_len} <<< io_input_aw_payload_size);
  assign _zz_cmdLogic_incrLen = ({1'b0,cmdLogic_byteCount} + _zz_cmdLogic_incrLen_1);
  assign _zz_cmdLogic_incrLen_2 = io_input_aw_payload_addr[2 : 0];
  assign _zz_cmdLogic_incrLen_1 = {8'd0, _zz_cmdLogic_incrLen_2};
  assign _zz_dataLogic_byteCounterNext_1 = ({7'd0,1'b1} <<< dataLogic_size);
  assign _zz_dataLogic_byteCounterNext = _zz_dataLogic_byteCounterNext_1[3:0];
  assign _zz_dataLogic_byteActivity_1 = dataLogic_size[1:0];
  always @(*) begin
    case(_zz_dataLogic_byteActivity_1)
      2'b00 : _zz_dataLogic_byteActivity = 8'h01;
      2'b01 : _zz_dataLogic_byteActivity = 8'h03;
      default : _zz_dataLogic_byteActivity = 8'h0f;
    endcase
  end

  always @(*) begin
    io_input_aw_ready = 1'b1;
    if(when_Stream_l993) begin
      io_input_aw_ready = 1'b0;
    end
    if(when_Stream_l993_1) begin
      io_input_aw_ready = 1'b0;
    end
  end

  assign when_Stream_l993 = ((! cmdLogic_outputFork_ready) && io_input_aw_fork2_logic_linkEnable_0);
  assign when_Stream_l993_1 = ((! cmdLogic_dataFork_ready) && io_input_aw_fork2_logic_linkEnable_1);
  assign cmdLogic_outputFork_valid = (io_input_aw_valid && io_input_aw_fork2_logic_linkEnable_0);
  assign cmdLogic_outputFork_payload_addr = io_input_aw_payload_addr;
  assign cmdLogic_outputFork_payload_id = io_input_aw_payload_id;
  assign cmdLogic_outputFork_payload_region = io_input_aw_payload_region;
  assign cmdLogic_outputFork_payload_len = io_input_aw_payload_len;
  assign cmdLogic_outputFork_payload_size = io_input_aw_payload_size;
  assign cmdLogic_outputFork_payload_burst = io_input_aw_payload_burst;
  assign cmdLogic_outputFork_payload_lock = io_input_aw_payload_lock;
  assign cmdLogic_outputFork_payload_cache = io_input_aw_payload_cache;
  assign cmdLogic_outputFork_payload_qos = io_input_aw_payload_qos;
  assign cmdLogic_outputFork_payload_prot = io_input_aw_payload_prot;
  assign cmdLogic_outputFork_fire = (cmdLogic_outputFork_valid && cmdLogic_outputFork_ready);
  assign cmdLogic_dataFork_valid = (io_input_aw_valid && io_input_aw_fork2_logic_linkEnable_1);
  assign cmdLogic_dataFork_payload_addr = io_input_aw_payload_addr;
  assign cmdLogic_dataFork_payload_id = io_input_aw_payload_id;
  assign cmdLogic_dataFork_payload_region = io_input_aw_payload_region;
  assign cmdLogic_dataFork_payload_len = io_input_aw_payload_len;
  assign cmdLogic_dataFork_payload_size = io_input_aw_payload_size;
  assign cmdLogic_dataFork_payload_burst = io_input_aw_payload_burst;
  assign cmdLogic_dataFork_payload_lock = io_input_aw_payload_lock;
  assign cmdLogic_dataFork_payload_cache = io_input_aw_payload_cache;
  assign cmdLogic_dataFork_payload_qos = io_input_aw_payload_qos;
  assign cmdLogic_dataFork_payload_prot = io_input_aw_payload_prot;
  assign cmdLogic_dataFork_fire = (cmdLogic_dataFork_valid && cmdLogic_dataFork_ready);
  assign io_output_aw_valid = cmdLogic_outputFork_valid;
  assign cmdLogic_outputFork_ready = io_output_aw_ready;
  assign io_output_aw_payload_addr = cmdLogic_outputFork_payload_addr;
  assign io_output_aw_payload_id = cmdLogic_outputFork_payload_id;
  assign io_output_aw_payload_region = cmdLogic_outputFork_payload_region;
  always @(*) begin
    io_output_aw_payload_len = cmdLogic_outputFork_payload_len;
    if(when_Axi4Upsizer_l21) begin
      io_output_aw_payload_len = cmdLogic_incrLen;
    end
  end

  always @(*) begin
    io_output_aw_payload_size = cmdLogic_outputFork_payload_size;
    if(when_Axi4Upsizer_l21) begin
      io_output_aw_payload_size = 3'b011;
      if(when_Axi4Upsizer_l24) begin
        io_output_aw_payload_size = io_input_aw_payload_size;
      end
    end
  end

  assign io_output_aw_payload_burst = cmdLogic_outputFork_payload_burst;
  assign io_output_aw_payload_lock = cmdLogic_outputFork_payload_lock;
  assign io_output_aw_payload_cache = cmdLogic_outputFork_payload_cache;
  assign io_output_aw_payload_qos = cmdLogic_outputFork_payload_qos;
  assign io_output_aw_payload_prot = cmdLogic_outputFork_payload_prot;
  assign cmdLogic_byteCount = _zz_cmdLogic_byteCount[9:0];
  assign cmdLogic_incrLen = _zz_cmdLogic_incrLen[10 : 3];
  assign when_Axi4Upsizer_l21 = (io_output_aw_payload_burst == 2'b01);
  assign when_Axi4Upsizer_l24 = (io_input_aw_payload_len == 8'h00);
  assign dataLogic_byteCounterNext = ({1'b0,dataLogic_byteCounter} + _zz_dataLogic_byteCounterNext);
  assign dataLogic_byteActivity = (_zz_dataLogic_byteActivity <<< dataLogic_byteCounter);
  assign io_output_w_fire = (io_output_w_valid && io_output_w_ready);
  assign io_output_w_valid = dataLogic_outputValid;
  assign io_output_w_isStall = (io_output_w_valid && (! io_output_w_ready));
  assign io_input_w_ready = (dataLogic_busy && (! io_output_w_isStall));
  assign io_output_w_payload_data = dataLogic_dataBuffer;
  assign io_output_w_payload_strb = dataLogic_maskBuffer;
  assign io_output_w_payload_last = dataLogic_outputLast;
  assign io_input_w_fire = (io_input_w_valid && io_input_w_ready);
  assign when_Axi4Upsizer_l59 = dataLogic_byteActivity[0];
  assign when_Axi4Upsizer_l59_1 = dataLogic_byteActivity[1];
  assign when_Axi4Upsizer_l59_2 = dataLogic_byteActivity[2];
  assign when_Axi4Upsizer_l59_3 = dataLogic_byteActivity[3];
  assign when_Axi4Upsizer_l59_4 = dataLogic_byteActivity[4];
  assign when_Axi4Upsizer_l59_5 = dataLogic_byteActivity[5];
  assign when_Axi4Upsizer_l59_6 = dataLogic_byteActivity[6];
  assign when_Axi4Upsizer_l59_7 = dataLogic_byteActivity[7];
  assign cmdLogic_dataFork_fire_1 = (cmdLogic_dataFork_valid && cmdLogic_dataFork_ready);
  assign when_Axi4Upsizer_l68 = (3'b000 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_1 = (3'b001 < cmdLogic_dataFork_payload_size);
  assign when_Axi4Upsizer_l68_2 = (3'b010 < cmdLogic_dataFork_payload_size);
  assign cmdLogic_dataFork_ready = (! dataLogic_busy);
  assign io_input_b_valid = io_output_b_valid;
  assign io_output_b_ready = io_input_b_ready;
  assign io_input_b_payload_id = io_output_b_payload_id;
  assign io_input_b_payload_resp = io_output_b_payload_resp;
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      io_input_aw_fork2_logic_linkEnable_0 <= 1'b1;
      io_input_aw_fork2_logic_linkEnable_1 <= 1'b1;
      dataLogic_outputValid <= 1'b0;
      dataLogic_busy <= 1'b0;
      dataLogic_maskBuffer <= 8'h00;
    end else begin
      if(cmdLogic_outputFork_fire) begin
        io_input_aw_fork2_logic_linkEnable_0 <= 1'b0;
      end
      if(cmdLogic_dataFork_fire) begin
        io_input_aw_fork2_logic_linkEnable_1 <= 1'b0;
      end
      if(io_input_aw_ready) begin
        io_input_aw_fork2_logic_linkEnable_0 <= 1'b1;
        io_input_aw_fork2_logic_linkEnable_1 <= 1'b1;
      end
      if(io_output_w_ready) begin
        dataLogic_outputValid <= 1'b0;
      end
      if(io_output_w_fire) begin
        dataLogic_maskBuffer <= 8'h00;
      end
      if(io_input_w_fire) begin
        dataLogic_outputValid <= ((dataLogic_byteCounterNext[3] || io_input_w_payload_last) || dataLogic_alwaysFire);
        if(io_input_w_payload_last) begin
          dataLogic_busy <= 1'b0;
        end
        if(when_Axi4Upsizer_l59) begin
          dataLogic_maskBuffer[0] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_1) begin
          dataLogic_maskBuffer[1] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_2) begin
          dataLogic_maskBuffer[2] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_3) begin
          dataLogic_maskBuffer[3] <= io_input_w_payload_strb[3];
        end
        if(when_Axi4Upsizer_l59_4) begin
          dataLogic_maskBuffer[4] <= io_input_w_payload_strb[0];
        end
        if(when_Axi4Upsizer_l59_5) begin
          dataLogic_maskBuffer[5] <= io_input_w_payload_strb[1];
        end
        if(when_Axi4Upsizer_l59_6) begin
          dataLogic_maskBuffer[6] <= io_input_w_payload_strb[2];
        end
        if(when_Axi4Upsizer_l59_7) begin
          dataLogic_maskBuffer[7] <= io_input_w_payload_strb[3];
        end
      end
      if(cmdLogic_dataFork_fire_1) begin
        dataLogic_busy <= 1'b1;
      end
    end
  end

  always @(posedge clk) begin
    if(io_input_w_fire) begin
      if(dataLogic_incrementByteCounter) begin
        dataLogic_byteCounter <= dataLogic_byteCounterNext[2:0];
      end
      dataLogic_outputLast <= io_input_w_payload_last;
      if(when_Axi4Upsizer_l59) begin
        dataLogic_dataBuffer[7 : 0] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_1) begin
        dataLogic_dataBuffer[15 : 8] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_2) begin
        dataLogic_dataBuffer[23 : 16] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_3) begin
        dataLogic_dataBuffer[31 : 24] <= io_input_w_payload_data[31 : 24];
      end
      if(when_Axi4Upsizer_l59_4) begin
        dataLogic_dataBuffer[39 : 32] <= io_input_w_payload_data[7 : 0];
      end
      if(when_Axi4Upsizer_l59_5) begin
        dataLogic_dataBuffer[47 : 40] <= io_input_w_payload_data[15 : 8];
      end
      if(when_Axi4Upsizer_l59_6) begin
        dataLogic_dataBuffer[55 : 48] <= io_input_w_payload_data[23 : 16];
      end
      if(when_Axi4Upsizer_l59_7) begin
        dataLogic_dataBuffer[63 : 56] <= io_input_w_payload_data[31 : 24];
      end
    end
    if(cmdLogic_dataFork_fire_1) begin
      dataLogic_byteCounter <= cmdLogic_dataFork_payload_addr[2:0];
      if(when_Axi4Upsizer_l68) begin
        dataLogic_byteCounter[0] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_1) begin
        dataLogic_byteCounter[1] <= 1'b0;
      end
      if(when_Axi4Upsizer_l68_2) begin
        dataLogic_byteCounter[2] <= 1'b0;
      end
      dataLogic_size <= cmdLogic_dataFork_payload_size;
      dataLogic_alwaysFire <= (! (cmdLogic_dataFork_payload_burst == 2'b01));
      dataLogic_incrementByteCounter <= (! (cmdLogic_dataFork_payload_burst == 2'b00));
    end
  end


endmodule

module Asic32To64UpsizerAxi4ReadOnlyUpsizer_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_input_ar_valid,
  output reg          io_input_ar_ready,
  input      [31:0]   io_input_ar_payload_addr,
  input      [7:0]    io_input_ar_payload_id,
  input      [3:0]    io_input_ar_payload_region,
  input      [7:0]    io_input_ar_payload_len,
  input      [2:0]    io_input_ar_payload_size,
  input      [1:0]    io_input_ar_payload_burst,
  input      [0:0]    io_input_ar_payload_lock,
  input      [3:0]    io_input_ar_payload_cache,
  input      [3:0]    io_input_ar_payload_qos,
  input      [2:0]    io_input_ar_payload_prot,
  output              io_input_r_valid,
  input               io_input_r_ready,
  output     [31:0]   io_input_r_payload_data,
  output     [7:0]    io_input_r_payload_id,
  output     [1:0]    io_input_r_payload_resp,
  output              io_input_r_payload_last,
  output              io_output_ar_valid,
  input               io_output_ar_ready,
  output     [31:0]   io_output_ar_payload_addr,
  output     [7:0]    io_output_ar_payload_id,
  output     [3:0]    io_output_ar_payload_region,
  output     [7:0]    io_output_ar_payload_len,
  output reg [2:0]    io_output_ar_payload_size,
  output     [1:0]    io_output_ar_payload_burst,
  output     [0:0]    io_output_ar_payload_lock,
  output     [3:0]    io_output_ar_payload_cache,
  output     [3:0]    io_output_ar_payload_qos,
  output     [2:0]    io_output_ar_payload_prot,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [63:0]   io_output_r_payload_data,
  input      [7:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               clk,
  input               reset
);

  wire                dataLogic_cmdPush_fifo_io_pop_ready;
  wire                dataLogic_cmdPush_fifo_io_push_ready;
  wire                dataLogic_cmdPush_fifo_io_pop_valid;
  wire       [2:0]    dataLogic_cmdPush_fifo_io_pop_payload_startAt;
  wire       [2:0]    dataLogic_cmdPush_fifo_io_pop_payload_endAt;
  wire       [2:0]    dataLogic_cmdPush_fifo_io_pop_payload_size;
  wire       [7:0]    dataLogic_cmdPush_fifo_io_pop_payload_id;
  wire       [4:0]    dataLogic_cmdPush_fifo_io_occupancy;
  wire       [4:0]    dataLogic_cmdPush_fifo_io_availability;
  wire       [14:0]   _zz_cmdLogic_byteCount;
  wire       [10:0]   _zz_cmdLogic_incrLen;
  wire       [10:0]   _zz_cmdLogic_incrLen_1;
  wire       [2:0]    _zz_cmdLogic_incrLen_2;
  wire       [31:0]   _zz_dataLogic_cmdPush_payload_endAt;
  wire       [31:0]   _zz_dataLogic_cmdPush_payload_endAt_1;
  wire       [14:0]   _zz_dataLogic_cmdPush_payload_endAt_2;
  wire       [3:0]    _zz_dataLogic_byteCounterNext;
  wire       [7:0]    _zz_dataLogic_byteCounterNext_1;
  reg        [31:0]   _zz_io_input_r_payload_data;
  wire       [0:0]    _zz_io_input_r_payload_data_1;
  wire                cmdLogic_outputFork_valid;
  wire                cmdLogic_outputFork_ready;
  wire       [31:0]   cmdLogic_outputFork_payload_addr;
  wire       [7:0]    cmdLogic_outputFork_payload_id;
  wire       [3:0]    cmdLogic_outputFork_payload_region;
  wire       [7:0]    cmdLogic_outputFork_payload_len;
  wire       [2:0]    cmdLogic_outputFork_payload_size;
  wire       [1:0]    cmdLogic_outputFork_payload_burst;
  wire       [0:0]    cmdLogic_outputFork_payload_lock;
  wire       [3:0]    cmdLogic_outputFork_payload_cache;
  wire       [3:0]    cmdLogic_outputFork_payload_qos;
  wire       [2:0]    cmdLogic_outputFork_payload_prot;
  wire                cmdLogic_dataFork_valid;
  wire                cmdLogic_dataFork_ready;
  wire       [31:0]   cmdLogic_dataFork_payload_addr;
  wire       [7:0]    cmdLogic_dataFork_payload_id;
  wire       [3:0]    cmdLogic_dataFork_payload_region;
  wire       [7:0]    cmdLogic_dataFork_payload_len;
  wire       [2:0]    cmdLogic_dataFork_payload_size;
  wire       [1:0]    cmdLogic_dataFork_payload_burst;
  wire       [0:0]    cmdLogic_dataFork_payload_lock;
  wire       [3:0]    cmdLogic_dataFork_payload_cache;
  wire       [3:0]    cmdLogic_dataFork_payload_qos;
  wire       [2:0]    cmdLogic_dataFork_payload_prot;
  reg                 io_input_ar_fork2_logic_linkEnable_0;
  reg                 io_input_ar_fork2_logic_linkEnable_1;
  wire                when_Stream_l993;
  wire                when_Stream_l993_1;
  wire                cmdLogic_outputFork_fire;
  wire                cmdLogic_dataFork_fire;
  wire       [9:0]    cmdLogic_byteCount;
  wire       [7:0]    cmdLogic_incrLen;
  wire                when_Axi4Upsizer_l108;
  wire                dataLogic_cmdPush_valid;
  wire                dataLogic_cmdPush_ready;
  wire       [2:0]    dataLogic_cmdPush_payload_startAt;
  wire       [2:0]    dataLogic_cmdPush_payload_endAt;
  wire       [2:0]    dataLogic_cmdPush_payload_size;
  wire       [7:0]    dataLogic_cmdPush_payload_id;
  reg        [2:0]    dataLogic_size;
  reg                 dataLogic_busy;
  reg        [7:0]    dataLogic_id;
  reg        [2:0]    dataLogic_byteCounter;
  reg        [2:0]    dataLogic_byteCounterLast;
  wire       [3:0]    dataLogic_byteCounterNext;
  wire                readOnly_dataLogic_cmdPush_fifo_io_pop_fire;
  wire                io_input_r_fire;

  assign _zz_cmdLogic_byteCount = ({7'd0,io_input_ar_payload_len} <<< io_input_ar_payload_size);
  assign _zz_cmdLogic_incrLen = ({1'b0,cmdLogic_byteCount} + _zz_cmdLogic_incrLen_1);
  assign _zz_cmdLogic_incrLen_2 = io_input_ar_payload_addr[2 : 0];
  assign _zz_cmdLogic_incrLen_1 = {8'd0, _zz_cmdLogic_incrLen_2};
  assign _zz_dataLogic_cmdPush_payload_endAt = (cmdLogic_dataFork_payload_addr + _zz_dataLogic_cmdPush_payload_endAt_1);
  assign _zz_dataLogic_cmdPush_payload_endAt_2 = ({7'd0,cmdLogic_dataFork_payload_len} <<< cmdLogic_dataFork_payload_size);
  assign _zz_dataLogic_cmdPush_payload_endAt_1 = {17'd0, _zz_dataLogic_cmdPush_payload_endAt_2};
  assign _zz_dataLogic_byteCounterNext_1 = ({7'd0,1'b1} <<< dataLogic_size);
  assign _zz_dataLogic_byteCounterNext = _zz_dataLogic_byteCounterNext_1[3:0];
  assign _zz_io_input_r_payload_data_1 = (dataLogic_byteCounter >>> 2'd2);
  Asic32To64UpsizerStreamFifo_9c51cd082e6149aeaca9d6aed464db29 dataLogic_cmdPush_fifo (
    .io_push_valid           (dataLogic_cmdPush_valid                           ), //i
    .io_push_ready           (dataLogic_cmdPush_fifo_io_push_ready              ), //o
    .io_push_payload_startAt (dataLogic_cmdPush_payload_startAt[2:0]            ), //i
    .io_push_payload_endAt   (dataLogic_cmdPush_payload_endAt[2:0]              ), //i
    .io_push_payload_size    (dataLogic_cmdPush_payload_size[2:0]               ), //i
    .io_push_payload_id      (dataLogic_cmdPush_payload_id[7:0]                 ), //i
    .io_pop_valid            (dataLogic_cmdPush_fifo_io_pop_valid               ), //o
    .io_pop_ready            (dataLogic_cmdPush_fifo_io_pop_ready               ), //i
    .io_pop_payload_startAt  (dataLogic_cmdPush_fifo_io_pop_payload_startAt[2:0]), //o
    .io_pop_payload_endAt    (dataLogic_cmdPush_fifo_io_pop_payload_endAt[2:0]  ), //o
    .io_pop_payload_size     (dataLogic_cmdPush_fifo_io_pop_payload_size[2:0]   ), //o
    .io_pop_payload_id       (dataLogic_cmdPush_fifo_io_pop_payload_id[7:0]     ), //o
    .io_flush                (1'b0                                              ), //i
    .io_occupancy            (dataLogic_cmdPush_fifo_io_occupancy[4:0]          ), //o
    .io_availability         (dataLogic_cmdPush_fifo_io_availability[4:0]       ), //o
    .clk                     (clk                                               ), //i
    .reset                   (reset                                             )  //i
  );
  always @(*) begin
    case(_zz_io_input_r_payload_data_1)
      1'b0 : _zz_io_input_r_payload_data = io_output_r_payload_data[31 : 0];
      default : _zz_io_input_r_payload_data = io_output_r_payload_data[63 : 32];
    endcase
  end

  always @(*) begin
    io_input_ar_ready = 1'b1;
    if(when_Stream_l993) begin
      io_input_ar_ready = 1'b0;
    end
    if(when_Stream_l993_1) begin
      io_input_ar_ready = 1'b0;
    end
  end

  assign when_Stream_l993 = ((! cmdLogic_outputFork_ready) && io_input_ar_fork2_logic_linkEnable_0);
  assign when_Stream_l993_1 = ((! cmdLogic_dataFork_ready) && io_input_ar_fork2_logic_linkEnable_1);
  assign cmdLogic_outputFork_valid = (io_input_ar_valid && io_input_ar_fork2_logic_linkEnable_0);
  assign cmdLogic_outputFork_payload_addr = io_input_ar_payload_addr;
  assign cmdLogic_outputFork_payload_id = io_input_ar_payload_id;
  assign cmdLogic_outputFork_payload_region = io_input_ar_payload_region;
  assign cmdLogic_outputFork_payload_len = io_input_ar_payload_len;
  assign cmdLogic_outputFork_payload_size = io_input_ar_payload_size;
  assign cmdLogic_outputFork_payload_burst = io_input_ar_payload_burst;
  assign cmdLogic_outputFork_payload_lock = io_input_ar_payload_lock;
  assign cmdLogic_outputFork_payload_cache = io_input_ar_payload_cache;
  assign cmdLogic_outputFork_payload_qos = io_input_ar_payload_qos;
  assign cmdLogic_outputFork_payload_prot = io_input_ar_payload_prot;
  assign cmdLogic_outputFork_fire = (cmdLogic_outputFork_valid && cmdLogic_outputFork_ready);
  assign cmdLogic_dataFork_valid = (io_input_ar_valid && io_input_ar_fork2_logic_linkEnable_1);
  assign cmdLogic_dataFork_payload_addr = io_input_ar_payload_addr;
  assign cmdLogic_dataFork_payload_id = io_input_ar_payload_id;
  assign cmdLogic_dataFork_payload_region = io_input_ar_payload_region;
  assign cmdLogic_dataFork_payload_len = io_input_ar_payload_len;
  assign cmdLogic_dataFork_payload_size = io_input_ar_payload_size;
  assign cmdLogic_dataFork_payload_burst = io_input_ar_payload_burst;
  assign cmdLogic_dataFork_payload_lock = io_input_ar_payload_lock;
  assign cmdLogic_dataFork_payload_cache = io_input_ar_payload_cache;
  assign cmdLogic_dataFork_payload_qos = io_input_ar_payload_qos;
  assign cmdLogic_dataFork_payload_prot = io_input_ar_payload_prot;
  assign cmdLogic_dataFork_fire = (cmdLogic_dataFork_valid && cmdLogic_dataFork_ready);
  assign io_output_ar_valid = cmdLogic_outputFork_valid;
  assign cmdLogic_outputFork_ready = io_output_ar_ready;
  assign io_output_ar_payload_addr = cmdLogic_outputFork_payload_addr;
  assign io_output_ar_payload_region = cmdLogic_outputFork_payload_region;
  assign io_output_ar_payload_burst = cmdLogic_outputFork_payload_burst;
  assign io_output_ar_payload_lock = cmdLogic_outputFork_payload_lock;
  assign io_output_ar_payload_cache = cmdLogic_outputFork_payload_cache;
  assign io_output_ar_payload_qos = cmdLogic_outputFork_payload_qos;
  assign io_output_ar_payload_prot = cmdLogic_outputFork_payload_prot;
  assign cmdLogic_byteCount = _zz_cmdLogic_byteCount[9:0];
  assign cmdLogic_incrLen = _zz_cmdLogic_incrLen[10 : 3];
  always @(*) begin
    io_output_ar_payload_size = 3'b011;
    if(when_Axi4Upsizer_l108) begin
      io_output_ar_payload_size = io_input_ar_payload_size;
    end
  end

  assign io_output_ar_payload_len = cmdLogic_incrLen;
  assign io_output_ar_payload_id = 8'h00;
  assign when_Axi4Upsizer_l108 = (io_input_ar_payload_len == 8'h00);
  assign dataLogic_cmdPush_valid = cmdLogic_dataFork_valid;
  assign cmdLogic_dataFork_ready = dataLogic_cmdPush_ready;
  assign dataLogic_cmdPush_payload_startAt = cmdLogic_dataFork_payload_addr[2:0];
  assign dataLogic_cmdPush_payload_endAt = _zz_dataLogic_cmdPush_payload_endAt[2:0];
  assign dataLogic_cmdPush_payload_size = cmdLogic_dataFork_payload_size;
  assign dataLogic_cmdPush_payload_id = cmdLogic_dataFork_payload_id;
  assign dataLogic_cmdPush_ready = dataLogic_cmdPush_fifo_io_push_ready;
  assign dataLogic_byteCounterNext = ({1'b0,dataLogic_byteCounter} + _zz_dataLogic_byteCounterNext);
  assign readOnly_dataLogic_cmdPush_fifo_io_pop_fire = (dataLogic_cmdPush_fifo_io_pop_valid && dataLogic_cmdPush_fifo_io_pop_ready);
  assign dataLogic_cmdPush_fifo_io_pop_ready = (! dataLogic_busy);
  assign io_input_r_fire = (io_input_r_valid && io_input_r_ready);
  assign io_input_r_valid = (io_output_r_valid && dataLogic_busy);
  assign io_input_r_payload_last = (io_output_r_payload_last && (dataLogic_byteCounter == dataLogic_byteCounterLast));
  assign io_input_r_payload_resp = io_output_r_payload_resp;
  assign io_input_r_payload_data = _zz_io_input_r_payload_data;
  assign io_input_r_payload_id = dataLogic_id;
  assign io_output_r_ready = ((dataLogic_busy && io_input_r_ready) && (io_input_r_payload_last || dataLogic_byteCounterNext[3]));
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      io_input_ar_fork2_logic_linkEnable_0 <= 1'b1;
      io_input_ar_fork2_logic_linkEnable_1 <= 1'b1;
      dataLogic_busy <= 1'b0;
    end else begin
      if(cmdLogic_outputFork_fire) begin
        io_input_ar_fork2_logic_linkEnable_0 <= 1'b0;
      end
      if(cmdLogic_dataFork_fire) begin
        io_input_ar_fork2_logic_linkEnable_1 <= 1'b0;
      end
      if(io_input_ar_ready) begin
        io_input_ar_fork2_logic_linkEnable_0 <= 1'b1;
        io_input_ar_fork2_logic_linkEnable_1 <= 1'b1;
      end
      if(readOnly_dataLogic_cmdPush_fifo_io_pop_fire) begin
        dataLogic_busy <= 1'b1;
      end
      if(io_input_r_fire) begin
        if(io_input_r_payload_last) begin
          dataLogic_busy <= 1'b0;
        end
      end
    end
  end

  always @(posedge clk) begin
    if(readOnly_dataLogic_cmdPush_fifo_io_pop_fire) begin
      dataLogic_byteCounter <= dataLogic_cmdPush_fifo_io_pop_payload_startAt;
      dataLogic_byteCounterLast <= dataLogic_cmdPush_fifo_io_pop_payload_endAt;
      dataLogic_size <= dataLogic_cmdPush_fifo_io_pop_payload_size;
      dataLogic_id <= dataLogic_cmdPush_fifo_io_pop_payload_id;
    end
    if(io_input_r_fire) begin
      dataLogic_byteCounter <= dataLogic_byteCounterNext[2:0];
    end
  end


endmodule

module Asic32To64UpsizerStreamFifo_9c51cd082e6149aeaca9d6aed464db29 (
  input               io_push_valid,
  output              io_push_ready,
  input      [2:0]    io_push_payload_startAt,
  input      [2:0]    io_push_payload_endAt,
  input      [2:0]    io_push_payload_size,
  input      [7:0]    io_push_payload_id,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [2:0]    io_pop_payload_startAt,
  output     [2:0]    io_pop_payload_endAt,
  output     [2:0]    io_pop_payload_size,
  output     [7:0]    io_pop_payload_id,
  input               io_flush,
  output     [4:0]    io_occupancy,
  output     [4:0]    io_availability,
  input               clk,
  input               reset
);

  reg        [16:0]   _zz_logic_ram_port0;
  wire       [3:0]    _zz_logic_pushPtr_valueNext;
  wire       [0:0]    _zz_logic_pushPtr_valueNext_1;
  wire       [3:0]    _zz_logic_popPtr_valueNext;
  wire       [0:0]    _zz_logic_popPtr_valueNext_1;
  wire                _zz__zz_logic_ram_port0;
  wire                _zz__zz_io_pop_payload_startAt;
  wire       [16:0]   _zz__zz_logic_ram_port1;
  wire       [3:0]    _zz_io_availability;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [3:0]    logic_pushPtr_valueNext;
  reg        [3:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [3:0]    logic_popPtr_valueNext;
  reg        [3:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_io_pop_valid;
  wire       [16:0]   _zz_io_pop_payload_startAt;
  wire                when_Stream_l1123;
  wire       [3:0]    logic_ptrDif;
  reg [16:0] logic_ram [0:15];

  assign _zz_logic_pushPtr_valueNext_1 = logic_pushPtr_willIncrement;
  assign _zz_logic_pushPtr_valueNext = {3'd0, _zz_logic_pushPtr_valueNext_1};
  assign _zz_logic_popPtr_valueNext_1 = logic_popPtr_willIncrement;
  assign _zz_logic_popPtr_valueNext = {3'd0, _zz_logic_popPtr_valueNext_1};
  assign _zz_io_availability = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz__zz_io_pop_payload_startAt = 1'b1;
  assign _zz__zz_logic_ram_port1 = {io_push_payload_id,{io_push_payload_size,{io_push_payload_endAt,io_push_payload_startAt}}};
  always @(posedge clk) begin
    if(_zz__zz_io_pop_payload_startAt) begin
      _zz_logic_ram_port0 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @(posedge clk) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= _zz__zz_logic_ram_port1;
    end
  end

  always @(*) begin
    _zz_1 = 1'b0;
    if(logic_pushing) begin
      _zz_1 = 1'b1;
    end
  end

  always @(*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing) begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush) begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == 4'b1111);
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @(*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_logic_pushPtr_valueNext);
    if(logic_pushPtr_willClear) begin
      logic_pushPtr_valueNext = 4'b0000;
    end
  end

  always @(*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping) begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush) begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == 4'b1111);
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @(*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_logic_popPtr_valueNext);
    if(logic_popPtr_willClear) begin
      logic_popPtr_valueNext = 4'b0000;
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_io_pop_valid && (! logic_full))));
  assign _zz_io_pop_payload_startAt = _zz_logic_ram_port0;
  assign io_pop_payload_startAt = _zz_io_pop_payload_startAt[2 : 0];
  assign io_pop_payload_endAt = _zz_io_pop_payload_startAt[5 : 3];
  assign io_pop_payload_size = _zz_io_pop_payload_startAt[8 : 6];
  assign io_pop_payload_id = _zz_io_pop_payload_startAt[16 : 9];
  assign when_Stream_l1123 = (logic_pushing != logic_popping);
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_io_availability};
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      logic_pushPtr_value <= 4'b0000;
      logic_popPtr_value <= 4'b0000;
      logic_risingOccupancy <= 1'b0;
      _zz_io_pop_valid <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_io_pop_valid <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if(when_Stream_l1123) begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush) begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule


`resetall
`timescale 1ns/1ps
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
LTo+RR5bl49AqkoaRI3HdH7EvoHQXUjz5MXSgn5Ee8uvWeIACqKDBEbpGcbKpqef
xPrnwskiZBmWCLrYHRnEuuJ4Mc13yRl4Rn/u2xfZSNM0Vc2kslEM3ApYN2jC4k86
f2FXSnTePvfmHxPJ1D1LQqNs3dWbfpQD5BJ2CTW2WgaTCP/dUFC+oq6lRHP7n+YG
MMqEfM+meutv+sOjDKY8jPJPA8SmNbnSMGVBRd13nr/9hvwP9aEp7WEAjqje+UKj
WvlJqudjKjurl1DpSh/lCFz7A9gVdCEtM8yJhkkr8bBcgZne7cH2O5UrpfcEhfgd
VIeMLFNfCtpigzgz4JO0SA==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 752 )
`pragma protect data_block
M2CnGq0w+NsLFiSXmYlSRmzhrqsHqeAL32fIqCU6IWjD0VYufaipP1RGus0t3C+2
fMdz7XvzYlZ2rFYg2eiTfpJbX6V4cBL/lOn/KUR4719+lrQ6zTO+IS0GGZ45sTzd
eISbD+HGeMbReLGnUOQYho+TbjEdAFCNHInGmZ0iuFcG04X5WsPiFb9eaMR7xzN+
eJqdUlebrW1ftxRNOoFpsyGo/3aGxw3QXsrC05QnnlJNrhe9owjYsujtrhoU33fV
kBjRKSPlWKHGxqUjC3a/MWihC4TGgjDLHqbFWJxeSbIcEsEhzS15Kc0Yh8+A9C4v
hT1eXTEYYFIPBNci++eNWIShHJCvJTsLVoFjb7p1ryWly4YKDW/eKhEEecSBEiSC
MqSTEew39MutqjeVkyZxwcfYTXKplsUOdEaN2dvFqRNzyOa06/Dt6kUDigj/6jZx
I6qHMNW3DX66ppJMo96/AGI1ViPJRBqv9QQWhQhMbtDhEWaqK2Qb7MV3O+fipprs
E4PSeuV2/4AjQwnNKBLLT5BFjESv4fPu7he/PDQxt75bZ/9186cf9O0Fh2l+0Qtl
Vk7iLripIbLx635BOILg0n8KtTa/ViX5sfNSVVjntvZTq2GMLmgNoVrEDs8AED3O
RuZ3bBE3yKBwUpB+oHfDGvazI4RCHOiqiRoaYu2m4FUqPycsg7J2YcmmWKVi/Bwn
0ERGW7AIAH4Gf4CpsNV24LneRO2hsu7H3xq+pjQwhYatPcx3UtoeiABKVdy+boM4
XC08jcqfpRfrWNohIZtHTM5mUcsjaWLSiTyioU+DYIgvoi1dHBP1ntmgfJKzDSC8
ozvYQZuU4lXvSX6JqX5W1e1gRUbzdrncvgKinF18kdDylNp/cwH1KQtOovtulbdC
WUtedpa4nRYleMt/MsSuM9Zu7X0a8iGXPL+cRbYWeIdq4/w1/SCI4io1Bp5treuE
FgQSylT70x4lA033PLexrsEgKS8QZ/xeuF9XY++tg0Y=
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
H6rp6VURBCsZF2wKcG86ZHjrZtDr5cB74+KJPvB6VAiNhuixqmtrhWWfINfcyZLw
Ts/tdJJjsWL0A+FcD5PltCE5q9k+LfOa4hk+4X4CSZqgNC4eVPhQu4K0WAic2Bf2
qxP9gGG4OJjuZ4DBXD3kx4CKE/uvgc8VV8T1/l8ScHjhmhgtMXujIfzGQs5N9NIp
/7Z4skkpOntMndpDkEQcofLPy9q1EpMzxa0OCw7V+R0lkbQ1cA8hmMTRQhQSYoIj
IYIDfGefdFT5gGh/DB7MuZJttF8kMFjDYWosIopmKIkBUWyOV4d8zhgCgFSx+1i8
bcfApR5OuLL/T7eotqqySQ==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 800 )
`pragma protect data_block
9GlTUcU63Rz1nDcglrNVgm9lThPV27FXkO1DB9DVYNmMfTlFiaPUxqyd5ZSXke+8
IN07GdEPle+fucboS97ezesCyZywJNU8KCF0S5mG7jSz/AaFxrZbnfn+KxICEOSa
XYjYqchqG2f5w7urQfDtk927sDlSuJJa9QsH7N0AMyVmiZJ2YjBeM/rc2p7U0BZX
4H34VfKs44J4afmZZhJB/Ox2l9gQ+T0Evp4LYn1prebjHzZv5MHoRajk3p3rvkPX
mlHxNQPu9hFGideDELCwGDF2IkGOLmBx4v5fODGkwL9lrWirskkzhgU0E2cDka+F
iLn5h1H6zdlVP71+L0dfAiQhUjv+qC6f8EElEZoSpZYmn0nlMeIRdR3PL1tLUNat
Sr2eHjX8BnXyB2toxNTROK1O6Epi3Fta02Q3sw4N4LrYy2l9FNsz1ue9Vs9WImxu
PkczokjxnEd2W841GJKQ/e1C3QnVuORkAGtZk06oi9H9nrKtdpZVMNB1R/bKQUxR
khs+oRUdCfl8DJOnc6pDUi3C1wQayDBBXvAN9Kch38jhlOfym926dICu5YptiiVU
bfH2UYsRdabr3TsvuZOKEhwMjSiAmhusyxVUldpyAoT1qLpR0qxYH23C6jPMcdJs
89vCRgffHhCak4hMaa8mYk3EzMP6C5mipWeQRE5x1WK+K9z+rOCTP5Pw5y8KHori
7NhHbdsIKnOwEHnmeEHHCrLUR4k2Hh84Qs1jckfWqkGvLjzzA7hOtf2uzOl16CzW
ogjsviBa/Dbsr/VwfAh78iKlHyZyUA+usIfssb6CJcCEVcPfPhLjpWua9MIn8GIf
iuicHqbGjlp5WQ4Z/SZXA8NXg+zS2aO504GLhoBUDHD2w5B2whA1BugU6Zcwo4H9
RejgMmg4JA5o58j1Qq5Yuh3wDaBysZw+qdYfcLFWEBcBObGumnKe69kESGN63EHr
uauIBBlhR4/x9Hx4BwHjJM7XkhZk4Hkk29GuHEMlcFmyllMZF9KLT8YffKqd+kDv
aYwXpJnch7PALKBmDkkxLQuklcIZfHFN6TKmNtgLu14=
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
g8YZMQr4SybXcpZ1INXPitQ0lbCbpS5QBtq7g8bCMYzIQWAvr5nOg+KElnxHIMZP
/QIs6VqOiw+6igUXfbIN+wLDs7ClkBmxD+gxkVftwwqinGx8Y4vTNfvUFBUpC8DU
Z1cHrgfCUxZxRMMl1rJZ5rWIy6UGlyErs64UppSp1P+wLBLTu0xqv4fkgbXWGvoa
I5pPhHHV06+aTwo30oen0H2CX5cB5QdbPfEsXXSfOsxmAx89vudCJoEXN26jh8aU
umebBJroUoXxYL1YhBiHVRnvkGNFnnvr/9Xn2HOEjHMq3o2+QZHoWByMm3mog9c4
HKAYzQlcsTGDr8cTGn/lKA==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 5808 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
eIaKcQeBATziT4Y5oPxwuU0dcmoWh+zxj7+UlkKAdy2dGK41GO0+cc/G4OhEG2cb
NeQYWPM+hBTWTHz1ob/OLNbgLGlO8JoQnRcaQ31ztOTjxbpb22GJyaoQX+2VA6C7
JzTvoHckAOOACH7xRKLluCmg9fYxNYoF1E4g3nArE/HBfL84Ffs8wbuDFIQFb9Y4
6jqAaIB7TpugSfmviBYTao+yq0je8gTMYeD7hsZj/Xkkd8TEAexXNhOhvtZga5cL
tyieqMpWed0kuWCv0R5RubdH8sO3TNl/9k+j69hHi5IKN1pZVD6cQ7ldfrShy3Ag
gMjGbD6PkoWDWVY44bXBxA==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 2048 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
dJNX6ias5KqCOc/qGhMMVZc7UTM3EKgInDj9xsvO4jKlvOkr6vAGtAC9peDTLi+Q
l74WKEP7/TUvAXp14BFRU9p/ZMkdX951DV89zgSpij6sV7D7bOQYEePWK+/kcMGZ
UXp+u/FhLNMC1PCuxkWWKAd89WKWG5DFGnQw46U34PV7NielNBMP35E1xa/UTl+o
viB/dA1Oxvvohle8ciNmhw38KQZ8zUeydABWsND2Wgx59Urmi6szKKiEA2aBIaN/
awMcor6nwlY19OLAmeGU568HH7FvVe8uwv2OIfP3tOncaBJHhS7mnzRUZ91zbVQo
tdEvwZ6xVbJdXAW0/VREog==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 8448 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
Yj2NttD+yzMufmAEqbtZD8v5cZLHy7Rs2ACgBGYnnlz2/PDdb/CA5FFQpfAspUBF
IahprDpklm5Iwut+VHHU8fXKz4VO+i6oIdunOm0ZwLRll4p1XHQru1wWvxRkFnJQ
j0ZdfsjyXt2lKi/2P59hNWXAdZ0fDKS1DSlBb3mPgjwto0wgQV9SIOVFl6uVSnJk
whxoUpdv/m/GcxA/WwTx6uXXPn4NAMTAhLotY7qvhWOgmrAMW0YTRySMbMyOglRt
PCrLBS9d5pQwOPElMpmeWCUW5azKTZJJIoXsO4djhAjZugQEwiSgUElQAQgWn3zW
CHU/dPtVEm/3qVYX59wDuQ==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 9200 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`resetall
`timescale 1ns/1ps
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
lZUl39TnwS8m3xSzsUE/lF5RxkTEY2m6FWru1rluT+YPWeonsYyTu3j+WfnzJqZq
E43u7Qi7rdpBfe9c1Ad3oPe2F03cf0PnTHc8LAxCfb2NiulpXk/OJktRG0motDYT
qNjxGuhtfq/TBm7I36Vix/OiHfK7RPYfvvrp81pp7MQk3axnL9h+Mq/dEZuK0nzU
HQhc4fdV9MVaD40jcZQWaqoRF1z1/9D6MlB6SixIpfgJpe8CgWjAuDzIHhve94aG
fvESdKLW8ChUteRZJzJU+dx0H4wXfwOD7Nq4p3VvylBaVZQuhuOSp+ryZFjwwwpu
nw5nEOkktlnof10eD0OtxQ==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 9184 )
`pragma protect data_block
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
pIFX6OumFa5PzJtF70lWaQ==
`pragma protect end_protected

//pragma protect end


`resetall
`timescale 1ns/1ps
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
bnAZl00rjX4zk9mBDlVege6cxKjtsaCeWdpKAJmqkGA1geGLKbVpIU2vDFbYPWjD
vw90b0c78ABbmWlGgqYAVg/HvfdBabdoY3sliK8wnj/y2mPUk0xCJfjpMBk5anrE
d6MHcZxqeTeEc+jXPJxwfokzqpfXFmBp0tLbnn3pLXDJnpTz2WcuofN2gyTUntC5
QWIjTx+/kL+WXdHxeBJrwT9M+EaLp7uHEnWev+FuZrcU94cT5GOLLXKl/XmCZqB1
FY4YsS4kgfXIsV5xt75Gx/iBISlTYMRqzhidzY5f+VkNUPwU8VD8JxUOAR6bW9Fx
lcnjdy6R1KZNVJKb9lAc6Q==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 7296 )
`pragma protect data_block
ZprLelA5OYyArIeQBStaJ14qJ1l+1Q9VjtwS5Nz9WiSRrbv0hdfo41+WH8StMmQ6
g5fIhfFNeeYgsXe9FcjC5s63GN7Iugw3F9ytQWRHg9g+P14F/OR1nahJcqmbueDE
+MonvoT++jrSsD6jfwDFpekytoNyIRHPi+lEz0bN0QxCgbIneSxzwRwG+Q/P0F1z
E/BpImqv01roXx5S7PUFmOI/lQUy4pam12lvZ8V9N1h1j/4e4wqaucYu22U/xLjZ
obH83O5L8EJq+KBYBQ3auIGQmR09UWdl3sdqSwIkI22EnrCrHn7G7PttIoRw1qJ5
ZbFAyBCSQ4mgqNE/HwsdvsD8suxsNmyghITc5+71KdFAg32dEivBEd4KuwXp8NoY
lpmke5+E8lCG875LzswhuN8nwCaaT83cBNDzHMXoOn85R2+aqYSsnpln0H6ijBw8
toQ9OTYc32z2JzZbpROA0RKhKeEvX7t0Ai5ajH12E7G4lcQfQMsfmQ+o9V9+m5Ww
uLZBPbssMX9mXCe4Qd4kqb2NGmnnFEc0iUdxfORmfJoZpwzocv/kT7qS5gx5t8k7
gkdyQv8h8OnZNkEPQbJSaZGyhCZux0t0e25hE/aFhOzm2HwzRr4TYU3rnzvnHy/w
5Y5ayJngA1OlWTix9U+4yvLJuExPysJ2Ka7rwfeRWs3WSuC/lpk1hrgzigUzaK9b
Hjul27CevRU4sH3pcDHtGphJp66iJOJUAisAgvKD91cujPO1U8dgiqg9hQmaBvmA
6AJcu0SUNzu6w96YfGcNEEl5tCSoNlvxusGuubLA3/IHUFjfqr7p9UqKpUSkTinN
XJQjbXpUhpT8HFKkM8rN4IsGpJZa3IJuViXBY/WLKdse+QUQRics0MLmmlmWHXE8
EENTKCiOSy9gZKTzPd4j27AUscZWhc8cBPE5motlN9Aj6TvkHXr0xKcgarEzqhtB
VIWxYCRTkDU/dQW4jtXf67UPGZotgayzI6b3r+ujjztawdcEM4/Qi4gdYyPCLvOE
OZERM47R+mSehWEb36C0dWkdrtS3B+C0IM55sO49smEjrVoIUTZAwlARjgldayNx
T3MFVh2w9+wydXTDi9QNJucYCx/zln+7CxhQ6qBWrzlZ80PH6hzpQpc+PKX4wLiZ
1bDVL4swYddr5S2GDM10nPTIxnrx4h4faqI/lrDZKfHfMoDzRUZvHJ7K+cx0xAJv
lMNT5NCLZezf1tTRa0AmHixSHnHuG0FSdZ/rPaFAb7+OY29B94zPnq20Z1+vQAF2
RlYPrRKZJOB75QHIsqTtU70AwQ64wzAl2X48VrDVN53bB4zCBfYfSfI39nNVNqXs
oJmWTc/YapAgHs6ORbsvNqpWFkTOTlUE+Pk2vJj18l+lofFxFE/F+9f/LxFX6Zy8
ysraj/joPfq/SLviz27wcbBLuBfhHNMKUfs6nlasqoSapNs1fx38mQx5PcpSDxxh
u/wd4Oct2smb8l/Yq7nm9AC2tLtIG+wUlKVBCj6/a8HOSE/NO6Y8MoKQfjQiutU9
dJlO74d9QR3ZmNU/YH5q+87O1mg7ld0y4v4ssLDHi6YFk5rk4pzrnr0ZkfopuHuE
+uaCA28uIOMJYPEJCTXDztKI1JGqkrLUZdwYLM9rJtJ7dIhqStFJ9m79rWU8QM35
wDNGSN/j+RqXdgjHGCeypk+Q08EPu2jrIqu+7I1AyNLTE4vtSZWr92Z6BFWwrQe0
aErZ3wgJK+nOp/VVyw3ypfAuhbgyF5FgIIky4CUk9s88Gk1oW+Cudzz8tsvregi5
wsLXiEgSZxZz/JX7Fz0rp67o773wnVhARlk58HNAGV5t6FWDTVqsjt4nNfCD6FTy
a1RQwVeyYP2XIkUjJpJ1Ys7g6GLAzDlyhE8lBeDXAbFykVQmdUSwHBX/lyqGYYqH
X+qwHAXih0bPGHsjo+C5WfkPfd6fnQZl70ljHBPMXjTRy8emo1KXi7SL15poDcQ2
q7RkpBXB4gEe+zUSW7GPJPWwR8ArbiWnbHACRXVWJoNodGOxj3kb5Xol5jYG3SLT
SfoXLWrTIJz2ftUX6NoUgOp/YFMuXnaxXhfMhvvwuWJfR0rdP8PU8GvXAVmHS5Lu
YDGXii0nYdWhtIDMEq5VRI6TL3mgT/gmWJvCmO//J+ErPOKPkx6xl4RsHbQXWCBm
+Rb3JuIiCrnAW6DqaPJbpew9I/7bckJILWxbr9V6UkzfoLGGcOK2hZZ+sigjnm7i
geeJZ8gJrLmqjelaafEXzUPYOpq27jYojg4sMc/umJBlm7XF9lArCkCQcVggv0lR
fozZsg5v6IusqvSSPWV0UNW3yvSS/gllZN9kkuPVpcHqK2ThdAy5V0mVFB+AZYMo
OR51PsTbEdfqbl6IUxx8rz7/QtfTrd14SAHhFtbHdmhCcSUYMlbTUHwIuxA5yZxX
hMRaMbYoZWIGohzXJ2jbfsDTcjs8tz6DF7OCG0m5BtGO+qW0e3TaCGKu+DJGM5qg
ZHW7moxG0OxDjOHMRHO0/xPy6JbVM4HHnnI7mwjLMTJgL2Bd0+0UevLq8/Uhqb7m
E8EK+KFBFBIWm7dYRjv1NtUoUKbmNdYuVHrM+zpm+J42R0fuX+PIehsgaWe/SiY0
g7Tnygy5+v9p+oURkp4LoXgDnMSylLtjwMxlZGxZRLb/E6D8pRqqpxogcLiYPwbG
a+Opt5cnIEKLwkONFb6qTBdwnAFvXbS+Qi6g+YavxvTPAed/mrFN/SV8y4xOmsns
IohgH55OiQC8volnddYPFfjL+xWPiDplwtV4ThavdjpL7Uf6epCIq6M6T6aM3Mw4
bCi3X2Ipv5ufCRm3ZiKCL1p4V7hThGcPXtlLXCiTOKNJq3jvgfJhFP7M5pHn2g64
v0rOiWgiIMyhnXx7gPHq0XsI4V8J/9sOJxIgTgDFSgYsnrZ6MOARnvlgVNltJliz
unKUBNrUgK4fKbsykNelxIPsIn31o5gPl14NA7rNginmR5d7kclystgrKWTATqsS
1SnCqy2ipA3+7SvGAyQUJGYOtrGesnL0KcgFEJIDgra0e4FkF5SHLakjfijic6CO
34GTkOGsnvBxYCMoBfGGPdw7DxGs4aZnpdUqc8iJDbH4ecrgc4QN6bkJsr5M9zVb
8KA28pZFHR9YakXlAzldottOYoaKb6uYaB2MP7TuKGsU1UGECBZLwmN0pUYgTrO/
Uq1m/Wzsrb0Pg6feMBoMpbOHVajqZcJ+W7sV54QOuLsAiH0zZiZFzpC2pQR1pEv4
74sZxRD4yRv1GCDVPzOKCR6EmU4d6r/FroCHrC/XmfY3xUp+eTAM5vkUKuZn7Scw
uQfdhBvqq0tnO0CxU7SPGRQQyUuLDryhzNT3O4nhT+mfpi+zD2Tx92HfTPUW6/OW
BMLEbnMmxcbW5ogeOF6Kx6gF3/WfMKFi/WNZI4m0obgMO0+l8cOklJaRqzZvBOAs
D6zJJJBNi3/BGsLtC8evpSwXqmetpoqMH+KDlVEEaTmEQBAOqD+RgiDJEx8uTDq2
R7IQEPZ1OzRM06Pws0Ap7aW73qYwhIOe2KRxY7YM2Exq/M94FmAzdI90bQRgAbGV
3vIwUSHZ3Fi1LQ8/Qzz2QboTZNe43nBXgUrGhK7qD168EMb41goO5R76zejqIXpa
P059ShalYbQx2RJ6HIEPHLjSDzHHpZQT4/79DNHFLkg/luu9ttcvPEB1ANS3hB39
/QkB0hZ3OEvNzIiYvHsClMr/WEhaArtE9IIkk379lWdj5lQTNbZ2FFT1gBjOsJ/t
iRT6ca6XGtobHP9udz7DAgHAVD7zmol1Cbdo2xARMNeih5B7dlO7U5fzHDRNnPzJ
6q7ldeeQY6qOFezosLMmVtczeJbtNZpyF0YbUzq7ZSjVehraJRB5RQxEAHrQ+qk4
JCwj++6DFouNY9DWL5hHsOa5z2C7dBwoRZppPU5gmjW9Y9y53PNhQ7iDkTwd2pZO
zCUEBVtOt2XCQy3MS1ZK+Is4DyC1gVLMExoon1kyvW8+tp6INUeL0gWnjwFHDYfd
E6ksliBBoQ1dn1sPh3SaRRi42Dk9k9LU1lWzZUxK08u8Z3qQ4xNw3KcKUrrHoZ0t
koetYvQKgG5XxWKmvJhwJ/UMDo/OarFaFwZcgdirXLE0x8zSBaRoLqLYh1QPGxsJ
n4ULZwdGrXKWR85kpFFCw5O6m4Cd/E9zsSLFSCCede7fP5DC7W/19hibueXUwqYy
Q3WKGodWb6hnEPUdRVsP2DQ3lqOFlVnMLil1JXbp1blLoXScK0PKsm5jyBBrO+XT
n+3j1aQwRkLAa7NavzF+rL5fZ/Q8iDlzPvoeQb0aIKFBc9awi4NJnpINdIGamUJn
S/wDREx+rIAOsl6u4jtPDJMblrCEOANBy3KY3lDDQZW/SJOWucAAixBLS9sFQc5f
bs5qn/Tj4g+4HxnX+h5OPQ2c1iafSPF67h8v42arzNUbdvmkRTodyFCx+nPyxAsn
Ko9G2eapPYxjx7Z5/z15aXNT+wxIcukeaysTDEi5F9IAO+oduWCTPTddVnnl3EW8
psgGb/oczoYltEp+/GfbkEsklo6JQ7fDtrHyfDcasaSWAiuGamr6S160Y4cIdbT9
1z7qadCZ2Ou2bmdErj1zTpaQXiJxkeUs50ksRNGv5hA0Jrlnr0sbxDeaeaqgmdS3
8QsjKU6+WamtyK2ook+BDJyaWmXS4diLlfCbXSsiWY1Ijjstv6RXp7Dtyo+DRrr7
01XOs1YTwdXf7UfCLq7uxl4F6+ZRitejw740Ebydk8dnGPYhh1ORd7LMvudm1H+C
jH0dUbmdE7HjccSfRHqQm1YnkJksvVMEUm+YckfvQL0WiCHuQRv4NFwrGvmu4vG3
uFmQsfPTN1NJQ13twxuv+y6c+GmB+SYR0q9gIFNtVg85q8VgpBERwzPyVx0+JmYY
vdzlFqWzH5AWwDT5YglqZRujF2wW63oXHCBgW71DVNwWg7lpXuiPEiXUT1w91jxP
ryFaXZunnEOIr6s7CXHI0Tqr4EM40ZY6OWz9eV/glaVcVm4fkWR5epRZr4hGH8nQ
9H9z+8hsgOOhNaX6gMLtQHAfwxIUfARGRh7MNpNNQkp4+agUyTcjrcwgfnL1JbA2
9GUMRZkpyyjtahA2KDccxdPe09QRyl/BSlbySPN+KBe8pvDA4m0tLiwYQkZm6bjQ
wGUKdazVZDs7w3UvSPOhJtY2eyhvDV0cpQikR37cAXQTVuJkiswiigDNTqVDLnXm
if+u+2zbA2UdMsP/KghFCOjCY8dUTPGNjks3dvY5okZIpkeLNpEw/9d0nruBboPo
CrMSUjVgMggaXDq5eiINEPzxZSLwaWIvwnGA2yNcgZxSXI+e4J0YHtp9fBc4Xlp2
k7fDcPE+WXPt+Dkdbv9uUOBrTZp1e71YbFXmjhykXw0VmAiAsr3WreXpEfzMsnkd
UPZI3joK4anTKn/anvLm4RkN2DeyfvyDriFxc5LjUC/zbPJIeiIyowj2Cf5BNAwy
tQpqsb62O/icwTlc37uwjEzymMp+IIIGAnpJRn+ho+pQ916m5EpyECdJaklnUzG9
dlCGqf3p5/QZU8ABXjoVmy8pF/66cIjBxycSqIyBZS4ZSQdfnvvL0f1ZFq1siZ/R
n6fidNSxN4dmUNXbZUfbgyqvFxMYLf6TFK7AKk9lDDRlBcttlrAdSqpM2gPMkUE4
H2fJhurnE0+Uy4rpLKBWx8tz85k9asVxKmuEimb8CFD6O2ZTy3C4k4j5WTrcKcjn
nWj34Dl96jH0MI91+mBp0THHd917ooKaEop8z+jCipzCDfpit2/esXOE+74Hat6e
Q260hPufhc4z7Git2UsiXzkpWnONmOvHJWW7hQl4dOiMG+Ertri3+EjkO5VxDIX+
YPRJXs5YY8eHRWYEWsreUYQ+sHWQaLpp4B8gJDsdf5PxJaTjK2ZTQL4ecq4FKiBt
GNDi5+xXTnhP49ek0ONzGBkSdwd2G1wchHHHNdXqHtFTbhEWl+1P0Nvq7FQzQOMH
H6j/cIV9hEbXzwbrwjfCoSro7ohZ8e4CI8J2kZ3RXCGOxD0q9iXtdcaDhX6azTo3
C7XeegCjjxI0Nf0Tz/m+11DYsdR0T87sWVbFCpWE4MAg82ev8Wxc5ZwML806N5jC
m7n4Ic32tPN4FDGp2dlOGTnGuTCrfLX2tlB3uDyjn4nneUCn/Mg1wERzfQy3r2UY
x9cKw4WYLqqVUT+G9O1iMFB0L4U68sARrgGsEN3OFoQgrcg/dH/RGn1ZHvj3EGuz
wfsqoqv0Aln/eO9ztaiNQ8UY9lgywSrsBSTnTnn20DuUeDMxc6b0LO/7nSEF7p//
plE35Dp+hrYrGH76BJ0Q6R5CaYE5npnYt25KfZvkE0vB8qdJVwhMgcCX2V6zXJD6
w8j/3Xl/p3GwLT8rLYXBShUoYwzLNnstbAzG77clCHbLyzcS1i5BncmWWge5SJN2
08QzGhWJIlxXfxvxfLxetH32tA9h2E2Xd1tWgK8xn8YYys/iSsS+f6PprDdCtfmn
mpydsDpYsr953M3G7Uz0sS9rSHwrxS/l3OGdliDkMJNplMrpawQanbU+zlAQ0hhK
IrtC/2vBQcILcDxdA8/1RbpMdsKv8N9UsUCyxXShsof1G6lM0/SeaC3o82gigLub
j+v0Pf1XpYywZt36vGMILcyCBqqToCaMgFOuRC1AK5VTSFO+9nC61CUeGb3xGNqQ
nzUF7M5PAaW5wfjvYPxtG9F0k7owGSMZBvSL0K3VAsH8bIzu7shCHtMxkg5l7NtY
qHfC+D0k54hciGXd8a7N9mvtHwkJaUICJExF2ONKlWw4UkFxTmdCzL07T/AJVUyx
P1wve/Wb/LJHNuMv82KL75A7A6oLyMfwOVz9hgWZGw3vWZDTQ7s903+3PJlqotqo
MwEKOT/jXJySFlo0YJIe6h0In2GPXDcIKEb5DJajgkbYHU4XKbJQzvVtY5gVTuhO
QbxmGULQOk8VGfGTrzLrjSEJbeFRAG6dKIxjNps+VvPcaVC/vGh8aIpJ8WebJDWE
rVwfYFStLPeDzIuD3N0zUlrgmFqVh3tKTQF4xd2jqbTadhuO1ZWn9jhQYFRDfKqI
AGyoU4erWBgqIGfRuFiI8aaYEWPLPuMZ1jU8n/EnZEPVCegzJdommiw2F7//V8n0
GtTa7bNUUZEEkm+pVan3TEHxSuqDbgx1PG+MFsHXNu0Krpp2OF7rJI/YlVRKYlhl
+hx7ldQ1xXk/931MMDpK+u6ZHYyPnZfRSmYxgkcR3AXKB3xkGurdMd8vEZ8edlHm
LdOHE3pXs6frfXpDFItIkF/4II1lYVJbRlRmnX10LGt8ytbzOI/LFWkChAggLf0t
LKwEe1ksILpugiM0Hd0e7q/fV3dGyA7E5ONIO4gUTj2r072YJBk907TO8VicQ3VQ
WLPjB+OEFA5YWCzlFGjsNCE3jSqocvt9wSRL61SAFGHvYgGavT98ZXbsLGAWX2EA
ETkLWrJhyWRe/tiL0TTri+qNOxDdP5YdrocIO7jb+ockIYBv757Jam/zZ5nxLJ9T
BC+G1+SsNoq5dZzWX7bkN/jt45xuSasiWFoA03Qwd0CsEu4ER2rCXeRnwy7Nl96a
G6uEEuNR5nBShiDFuEENl7lZLCy/aRKekTJKAakbvJRHUrrzMqeOw8bI06+txPBg
CLhhtEGCm6tnOz3oMcAyK2YzSR4kAPqeAmbEfenk9jKiBDMm/f3e0JuKH0ZxbilY
EUyd0CBMYxt3WdllOvNbcwuA5YFEgPm/E9LZWu5YIyoiywiUTPXTrcMH3NU+Yr+M
C1Bvjsafd4u3FNAbZSuciNHvPTNAvQRvYleUS6AXYYK7P218se/n4mpCTzt3og78
ZYhFP8GuPq6RBl4u9TjEvxlA4KYE2oTqX6IiiuZAHqGDqisKPlfZfsXOa4PJj9wt
ZwoxGku3/H93f5c4ZPSpByPW3lWHFDo4YELk7YXc4l2cyW3KGG6prD7Ovp2Q4WHG
9LVL91r576OYUR1rRuKsmm65+HOXkXtr6bk8DcB33MoXx48Au2ri5PIlzGvhLWX+
HoYrTC7Pqm30kjZ/FAl5aMbLheisK1JRN8tyj1TRQDNKOLXB4Fk8Z7Flm1cHHVj1
CyzfklJQoLTsm8GBWrOAnQLLKmQTvZGzu1ZoTp5G4GmN6Dek+t04HJNqbgoirfWc
DJGwGNbt044ci33zkgSSnSH/B61IqCDNXIQ0Yv3AoJPVEmftj/Y39AVH3XfqMBom
Is2ecEVTt63Vd0ugczUjCiHF3KdB/u+a0hSsXCN6kqmmML+5DKD6v9XqNllQs/iU
qGbatejwH6q4rL7/1zDn8kypZxAU7Ua8bjl22bsYb5MQ3ys65mYa0HrGiWOXJJp0
vQ+B6k0QlpIo5wdhdIysBUftH3OUYmzKd7S1+4s6DvsTjDGE868dsLHUlJj7HBk/
hzG6oMqzt1Hfz7T/F4mdAucU/9sp788w++8qTM4KIvc4+wm080XwCv0aOUtrf/Xq
8hVruDNU06IBTbf+TacyvJ6SEfWcxvKzB4QXlA66t/Oq005cCixiFke4pnIRMYt2
ov0eT29jBmdBhrj448uEcaEzLFix/gCUW5mlawhW6CMrxCG/vvFpPUKoXJ0Q0Cud
VSGM2TuYpQdQTw6LqIAduqcjiGNYf7gOULsxn8REUP0ney/3Z1cbHbpzB+81BMIx
jXWxWpEibyUTCz1yxUpHmhRD3CdeELIfJb3X30lCEiaHgKh/iSe7pf1k5rZwCPDP
GbF97IMZyIg58PEa7yGRvH4ygbj5DPvNy02BRhKqzgH+vAB9fKqrIE4VyhUrIIXt
XhUH/Nn31nwZTh7FOH1koUu5NR0lb7oI95BQTz7TmvPm7XP9bAvx/PrWjuVKpwzd
drWC7B0DZY7zqzB/bDgISE5sWgBu/gFssI4wo3btU1WoaS0H08qC2dEooE/UKIq/
+/lwMjQ3kDwlrOS9bl5RQUsLHan/XyDxaaINGt+HJ7fnHYTyM+Znp+zFPsZndrxe
n2ZShGb/oikjtXSgzk/kfK1rP5hCAeJvr0FdnlZ4fV4jQwNHct5Hl1DncjyNkKb+
p7r4PPFt94OwD7d30f1sXNBGPYdsRAmMEfgvLxU48lWCIh63XxLj3O1zqnjIfcQu
Kf/x/iEVssUl4fgqcBmZQagoQ6YJjnWW3PT41c3RYIuWnZHPhLtEKtQVtg8kCvXI
qRZGxIiQTWvNWpS59M6OnOwzoacZT1JaN2tVmZcjAu9Bjki1b2rmLLyp97TzFa79
cNy8YD+tWBMlyHDQIEUg1/J2Sw0tocm6usjMgp3GTvmo2TydZU3QmiAJy5zAS8xJ
6QvbMJxFJrPdhBOiAGPhKUF00yr2JMBTx/afWx+Ptp8oUnyi7xPDIygdoL2iVUwB
YWUyC1Uy/akZXMLm/p0zu0lxJAn/V8zxIFNRhdCtF9a3eycIVYfqLJMzfdWYFEu3
n0gZtj17BunDUrlH7w2jHmJQEqLwT1aG5K8QE66kVom3Jhcej5BAigmstGA2OjEY
SPO7aE5YnRUH16O4fQrBSdKESU3md7ylWp0ztlWdcfzYrhI8vBhK0r1Yp7zLS9HA
ZUFzsaQOd0lKrsJe843S2kZyj1hlQ8IUemVj7sN3d+Kcq/LLbUzHO0sLVt1nbrHA
XISddJuerjlRvdh0JsLkkSSF9GncKzFaiAykDn+4oBhII3BvBveS1rm2oOSRAs7t
`pragma protect end_protected

//pragma protect end


`resetall
`timescale 1ns/1ps
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
Uc9d11JJYBaqhheF19mMfPGrZd8pP3nJP6YwRJhhdVxrXOEDQTEm50Q7nZHsO5Yy
eR5cNg7v0aO7mkEqjPbIjavYB6X3ZqwiZWn7IfibHOd6jLRi71haXitP5DpwVupj
SZ00H9+OxCoNuYLM3QlIfj0hxh5gv2HDZ/lARiPYT0cuMfxgPJgYC4iquycsLAch
+JfR2rWxLNgXGTC/S9kKNBNZMZ//FqFpHEUXX2ce0N15wMSwnNueFk+3+wM2YF/U
u4fXNb3LvUzfxAosxMzFC8qS8lmW6mtP2YbsXOlt0GNmhD0f7c937knooPtrJmF7
OqFgNa7WYnHk0oDbtqZQ8w==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 8176 )
`pragma protect data_block
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
cbivp9XoPVXaXG/Gou4iQw==
`pragma protect end_protected

//pragma protect end


`resetall
`timescale 1ns/1ps
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
bM0os5XttE8Nl3zsYMHsrmH25+MbNqvBgjWFpGKe3Cn1PqJCxfHRDK0B2NPs3k/8
BUnVQNLwqrf5WQG8ZiVklcAelfvQExkeTwr/lyRkTXtez4DjJlkDBhDdbJziDdaW
ifLzQ+H3HI1uDEBthdBLpkyF/WzcCllp6SNkn2mXdiw8nafdJWOrh3ebOJFOMPeh
+bvK+aBDh/LEHEorMGzOrDizrxG8QkB3Gro8clMYGm1fYxvy3dzPAYud31v+tocV
yRR1LO9obrHl9/YBRkjd+rvYprMFw/7czp9437GxeaI9kUVwPcgrQgIykPKo7iio
rsCFcL2ySDX9kULqY+7AwQ==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 7280 )
`pragma protect data_block
ybWans88EoajAyieoVXbeC9I4P37wShM3HjQesqrlwaEgPtDIajUAHmtTxonPsHl
2HrXYfxQlmoWJjUjeXQeJSh2O9qqqy4PmAPckX0cLjQ1xGZVpcroyEAU0RM2c80I
5JoHexjbidtn3sx0yClYTwePTpPZtPQMmyKTieubaqMxmSZAeclAi6dMTYiuOrGz
QyjgbvMQrSjesP6hLBhtCjnGoRQXdNy4VqABR87Pjsaotg4deub2KYLSt4P0inBX
w8A7IWhKhgYMTVLD9pdoBzNqyB6i/qVPbSOt3ikWaNwq0z2UOYJ6WoWv8I/VW7qI
UcJIZjwkdEKT09wOaNoIWPlt/npqES/BU035i8nvk7ZxV8BWnAhbZ9oZEafGG3Q2
xOyUyaPBY8sKh7EhPbo3Usq5p8DOHsSISufPafZHnv7U+KJPcOsOvQv9l0EptO6+
xN9Czcq1tGYRWVsg8z/fmoNUrw8LD4rj3VbQPjvAy6EHcIU6XzT3xTmo/eaHJL7t
bCy3Rq7Wr1rsJDkXR3hEqucUk/3uq3iXMR93Hr7xZGF1cOABbrz4rbs1aF6nqAYn
AdHBgpBt0+HpTi9iELwGq01Yn4mnlmAF66OeiL0HPoNTiEcoo41i6jJSjMdCja2j
K/X55UwGjPBLdcEjOd7Vu0dUdKw7gqoNHyzRyR8tT6WbOy8d3oUC53Abjkyv93IH
AmA7Ce/zCV/WGWYD2n0lrKimlts+OBribY+fVs0rmANFWKTaAOP2U108Dsg5/vGw
FfvyRWjNz1Wov1Wv7tFH466+6tP79BrdFn2ZEbLqLXLo5kuZag5XZMvMn5rfQf2m
4o25q6QzofH3xM4WeaBmujdtiYRTpQEi6mXZkPj0jSCF7bUkSxg6JkNmIbK73tma
eXaNnt76OexASYaDRE5kPUeVmdmM60gUU5ASaYW44EVq3kumj+LYCTbi90a7lxHo
OawFKfA4HaW2gzMr6ZMLkyvqwLV/LzbuiX5IVuwdtO3LhlBBERFYZzkC6lEckX0a
J1c5UNsn4cY70Yf/pOFmLPxRa+Hi9WX8aJGk9IKTCKrUgPEVfEXM3JZx8wpAwpPM
xQMEj+27h8A//PdX8+/tvF4zwgOrhWM4KUBdaX8NqDgjmYfGT6Vlwcy7Sc29KU4A
ZaNd4uZHDFM9BhAl/ZzqFqSE22OmRWUB6k47OczjtUWKIhdWuBUv5+1EzrCrY4Ik
fesqfMbpRlmwMRIQbfJayXnTkDBdzxfsaN2bmuuLcVKHVWiFKau19r1iUFuV8wd3
ourcqM8uoirECnPFoTuQsvPzO0zzlMcRBiGuaorDSBU8PSOtYooNkrfGTEdIbQxl
K5flI3FlW7+9rR+5K2TD8cthj7TIuM9g+K1CDODwqsuctHMSeGH6d0+QIQRvxd48
Dxpt4rRuRbvpiD73h1wWxVbM7gRKrDEri/1QkCvZRzG/EgAkVvw+L6ZWobjkrqsA
XbM3pWuc+5VYHNpYDfFW0tKSQ/6cX+A/Ebh7hMDte4vG4E1aGxCmyt1osjvNOQ79
l249yF2pSFKiOJuNyOViruYF9SrUVHU40A/qkq8/g+iUahc7UywqZlMxWQAJGKqB
BXNv7F9T9Sc7VqrJxnpsF/fEC4dmwwOgPXzYVBRMDgLkZB/v2xE7jwUL+zRbmmo7
5sLXWq4Eo5G/3JYFPGrFDORpXlgVqt7+k61rQSoNqvpiLQV1gJWlAHHmaFBmJgjY
hXznj5bQAxYwUSDUb9dH3T7WIccDVCrDP7vTD+vx4JCSmVuSWlvf+R32cyRqB9JR
nPM6wXHR9WGxFMpzvVnA3LqaxApKwWa1OcyVUs86l+9oyGAtp6dCs/5Jhal90D2n
cplsmTuGYTjI79DrpOWQ6CLGYcWXpFl34CcNTDX3+BKXDLwTSYdBrg6VKbVB7s91
rdktRwvAugy9YA9+tRU5sNmvjfNn+2USIfEWWUrV2JJbFYHo5C1OKYEyL/iqwdlT
nIUCrpDGuKGg849jVR26csVJA1tPaybltla6I9kdSI73WRDLwJINQpoTekS17fXl
ONGaeqjGOjjTvY9bndIr1MID9v5jXDUxC7DDxc7qBSeJ+g5hCuzlJ/F7ssdtGdBJ
szkNJ2qOSZZCV76chjHshkLRWxga+paduMU6WXICcgmP2lA1Lp62rP4iFjv7t4fZ
KVMVcIEEsVcK2MOCthcV8rZXd1MnL4/4oLdlCWZqz4OwKyg9u1FmHfn+SkWIghQ3
5+O/IA2tQJFY59/aqlMuyd1BycaOKoB7o5u6NXHbBtC7VLPkkU4QSCyaT2YNNqcb
6ge3Rfbn2iECRim/Z14O1WDdYv8z+HP1EuzPZZCsEAZ6OldisBsM6FV86RvMpjXE
B/quAPodE08tts8evVLMD5fbrNFvn900QtcfvNwx4hx103PJiZ6UOzcsw1W1B7MM
ZxitwTtwNBwWwUVwluVbUjF9oFNXeiayeDJLiBOuR88ZG6UCDckR9ukkxVR4eAlt
06QYLGqCqYHryNLwZ0DARLgdkJJ7WcRXEbiI7K4DMOOU2WLgKUU0ILO7u3dpd6Iz
6S5l1HCiWnyK+qIuml3PP/MtVzk2uX9usX9rurMmHPSGk0R/J9k0QjyEtb68hVMm
fLLzpu1HeIk5M67X8XgXc1dXX4f48XKUM/WpKdWGlvrlMTLe3DHRaUBzyOA0tG4x
NWAMkYYcDhR1s+Z6N+0julQ9qv9XbyGqU4as5tB4N/NXY96UEC16iPxLOvncZl/W
Kh5eNlS7dkIUUwWjwEK9eUGeijm5AA48cLmL3jRctywBPMt22lRPC29ZTAmKyIuh
AD7RJ3c3+0cx7qInhZtys6it0BB+vYxHMssWCM3vkEurcDGKjdt0SAIklxK2dLYY
8FkqrUa0G3/mPPR8jOCiHdUxBDzLjM0SZtl6hXlDoOXN00BJ1KXiG4oCzbPhwKzP
APVz0ioMHuyUEDgRnOZ9+DJyi7RBYL151/eMfmU1sXDxPCQsOhW1Lp+kMbRzt6Xc
ln4oCki7yK73WNf2IyJB5BaNPBQtDg6Ot0x82wi7IaeX8mpBApHdQW0+zJ5kj7Ig
V3teoqu4GIAalP0GFX6CwuQ4tWxQrq2foehQ+oCFnb4Gs3QqKaq0wnryBr6VyJV9
wGiwZAPaFu0N161+WNe7r/6FqTj4UlwQVpw1mBqAsHNR2iAdU0yi356Gv+IHxFqX
Ukvf8rB9IejkTiXVw3e+JzO1dqnLf2AuJ3rbGNzqNmChDxYotW+0+affbOqPEQ6N
3wMoz4uqLfoTa8bvh1l5HoYttHgBppHE/CbMiYDcRSfKJJlCOhFrdwKY3Ueisg6t
makv7Qg1ws+qf7so8ensM0KHUtWRR89j0YJVzqFqtr+vOEfIZQqPGTVZME6Xk1hC
og6RuofcioIgpRjuCjHiXzhrppOf3SkR4cKSorGC01JH3tofwyB7ixs6WQAGTBaJ
QZwfL3DP2mDy55R8mb3ORTUTHkohYznwcvh5mGVOQei1ANYeorhA09I09yq2RNEj
18AxJaLXhctzykbeytUidOav2wMaKZ9XTskj2JxH5kOhVi79waML1PyFDllI3SvK
C+gVsluD/EC5iWdYEIdT5PFi85iLy0AEE/dGZF/jKs5gWfuwZcefoPWMmKBEOKen
LkQSklbg+66kw2Rkgl/hiTgP3cC7NEyQo4BX01YagdzFzI+sQmTVUH3D9iJbsllK
fK59oPgMOCTG2Yacz1nUKJkeq9po4uXs69iHB89vqztbde5Dl2r/0qKgxSBMH2JZ
7/XG0Te80snEYL768RaWV3RoA6KelxARQ7dck6FW5h1xqditHkVWyl7xdmm+Xmth
aU+39z5k2HUdIlLRbtmjrmMzcmn4bXuAzZ/az51t+u8wOjJhyaoEiq0UoaYaQej8
/CyJFAHmETJL+J1VoZJJnuwR4geLWTJQotiNR6GIGbv4Q2KhjWEFhwg2RrnTXnJj
8aCKtGI/agfB7M1RNPCg3zqYvr3a3koPin7ofEfnqrVd4m9Wt9aPv+uIbA01F2s7
C22QK19L1170F5z9vwit63q5BXS1buTGQjjw+SG8TtIFLcnGFY2BP0rkWkenufj2
/c7BjwNs3UB4NGwippLgIcfMUiXoVoMH31b73ZdpHegPZgAM104fvItTREhkZGdS
H4nCnlVL93IE9tRyIDC1AoZMDV5gDvxYLNxd1AbN7a3kmlVMM2lYbbiyWrFQfHt5
W70c63sRd4S3eOXQg2Td1oc+ODpiLimw0Ckb7wmCupAAlhlLCywgF883CBOFdKpT
vePWgXPucWyO+RJgK2iXp3D28xmdq4h9qPRswPqPC22l3tFYc+w50/nDTcALO/rA
fqydftNUwCjaa++Ls/MBrgmf0NfQioHgf6F9R2mSLY0RXW4keKASKqTEOP3YzPs3
TNlOxlMWp2sZKQOszZz8w/lSGqh2D646plOX8MLqtGcHqsnc62jSGjNaZuxlcSS1
VC+Apc9ATQizNTO3feRYq3eu4fk2niQkzjwox5bwh0CtLp0evdvis/mbWgt8w3Ol
idfOtB+TtAJXgAIrmKxi2ZtK8ZBDpD2T2MzIBW80tlhvarHoq/IkKqYirvSIFPGj
2NK36JEukes5jw6H4q9QaNZwwwaMxk/qrXHG3GWaXTrw3mzPSg8QB8tJnJ/JhGw5
UkJl/Qqwh83ArU56iRSRfS1lw9291DZH1YO24paGxophevJpACqJxWNxQS04KnlB
02BTP4ttFNddYlo1uUgg7VtZyv0Jdh/VZH/QND6+zwsiuSPkNG2NV/R6kbLrLjzh
9MgLXHFArSLjBPZFpBzteX5pcaZMf5WTfRIy6xnXJwGytxk5ogl+EyAQADz6rrqy
66QTpajR/JX6tWd8bc4m5EPbUjANUAlO2mZCYr+BP67BQ5YgyxVPuwQAg1V10L6e
L9gqValFKZgsxthfnf1ruiw6vANL1TvLVEu6v0UisEFQnblrU1nDOOLNWMVrLGw7
8U/hpt8B2UQjWaDL48WIvCd6nCHrk7ohzXDHpyry6+z2ra2jWI+vbcfqQt3c8KNk
dmVOh5tbv/HGNDyk2LtvRTa3bnn1sybGJ6ar1hZtdy8k3soMAObak8G7tyfFb2cN
KUqy7q2smzxPzwFW0BAwLZy0iCZSF2yPjjXJabhVvd6q9YrVy7ubfN2kDr34eBJz
l6frEd3J84kkWQT376d624grwKv7+zIQyfB28aJE5FKMC8EZpMlctK4/IpDWnVKA
abQv8Ht5X31pnTVhIGHKudcBCZLdWMcg+9sQvARhX0ohUt+VhTI3aycnL73a9STJ
zaTQX8et7RtMZwuIGCveJ+jGyJhaWk8XX/EgWtzsbKU81dAfZtswwNWimERdSxgi
TXvxtQix9TWl+w0+3na6OWmIy8oxlvqY/Fv91Y201KcRozoEutw2L6FugAah4noN
GnyKXaKLhOH37eIJTc1hIDz8/wwBisT52KWu6kkU/amFJpQr1i5p2E49eZzef+l/
KOn2kStm4P4oU8xIUg7rjO1D09LK1T0NQk/PZxfPEmtgHWLbtMGeWJVcxTsj6B0t
Tc5061LQgChSLCiLbPTfy8xPIBXHTjO7hVv9fQguxhWi86Me53c8TLva/TjRJE8B
juUNPizkcQnOdJXtSfcbmg8Uakq9rDzxenhSv4DmbV75i5cevuZ5/iALLdNXI78/
A705GwjHJQiJCOrqgAUzljYpNOnZL6M5A/PcTIVMzO7rhV5r//Hwe1+uxYJlfPvP
V9Dfv+1Dwn9K6IhZ1Ys1OPwBEUQY55wCc01B1Yt+9RLUe1U1cEGB0HcJ8UZKzJxx
xlMisuP/DZX0xwRvwwPB4whpkUNIXyUlcwN3lYJkqRomWjFARDeWHwFUKblwDBP7
KPMH3g428Eu0QfjRk8hrFQPBU8/eK13MXjahbgjmrSWvJ01IfRWV72SxL/Uv2g6o
rsEqmTCES1qJyMeMCA22R+m1bQnN3Yn5CqBf0FEphGleYdgXJ3VE+WYRxYJ0e4AY
r+i4vmF6YbJQJ/tvUv7PnmKk+x0+7dAq/DpL60vUTm0ckGyekoxxDCbLS47/07fW
qv51JDdltlaZkIYFMKRcbFQhsZ/kSDt3IdqqmCwbKAeDLc5bI9BZUrj5UHwOCmmZ
DmpW3uwM+JVV89CSnDu8Kf9KOh5L/Juj8UgUhFnJ3CGeSNOjdmbl+NLm6clW1K7R
vYG+oqHRJIek2jFgscktetUZHBssvBG2JlXoQ9z7jZZSA0bH26jzlJeIVdKJVKtI
lixmyIVydVQ9SngWGji+8+FL2N0x6w3JYuBxd0Xut+ESyI0CgBVARSElnliy9TS8
3XH3YURKycfGR+dgig430LoUG92501AevAaOgeOXK3eo0juYHc9ejDac6oNbuLiM
+pqwftNTETFddM3c2xBpdHAJSaBY5o/tURuBx0vw67ifzrtwuVMiA1cpsWgp2MLn
OlnLhjxSrOIY2b0OLXcPxhEWlrzoHdbu/tlSwIkxI2P3uqKJDlsnrcPvBsabU3ID
VVFWjwbgnBOOzyTfrpswUWwbe/9JLrGvoAajJ1L2siyZsRW/K2IJMR3EpxTwTSae
4IMOMVJP4VIhGmil9GZT1/KnFM259BG9+ZKD3chlthFJd1rkpVwLMt4l0g5V15DS
DNniW7EdQtV6JuKHLMiQJtInzuc/33ZCRne/lg8qtcURE3TRRFAnBw4Lt8qLMrpH
vheBaoExneaVgPCT5TUKHUEQZNv+mK0LgD08+2OSmJ47XElMJrz86Hpbaf7PwaXs
H/7XtSnbFQu7bsNfY33H9TVAue+pWi7uyJbRiVBoEk/2bxWnPftvoW4Cg4niTLlj
DLSOvEykdnDuIuErXSnok6Y9w/b7+eGAKcJh97Ks6C9qbpAve+3XrXMipSg3bmJW
MXsW7E/W81xzagw/b0jyR8WwOmruyUiI7s8qv/2HrpbXu5mEmy7bgO037gh4PvhY
6Kz03LL5FA/hVKjYIxDn2m8qbTXvilV07Uaos5Y6gK24Mn9xQjY3wl2BdU4/wVmA
EUkar0d6QRUTyOdUy31akt+4x1S5Xx7HpvirXg+WLE+TK8kmGFkYCM9u6pDt568r
iGJbDIiShmlVh9OnX+rJ9avXbhYOjVQWnsNBM/sgDv/xjvzHtCu97LsUzpWjDgtY
u0VqhCVqhZ8hPcNegnhKzJmU+fp6PJw8apX9D19BKYhguXBncW42PvDmU8ng8CWH
rKfsWgyDnhKYH+cQIpOFo6zqTCAcLnja3lPhnNhIHzF/Vi96wAGOp85J3je0qSTi
zPUUwLYAr00IjmsvE1iz7cRAOvw684FoDwrqmnN4B6ve34enxn01Y4nN2SeTwei7
wpTnqp/6suZ0BtzIKhuirdaVLqfaEE8FgD5G0pnccVweRcuHpfwp9/xdFFjHgB9u
w68Yd2M3ZRuUmVWvxO6pVZX1QqOOvF3pYCSVZrulL9CLjl+Y2Sx2INE2ldmrxqf4
jOqMtIMmwm/hHzd7m2XPErbZdlJN2K5FQkosku+0oV/KTMZAiCNIWRbVVDUREDYd
2zNVO08+qJUrPhGEgKTwamciMKpDVxni8RiP1iOkKCGy7yU0ka6dgUX36e5mdObS
vV8+hEPz0+othwYZ4zhLiWOSxnCum3bdxqsHC0An5bqYFux++fqj4MaAVozFLb9T
AlmoxlVFYO8reK/icYSLXyWYEZtfEgEPxPshuDvh/aHetObxQNBrAZa8t3iPrXne
BS5dajac98R6WOi5zdCOMkqaxwS54EjwF4qLj+8wQJ/ivvdo0eZDtMLvXU9ontgj
OfYg1m7m7gfsBX/1N6e8/V+onil0qSnMZ7jRBypqUeZEk1wuk4MmySNRLDcbJtpV
MN3pwh+kfit/AfwIqMY9GRnAFbT8uvpMwlsUhoX9t8/2rxA3/PdywMnoDhf6BqJj
i8JrdNOLmpqV8T9wPXOaccuZda7S5RtNS9sl29L2wKlfrMg4YmQSBfl9qGQrl4Cl
g3KCvOg98Pps3QIZm5UA2XsSLbUwE7I0h4kkkP3gknsIgLos/lVlTw7jXiNo4PiT
G50EjbQgv7PbrgIK2uLnLcul/y98r0YIQBrjQ2OIaUrvAFxlVmx6Dw6NCkpSPTfn
ut3C4jsFLTMDQKWjIvg1CsW2w49EZ4Qiq5YiZi6iDrYl73bgDZc9tEKBZSPynD2Z
CoiqytB6rxU48X0Fjafl6JCBwOobkn0OL5n/FD16pzGq5a4UYSctv3HUb2dQdN1B
RxhLRZq96SW96aTu1EzRB9LNAkQeY9XMOCu5Ce1f+hlHXgo+R+cFPH+DeUjsDa0o
ldxHr6hhTlwZ4pct4Qd5bPy4vBV6BrKLP7RZM94KmxKle/kqOduc69FTkM9+3vlw
tYH/D43x5XYnNFYHfb7wQfOvLzaEk+shHrY2bFqEblnAJSVTEHjRRm7dnA6oIIVl
6juf/prQwn5T/fjo+8W5y0BNHYiJ9BDc2pOzZogyIUyC1x/kNV1how+GN81/Zh45
HK8TO84WNLEsdXW5g7RaQCnYATMJPMctEHOrYZqviqxrQ57YLl7YVaX9ZtAlYuNq
npeDGGFRd9fUCi3Vn4jfF8fCc+/PcNIc6OWQUs89pGPCb9+kbLmukLmLuk/vKm/Q
VlzuH1ZI5I5n/Hl3VToEJplFNTnBHYb3Tnrt4sBX55rq+lLhC9GcpBwgWbPt7QkE
eSiFEKoEHR/4D9p8DEXWvSsjkXVV0MVKpJF3qMrVPYHyuqQEds9gl2CcLRO2hOpM
by5HcZRczng/1vBTMB90K70GLRIjndQw4Etzik+SJSizXK6wd5p26zqy7oPPUG49
nU8d7F3wo/swkUZTKZAVlKLBuk5g9aeq5qYlN4GyfDUNISbFsiV4cQLj5ncJ7QCR
MU3fXYSuFsUYNt1WK+XWEVqSMg87BqznAwSWI83qWKPWa6jtGYD265r1F5sPgjyX
FbUW4fLJRp1egDTmAl10y5XathYqC4ajy3jfbrtpMcUbrdfmzpWbfAcW7/8LlT7Y
G5aLux70T7zBa9j7JPEJl7fmnMr5YcMiQan5ZE5vHa1EZsqejfqh9X036Vv6P2Q7
IZZDBY4o/UdnRh0UMVS/LhhCzAZnraPSUgBB+ThUJ/i/vH+lebIIo/u1h7RneQ5A
BhA5g/niBTnGl3PsuNkT57392MuwQNhxfG4uIxhWjNRjJ1wJBYlb3I58efN9WoQf
urQlE/FB16ltUR6eku5VsFjSz+MCpBPoQhxlym4JmFmoRw9mtkCEfGo1a+/0g9hy
/CXzLG5s2Zuc04XbTI9FwvaktmxJ+eR855Pji/xNSOvf7DwtmLMc/YNqFyCmIY7Q
MTrvtQpBNeGZqE491o5vN0dJitb+YNKX1sA82N/IpZX7TqzxciaUZSugEWO8VccZ
aHLHOwOfWIlPH8rP11BPDXd99v27No2pPGXalXexE40BpnBSjNcoQZSJT0plWMzV
wCJP1leGByesyziKVYAsxtCR3HSFlPTdZ7S3OO32BghxJ4md3PZ6OmsIHi0JFgHs
+QC3TQ6LeTiEvZxts+IJEMl9oM6o6pswXgipCYQ9Z2QHAUxlM4sTAf0orP/1DoQy
Gn81M6JQykIOQfpExWWJ6NfVGz8mcioCIdNzRPUIWnqQfRFSkqT7O8PaBLL8eHU0
P3X20Us5Ygn6EjXAv772JmhHm2Fp55/ISUxhB0lPAgA=
`pragma protect end_protected

//pragma protect end


`resetall
`timescale 1ns/1ps
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
S3bw6nbgZiOAvC3gKOPzA47mZyKyvDkVQwV5U6u3uQpB1tR5U6WEoKuM3EtaR/aD
SRXvudl/18x3l9aIh2CnSjek9Ec0CQnrE7uiumuvj8b4BAf0qBJQuLXFOH9fgXMc
kLJfIYn1dryRS5mDeXa3PO51AcQz34aWvq+W+PutoKYybmQ9SoyiBZtNCGG+OdBN
PM9dx9QQy4/Qa8qhgG0SDc2nSjR0v1ftN4cUSmggYOPLQzJ/nRkJZ+5N+Vzetju5
EuImLT6BYwiWb252SN51t+yyRjC+IzUIZkTn/tA+//cru7ty18smTMwM5Qa1a94F
QmgNcAvbMP0BK1zxmRPY1w==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 688 )
`pragma protect data_block
0iUyulm+rnXd89xHk4vYsrft6Jd6LBwz3QRCC+7eZNdGAPwRDaJrrXID2y2Cf8mr
if5tPbNBC+LccTIt78dLuQmrxPkktodAfIzelVERkOXQmcNehvgjXu/HQq4SrmQW
J8fj/TSPZ683qCNhdr4MIqu9m6tahCSdKBNp7wki3ph79FHsMapOvNZU68rQ6pF0
GOZgwuZxjpytjeewHAqCRbF6El3QfAqKnkM2LT72ZSzBq6ORBu+6jfGKsKuwwgD9
cyO6EeUZohACq4sHiRY0fxCB5TbcnnuqwlW6IjABIFVltOSHJLWYZFA8+DTDSdnQ
zOROjb84Wkaj27u/1dwCpB4CBUJk2vVFpDk4oOVP53oWGi/zQu7CUfTlF8Wy1fxE
D5FJLVlefVdam7W1bnKJh3vMvC5KkMEx3LR3SCqIV0SrbCt7Gb+DKa6XQcDRta2A
gbeWvPncQJGOf3AZRa40EmE0ITXiXk2tIitAdt9IIiCwrsRCoekRlUPIJ8Eemdss
BYkE0AlfFJGZ20wcW/5JUi4NnJEVz6WYhR9egArDv2ijOSNwKYF42C0/BgKY3V3j
WB7Qs4fpqPmjNEO4sJvlnGS4yp3fsvmcZwQiH8YhPb3CZ5Afdo3tO1vfpoCTgHL9
xJMC44QUL2Kqroy6g93DoxPmGB3y994cPIPbF3hmFZ0e3QqUj7vQCAPhgNKL55m0
V6W0a3KQtQE7RtSXHn5jsGcPDVt1v/IZhbL1ksJ8yw5fqNK8lz6CaWQkIdLwwuqX
9xkRooPoaoFGQLwMN9f5DrdVSCGPcLsitM3jNT9Q2giXmVg58gYdzljOY74JkdcI
fHp+4hyiW3wBA5gTQImktjJaUWM8O+idT+U6lrcEqFAGDVK8215tWnn3k4+57ZA1
7sj2gU9O6aY1ii5hfwusCA==
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
aTQpo0pJ8kCKTclfE8Utxs8qZrR2G/wE34l2md3ddA7Wi7e6IeLgLM5zbzXIf6Vr
OAr+OivV3CT+Ds7fYjgxbo602J+eZYG7gp+CrPKCMekf3nrZzyAQK2+BwyC5CmC9
CoZXldc04Oq4Ewz/Jk5REgU/Iu19QYV6QcXfoR1irpLbHdJ4MnNJeEnzxSwshPHh
ihbDT0G0KlAEcYqXQB7zW5ElOYC2KPcP+YPnGV7GAYUrjo4cBD9QiOtXg6cFXqjR
MA8o7dM97APV6HTRs7M8JlrkCgFZEcl9pO2WdAlKrM4JQeQRDvmyDFtRdRHRHtYx
lTTEneKXTSsKqZKyGk574Q==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 6976 )
`pragma protect data_block
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
kDOBB6OaV4giZcXGA4XX/A==
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
K2noNwa1OWpOqZG3iyiUmz2M8mwSz4kwTDPJ8tc6sHwRerGYSaJdjNt0xzKkem2w
wjHvKh9MWhHObKOK4l+EsWzU5av/PhfhViuU+r8E/1CwuWGw8DDZIKOvkSZCjxQv
eGeOi+DH29hecnqnrVlTULAnwYhw0eizVpHvdEz9txz+14wB3u6mlQDN6Jy3yC5z
1dHOOO/7qSpis33HJRnv2aB9kxEFoboQqaLC+vGAIxEI7/vlnPu7+CX2lU+J54xO
jkCJpjM3GKjmxjocZOjOQPNGubUVSWIr8Kw8WvNd3A6NWoKBz3p83/1QkYEp8M4U
OZVrbhdem1CPS4ASSCvwmQ==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 8048 )
`pragma protect data_block
9fW/CcL03c6wbUNCQVD00XFKveW9qvGfOS7JrGAWYFHsdVrTPNXazBXjXHNBQfWE
Np8KoSOywsJiQsE+RIjFUs0yFbWwdjVCqwb3/hvFWCXuK4B8/dKGyZyCvvfKpE0H
YNGSxt7jU1rB94arEZae2YRpaapTSZ/dwtNCfm3LGe/KAw9Uum1+g5vtybda2NN1
2Yym0T9Gc/DL4GPPIsgTV1w/Y2kOUjtThoUAaGsCw170kNshIYS+qoVniXMvkygM
n0G++XziOiYIkXGCmMT59ixsRuECjM8XGSMSp0tXg/dSRBgwA/K17J4Pq9ZtnZAK
z3j7FErTERyk6BVDIlAMWm5/yTLwfPwzk7s4EWiuuH2At3nbGZrURaV9w/SGmpr3
xvmVoJ+zHn/LPfJjCIVE/5GrB67wtBfF8qvJrzCOPOvEUDd410g2PwUQvw0wv0dt
bpjHB65W/nJI00Te2uzFR9Bu0/a79293hAHbrSJQW/IaNdVT02tZbo4NnM1Ljcm2
XHzBBNka8+dxpfqhhlNifwbBtSuAUHZKr8irYPAf6pZOX/LJoQlfNovyKLGdZ0xS
xeq4rTqILtEpTOIQSfyQEqiMRROmQptJGgippWZOJfusIpr7bE8IPEy9ZfEQG5GJ
OSqVuhxVFwsYdsUD8W3rSfJnlOv1p/T96tCo69ovkJ5ubPI1l23x2zxDdzGJDJ4S
bSsbcJmNbVzKN3iU7ch9aqZ9fmRpF9juIZspJpEBCvboIb/K7/JhDcWxwlNjjpF+
TOvicqUE/bRXlgiR9hda6CJ0G2KXemg394iZSbd2NcfKD1rsjSBhKHdPCOHsY25L
p2oXG3uXvJQS7rSmBODyTmgdi9M+LTT6lYx4Sg7OrRnS02289KHGarN2CEhvYIgE
EyyBBAF4acWgjFMPmWwwDPXaF3RtHTNJBJ4mXg+ejFzukjQCmUhcWV8FwM5f48aN
RyaLMPgQDaXAHTb2E3JJWoXxIftp89Rd60GgmObjPx/HReuhn8yHTPuxOXVcCsRF
MFxV5yYYoIoJyO+wpmnxGz8qNUb7ZD0ASD4RtxWKy6weBTFv62ig7lzrw7jZ8je4
qr7B3DxdwoL+W0V3xZAr2nrIW1dkWP4Eawd+uiAUInRjyCZKatA2Z5On/fJQ4MAb
RmtbdB1U2Bi89hHqpZ+7KAcN61p9uRBKEegkFmcZ3pgXUi/pmJTBmgcMUFnrEMuy
kPiD5QuJYLwCqk/phAesirVpnVUeoJ2Di/wI9v5/0dD9kdJTGAY3PaPghDwZ1+Cc
Dxy8EzjYYUfpzrVr5pP2g9ds2YlCKf4E6PLi5ShNhGsXcsLWx0zPa1J7TRt0Iuzd
q+cFcdB6lxy22NkKY3tHPf/4wl1cEOCVV1UyQWYhSQop67+xzLBB2dhaMzw7gTn6
Xck5nF4I2VBMvkt04y1I+8tM9MpIla5B5TC1ABiBiOIODosmW1C4Iwj+pVvc4ZH7
AQPWZBYe+vsE4403LiJVvjgQPKFmiGMOruvsV48W8/ofdThFwnJXHRIFAoFOdUtp
pENiqdEqol1uJGBwK3HfuNg4zLvEPdByGABlU/slPP/louMpnl7e3n2nNcRtPR+y
5ZSbkQ5eS07mIO1Tm4gtvhMUaY5BJsz2O8eo0/TXdZzFVOiLaK9UciPgSwmi1hAO
9F9ByW3UcKVJlbb8ryI/QjTuwxpep1J3sAcBj+9BDHh02bcsOUoCjLKHKtlkgnuC
ZMd2Zr+Pc8tPrPgoEymOzUk4pHOA3hFYMKR1o1Gr+VimzzlvYAN7kuTjkR28PDOy
B9ztowbdaXjSia/idxmKqd3jkObBW6E7g/pcT/hBTzubJv9kEiCHcaizpfIloRpA
tC9risOAxRBnAFyecF2k49uZlLtLROMRwjUMpNWvb+puMUc5dwAv0/lkRD9fUbuv
iIglSf8MEzhNc13QRiX73F2FFuDVkufSpN6ocg/bPaqWCGTZEfKQ0jnuf7m2ND85
OPrS8YxL0QEHHQrUs4jN5KE04F44CDn0a8djKba5QuxoqF690dEAIJKT9lHaZx38
ox/qj4BJErig6D2ubHdmWGrFd1spa3mCMced8a60gBJXqLJBP6oQDroK2W3Zl4J8
BJBZ5fzRn3d0ePZE0DLQgHc0CsWi6LnplV3lCJXRCVspUp9m0cEimJfYy6+Pj45J
41lDE6hZrXGlkrzNFhSRDnKaUbSYVReLgm46V0ymOqJSLzY03jM7Oz4IpW6kIn9j
FZXmJXlAogn20+MyGwNZexIZxhqVoiX8bJoArdaYIqoqqBkERHkGaV48VZss+VMS
8CfhY9x/wrOGcnDBaH4DIU9EyR2bcdXo9lr3+enpLuUFRcGD2KMyIJzW1sUFk2PY
oqcSl6xpJ7aTnNOOsyqmm1kuauYvl+RRIW1DBhb8PZrFyDrzQilGnsb4gK4GZNBK
P0XQNjo2GeZdMCli00mLS3WHMS6qaBq7JFUt74qAMFhxhTM5rjCfy8/2eEhY3Ttt
tjAQbiSMUWvgKNx7CTPabf3CbVKErXRtWPZHnVm+tY64WN02wYjHY/cP6KsrBFhf
2oQ9MB3sC6liNFSD/vroA3zVLiww5JeSwDpE2+iZb7pbBhrgs+41bxjk57KQnD8d
PNg2Vj7wk8C0juddkOHkb32ZYuDV3mQocu/PLszZJajn50bhHXWBsw6JD9UPm2vU
Ma8XjNY3cSQ5xpj/hiLCclH9Jf1DmmakDqr6b+lDrmhYGEpRGor1Uf6tQ+BaovUL
+zG3Vf4SBgHzhi6n4rBRHt0hkdso6KxXHjJD37hebegAQZXxcBvBo0t3KNsRazit
x02PGXJ/kqRAY4XbQPIakhIBRE6QIfDE6tFMk1gX9joD7b1gAlZt+ccmdfBuM9iT
12Ko6tsCRr5M8T6azKJSzgRc7wWCXKB8shePMFnYNZri2HKPzKJsMzNIc764soAj
/sROTF51R3GaOVwIveBARWNxRNPUqr6p8tV15th8YOlZz/H8tFETbwFM1/HPb+u8
PP/ZXaUtpmIsisbx9KzAFeFae+hN9X6NFUb7HUNTDGdBa8PsE63clZethGWtOxc1
Woee2CLSJSloLOD7DO8TajDDYqHOgw3odB6KRDxtBiFR43+WczyQFjF3qoPQrdKS
oiuHyQMx3I8b5k2EdVTb1mNdAtiXj9JH/PIcU4bMwwy4LnE/RdksqWHx7llhqshs
/RX2hnyvdaWjtynZtI69TMGZlkCVmC5PhckuYaRhA273RuXhvp7tDqcwlYL7CKeB
4na2U86BgFt5od4mG1psqHLNMxFPFlrFNrPzQFRWWZudjhkSzd+G0OuZ2syNiy1S
H2ixAwPEkM2QTS/t8tiI/cHzjkN5hdt0CsomRehrSkh+zAzy79plzLbtvvimLnPJ
VBnoE46E8ZLKXyWSToFg5UMfZ0+KxhJTxb7GA/wQyPBLuVAHTyqObpjW2Y0WCGK6
rh05xqObCEOiEhy/qnARbD4Udt/N/C5id+BIXz/ca1Stx5b6Gju8iTnTpoUK1oA3
eyqpwxYu9QfaFHGCEuuXRgjnVHd0J5vAzIb+gpecvIhDDl6sBVJVqZf/D9ehhxuY
/FrsPT8OS3LM/yAbz0rDEoIrBiux9ILoNUEc0uqRniZ/DJDPQjlQTly41BgJbrvn
1vnrLOKCEMSO/Qv//gkZ7TeKwlzry+haSkzIUgVavKHWISalPZpqysm7KTdUlpPw
OyXQanvhETwMktEMt7+KPZg/nZa2ULMDAtMsEKPZr+ziYcgXOSGQf9IWh7SgsQT6
KwIIQwdFBVBXOyszPuIMbP8VUI28XOQdYdzQQfYrUg55xpa6QvaM2yt5uy01ymQ7
e3jUhz2GlWOwRbCTmoAmXW4l5Y9c22tQuDHwaVgkO1D33+d881hS35CKVxzZUtis
Uuvgce337fsgBrf9tM8aVJ/sOiVRZLf0oO8bc6eh8B5F3oFe4mS1zqmmkv8q3h56
8+lyR7Izbw0UuYDoIG5Ck8UHNbum3V993ypHYumgdLn+r+cHl8PloaDDPh9yYEgg
nKagCml0HmmqA0CU5tx9kmu58BnjHcqC1kxFcggjjVGWoXkH/olduowkPdDQnbYt
Q8murmNiMCqF/yBnnyFQeqy1SLbodjFoeJkgF6/nA/IUDFm8J0wDnjeM/m3k0c1d
qj/5FrfrU0x3jX5qQMrONeuPkkwx4DJfGMaa6//zZP9v0cFPx7RhvVKDIUGBJcWs
GSuTeB7q1t3vGcM6qn8RwEqqwx8295/K06aZA8QKq2D5FWeCTJtVMLnKOKEx3Ch3
GgEfi8OYDdImHvfpAb8BjyEXfd3E3K/5akohSyQpjD2mmh8C2gZcw/TTVswpMDRz
B7+0JCtpBPTrznj4e6kdNnnNaX4YehPdtbFPVwEPIHO7RviA2XPiuP4/zkAdAfka
zZoe0tIdfx0WL9iT73nrDHkXn+utnTu5ay+YLd1fHA8Qc/1seb4aZDP48qNweu9O
QrvDAVPq+0KgG2/3BRewIVaaMqe/qgKXNVBA1nEr/vqp+Weof3+h4wOxmPtMzTiC
cwJ0Jnr0rJW9qaiufzASPL7PIAZ+aN0q8b7H5DYjkkPZHIWowijYHi1sZC2H9qz0
N6mUx/Q8Q0vollPseHgKGM2+mUey+VzpNA7y+kFdfxm+FvMy2UVw3GZKfoiSuchP
2xnzvA/8POFpONpKv9iCXP6mRL72FJKndLh9osEK8KkcXqujHXp4Pk6/mjQx+DYy
ahpZYsKh+sXQm/G90aM31G3tPFEMR/1Hua5CCv29ev4ZfuxPvPVtGp8J9jPJPyKl
Dnry+bpAMWgZgcs59vKxdU0Wb3wCPzI6Lz/nS8XLoMX3re14EZk7vK9pPhQj3lpC
LYwXqKIGpgZDpHiS4XNtYcy7cw/v7TLG4L6LIUEkpxAAk1hCHZXBbvo7YZqYFlPU
lOTe83hTpBt2tP9HUYls372fOBHxlcVC0BDvmSzRcSAkvb93FoatjJHVJsqyRUfC
A2bWuR97WrMuDun7tvsYBXMLGVlHH6T+xyYSpFivmSsSAS9gtNo4HUgPTNaRTUHT
Wy0FfxQnYXnehxBW+NfmvwezpVbimpG0BceeUNoGbuBJ7syx7A7vOLGjoQoc7zXf
bx4OCB9K4gl98b7ACOkPToijhdhiNjvZ94s8Z8hHiTolk8AFGwpSBYDNXL79goxp
PdSpzY1at0UYfwP1QHdsv+A8indURFuJ8DoPRcMxvrmMXENIfqznUMBQ+IVOMfn1
QifmmQkL8krKJpWvZsUjtmZUFJgkkjPCGucWViLAfMwOX+cSQKkfo23hhPhMI7re
Ei0jt7bihuv4C/Dpxe11q6Zf7PKh2cQAS/OFx5aVPP3YLaPkQ4RVwRDXpYYeDO5N
KBj3h6/m54A80vd1QvNKextmdm4Z/cFCO/SAneIwr2ns/A6dszjZZ0Rxa814nEiR
i7bcnIIxDqO9RwUKdUimll7j7/KhjQGA58VcOGWunKmBsi7edlP77Zn1gu36tRlu
vYei0WsqRJ3yR9jAKT88J6AkJFMnwPqHZZnXN/XInrDQShzfLt1Q8Alo6cEK8ANU
/hrS0P1BUKcdDAmmPIk96G1ztkNHy8oLvorQufUox34wtF3gT/CWwiy0/MCYyhIW
MZfNVN5aJRr7+QVMW3/yhfwsrm7WVGwJbuNXVJnXAJFRtJlIR0wmQ3IPeyzjjE92
/bQ7xEn2qwLY5OFSinJdTBuU/eEKSaezHA7TKPjf04D53LxuxfYIJ1DJ7YlTTm6o
NtGJlBXVdmo9KCK4VJdARAetexVw7mjyPStPMeVZ4BxX7kM/1K7wWa7a41LvLPOS
C9/xw7bXOZahsA73h3GIo70leI4wYd3NDG9t5c/CFfRL6v6FosX4DVMYn4zr+yoX
uY+QrjPjZy3DuSqC2PCQJDi9nCMqwYO/oVCrO2A/VaDgJ8bxB1RGIGSbTcnDDS2M
tusnqgRlpzDukb030gLlttLJGxvOYZwWDxudYixV863234wzVxf1ev5RbAi8knJM
M5fF30R9gczcp7z+3oiA/eLd0HuXWtB4PqIGUT/BFnQEaPZA2RFVkYHdUBBMnNjt
5d/+BwnZtP3uvYPuzDetwZl2JHVkyeiarUdJaMu1wrBYM6F1ZXd9ci3lgXziN1fg
pnBaPfkEv0IHYJliAsJS4Ps/rptVEOaKBYW+TgCtgfnX9h8+mdoNHBQfuvfHuR+n
Kxd06wI1k/r0FZl4dmOhGnnZVGNVBuJcFGojFnOw7weKxCl1vewF6XaO8hir9MXv
EzwbVSo2OOu3SKfBXckaTP78M65knFNhRqpncY6RRCplcVSG8n+Gj/20Ym/DnE9+
/ANK4gfoPwW0wRjWx8nmOT5Tn8xyxioJHknxiSaAjnEGe0QeM5oO+1wST2OsmYr5
0NJs47h1sTSzS7b3+T7Ej47llfe42Oav7awR52gM2KJKJManMVken89c9e5wXLVz
7lflrc7/Yx3cF86BxudA/RwUxHTIrJ/qAXflTr+aXjo5okjME0ddcIQGSqOuq6LL
az4TOj26Nk6BhKHZ4WZ8PcKiJBcRyyVIF0cfVVtfyPHon4S6PQSuSYdjCYRl3fEa
7X1DWm5deUR8pHcZdmuDVYWyXWBraPS9/AhB0TjGnjf0CDixx7fR+7zMqBvtfmR6
i3EvsD1pUxcJVsIq/S24cvhX0azLN7fPa4jIXw9UMiOqHgASRyJof9elelPCHe07
Fk2RsOfXLvs/grQDqmE5OI50Zfyb51u5BpdPjxBSIh98VDQ3Cjs8hMGZUXENxPAk
zT/uHTYvOGfz7uOSB9wJXE/qxNXvWNbsZv48k5YtJI1eydu8nj2+X3eF/LeGDM17
bLZgHrJgx0x06+X/3AUzyMJYSYGHeasW0mU22p5OJ3qnYBVXsfgRzHwzIJ3ogdRV
NGDHklfvjlqDySS6kQz3xY8CUmM7t+KGmIW96VqS9c0owG6iqucAi/5NlZKNvKQh
C3tBU001rbhZiCpa1xw+nDz1/+uFXgs3L4zhK3gTycldau9ScgnzaKt5sIdqsou1
h+XJdlcMekvh7eL3hXqqpv2Cxe8P/lCFWHvvgv1MEPIXLP53HDkE1kc0lCs/6IE4
ttwLGkwUV0nfsJNTvTmLwS7FidQrE0z1/R2GARntpzjzzi3kTd0PnRCkVN1m/F+5
boVqcmmV1nIPcgUI4Vo+hiQzrz0ABkEXBNGkzk7n9Rj6nDltXVZ9vCsx3UFkq4yi
tPvCGDIefqQIGj06QoaVYyAmHopQmpRAFo2m5CVgXU3HeivEBSMoSxddBClEatmy
stXiq28GJSoDmTt1VENDh6EmddQuahkY0+uFocu7DFNM2ls2B8gGhF3JlcWa3SfS
ezVqEZLjm2XPUuWahpQnJXd4/PcDwhmFKMPNIS/6owwYxIwVK+yUsLYGZ7rARH2t
XOEXJAnub/5Pru2HLARO1+dJU1UWTVCx4EUw2DbE1OmNxwmuOyEY3T/Xf1KBJLc+
th135+iMK3aEV7Sa7bJj2KS9e8eVqmFJx9gOOvMjEDeW135hKi6I95lj7uQPFsgs
gMw38rccOQuz70YtdLJKlVmu6llrB1tMKNEPrNbPBQYM1H96rEis26S4pdAPhx11
P8q/F2427sqhTgsydgaUiGByydE1/t+UgHF2HPj+dB1rYRsDzK4PCAI3AvH14rli
g5AZRnBk5Bf7S0k6Zt2leyf/9Pnst7BLlPXyX76rABzDmWSzujSgmneOduL4t/5N
UNlZ8PM8l7RewrUIvqipzQJtvFLuCbMNte/kyhs293MjVmKbbkln9is0oiJN6fz5
kzetDgc4p1oC8XIE4w4DcvpTJeBTMIbppOs+WaGw6jdtslidHvDxMWX3DWJFQu2q
tlTo3DGFVou/g8O1KNWsB7reZ4wMJbPmr58Pb81EvmTyUngZvLToZAvt2V4tOti8
ms7uCswf0f4DNrYaWLNMzqIMOOFoMqbwbZr0l2ojD8zMbxd+KRzI1fVAtO8ay9yS
nmF/E1TiVaM7SIT50VDRljPcwSAaFGXPwH/6vFU38tqyzUikXrJAwvXMdB2xCkIF
bLdr1vnLe5ILjAB/f7BSdk50N7xEvVv5TGFgwza5CyBV1RjEl0d+0E+vzPDU+iLb
w14bJZOzvf/tBrmpNtedhK6oFXL/oyjSuYxS2kQF5bD1de7OjfFvf1GS5h/YKRRB
s4G2S9diwqFZzjglR1oHpv4bBGkqO96nMAp9BVpq1xBs2HJlJ66acuM9xXyPuIJ6
jUgfONR2uCGh/MlthLQXsgifd93ihwBV+WD76OOwysVAr9W20AWnGkUCTPSXyx4X
IqKfEITX79ljryg+S0yBMHSMwE+MgpstOy6enHtIxTXVEid7mNHg4u/N+aKUVDYC
L0uBBwAjQtGJKC5PeKZ8XvxOaUhGmOaJrCbzTP68n9zDbIgDb2cVGlg7o3KjxetK
CL3bRUWZhqTX6HJSs/e/qFgiADZpmq2OMYvL83o0OlKMiXhoa4SYr6yrZ7eR406p
xR0YIzzsmUdlhLXv1ercseKZVMEDrfqqAzhoEil/rizu3ajPmVDNEPSmLqAxsrP4
t1Rou+La+NVVW9isout9ECE02Ttn5oY8k84TGIVW9qSnPLRhNZaBXZ/gzJoSLmEW
CbcJAn1QSAl0sfRefU+xffEjE6fv/uSemUa7QXLyh3JdJtx6dWVrbR5sINrdXO9D
KQXx26PgAk3KTlQS13Zbs6g+Wwl5ovzpBDwk7O5SZvw7eF+As7Yke5QV2isO9jmj
dTX0QCpNvswNpkzs9dmZ9lFofVxYKegebuBMI75ANnSpRgqeQNdZ3/Lw27hnh/0z
Ytx0ITY7sOTxMirLMFjNig1uHWt+yBaAkEib8CsDp22XQTXJU0Jj/VApkbWmYE4h
fXWK8aBTJEQwVTeT2hHPUn1ir1l5rSrEP8+FCCM9qYnAydtVZzwE41SnBSec2+sh
qKU3Rzf8hmvKhWmCQm+cp5mw9/sby/F9zA7LYkKKJc2RyuoKcXaGfxgR+9jgmAAE
CXH6nfv48vknfiHI2X9niLOa9AoKh/mYBFNFA0rxwsRJqM9gQKRVV9uIxyF0OwT7
cwT12LTjJgFRvu07X/Zc5lXcl7uNsx0cWTrbYc+NRa0S0LkGboQ/KM3nvEsZGOyB
T6pDRro53st9TqPxnKEeZtsTt2Lb8pkpemhFAOM0lKQpx9kGM3084NRh8rY9lxBR
nPb6pw9rLOKy5qMjQjOw77hKr/J/s5Z9+gXI+RJVuttUT/uqHfmTThWkmtVKQD+G
kCy86Qvl7caKHcdNv3QkT0bfTA4uBBF6MLCnjWHFm2LhDTSNkBbPtKbZJcFEiALI
a1VmYwHNCks2AtKOC5yqURsmdQQbyjLu7Fvcx/xtLo0EQrMzM+NxXGFE26fxMEqZ
N0mbYLQaf/7gJC6eZhtaFVnGpQZpYC+q0JksN87aC/5j0JxzxQEflpFgoxFuG6bA
R2G6qAFx7LlvsmdTNIpWBL3GSIpqr5Cf2hmGa4NAjyb8FWbsBkaQxeejhiaJ1Ax0
U/EhaPrET5gQ3MIV+x4GaIf5nQshKQXPbpKrWnf1/2vCQXdmv4L0qWKVh+MEcviM
gBazBlYfv5QwNUXNyTbyqdH+WxenvkbQVOimXAtHHZX6TalyNSfpo4Rs/rFssFFk
8rJFec3Cu9h+BsF48opdjhyfyH3CbTRhi8TeQjF5mr/Kq/SXuTvk6JTDtiSXEbYm
uEXbRSiL8ldk890LaTV+QQo/GU0bcRYFkgnuo9V8fQAvacQbksFiwY2IkhbUz97I
AE59IQdYvo0g2qfDc51anBS9KW5gB/tIe88l09pC9/Eh+9KJ02OxLgKD6f92w+Va
ldp64oqLAB3jessZLMWF9YCrVZ63VHM3DbaeuYkHIYMTnMYdFv+G+WuyYwBAfTZS
VTKj1Ghi6SZ07EZyx03vVL7VxV2Oh63fmPVAW2iQJrWoYihsP7vBdLGVc0grmMbu
Ka649FSPOsuewgclcSazKk1wjNYYQ7GP/eCcuMvczOaHEAdHLLQ+ucZQPRRILL2E
EHW/G4+iayLWdIFb1OOZxGbNAGOyCf4bg2uI+XyTklz3c0d1N4P/Jg2aw5xVQskA
wsr5SF7Vbb+/x/T8f3yqX88PlWVHZ6WQvfUh793R27xtczEEaxeW6iiA9rn4JouK
XQqkG5DhfF3G86SltMf7gENSLsww8n8j80SeFP3pUtQeP2J4qvR4RxgKDrIfxCoa
Ya2nouCaKReb+vyJF97Esq67zW3oHhWsWWhxLN695haMQOgN5zgU2yxVPS8rjJ56
ZCG1wHjnPf4M38yCtNPlxqooEhU7wF9ucmSGb530WD43k1Xc+cc9NEEEh9YCsogt
4KZaWK25nscN/f6FxRU/OxN/xmPH6HE2th0S2dZDWeAsGkPa9XO+huJfL4X+hLwZ
JYffoYWiFreFSUOE2dtQNDEW6wI62sntYB/ED5XDNaDFkrTYDx9qK9ClmmV7ykWw
Zp3FCqXe/FFcPASEPV4RIypZJgtvwwaX4EXlab1q2On0ZdvHJ2OeEelzpw9tFMko
9tp+keUryRsl9WIIvF8FvAY8+0KLhsStiBdnqANYQvn7DBBVWSu0Is3OULFCzAoY
acjdj1DnLZmj8CN4ycNfHhVTnwo+sLBsbTAYwETfEiZsad1hp1WqRjf7LaMheIqd
b4watqmG+hZFZab8nZrKxfber0Q32dOnWdYkx2mViWA=
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
RgYzneIM6y0DP91yDDnoh9shaL2IDv/B47FruJW5aaWJ/6B/QB9gf5RChDqJue0k
9GGy+bEHZf5aIrBF6jmLFSRIOiYXJ+2r6TVEmuQpnqSWfaqkbW+A8NyHJK4JSGAM
/DUDazVU6Tln3iM/07FRHhI5TpVZPQmglCFX5ZWzTLtq1Nfu92s3fX4HRsSKQB9P
+3fyLkZ5im69msNoAn7iRJ0uLUzzZTBDdB+Yg8Mq3Xz66CbuSj8mQctuiKhYXtZS
iTNaepC/Xq+KRgX9o23WcjYo+w6gvhphi58P6D9weGWoQuOoDCa1cKG823/ncMia
EMt9/r6qAfyykTndsbW9UQ==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 816 )
`pragma protect data_block
rvaNbRLIzlWL+8jgZHSfVWgy+8ujZ+spaEX0XOTVej6iKmWMMbdeMbgD/9WfwJcq
DjYp/vVvwmAXAETCGzEpX3FG0t/Y3CWr4hXxv3OrgRYiu+qtustTWCRGM3E0eTwn
5wjndgYGuYB7ZrABMB6iFu9T6HyYvIcNAnZJTvTlLxHOY6HBU0OHeCw04VgIF7ec
V2/ueL49H98xbDZfWMqSQSCUWb1WYRGIOZ0PNOXHIY3KRUMQt2+2yAHXsIaykSxp
33MsrJyIwRKomBl89UuPmfj6O3yNuyqlsu5H2LZc2kMkG8hjFg/YnvU5c302X7yI
8E9fIFcsLM9DWBQR35x3w+asFKlXGCBLD4stfjm0uT0iA4OO3X5k2ps/E5gWJtua
Ifav7mJhmFMBYDa45Oxlaad81mPqjULt54gl92l2yGwPoDBnWWcWZVyXy5Ed1TsJ
BzuGOKB3PR0GB3STHvx2RvyWpk/RTbsx9YUNQIxYM65G5kppAOV469cT4CY7prUV
wnili/b6kRKtKdnUIDgpX2mffpkP/XFtjFeo5n950eHpYUyDObUX8dAgOnSF9oFt
ywrrlqfLVmbDjZBz0bmMt9b07Gs4QLQONWiEN3ubiwKnFvA46b0UJSWfyjpv5ZrM
YHofD1w5/DtuJMqdmxTNJSb/0TERnhHS5Rug7qo01YheQauG5Q1QChYaQyV4v0Vo
A3yX/KPcY8E1MQTYZ9qX0fizNBCpuw8o+ls2ocq277PnWCl/QHyUfeKpMwKp87g6
4odxL5WUtayD/yobNbGt7mEwhLNXUPBmBnpCxjq6yhQpYmI994u1WaS0CBYIujU2
GSwx9caeIq4mtjvHG6eVZaGfMce5PM7W2cK9GXMp6nk888xwY3NzLojdKhbI78BB
XEZ4U29Lvxj3UbOkflJ0G+dQ/n5w7clWHKTCAesN05y9UL59XDt012SCR8KUnjpk
QVH+JwLIgyjXm/LqWH+tOj7k7xh0kmOI4JJ9iQ6TrbawKc8rgzSiW7YGekfqUuz0
isjDyq0EuxviyBw9DxdrSqCuS6VmOcYBSlCqIdleLFI3F18PXO4BATPfhKkrWP7/
`pragma protect end_protected

//pragma protect end


`resetall
`timescale 1ns/1ps
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
Uw87jGixtq0hysWIooMblGeyueG7u8cS1YFIg8DCuZNnRQBcRH96idjE5QaX6k+W
CM8hDVVgDrozFsZ2pZlbNtlaY6UWLutPolJyYOIwyl2WtL3/x8upvB8zYTQR20v+
PN+Om7NeIzyYmgHVkx824Q9pme+OX8nTsw0D5Gub5AkW7fuDBaMe9X9x8rqiQI2M
i8pKZpydNr+TA5tN7U9hBh4WMEhlgLvy1rJKqZ/y+zrBxC9z/7ch6vr1wzwlN2OZ
LkHlOtqUkMSuVrWFGNIxXd/WXCR9vS2EMjN6cms26Xs8joJUR8nkjBD7VdXOsXRc
OU8F0Kv+bCEdvU46nt9W3w==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 480 )
`pragma protect data_block
+hP4ObkDXJ+fflYN00glujux8ScVBrO5Et4r7ROLxTv3a1RSthV3Xr7D72Z/cw60
eVdczi8I2yehZtq3tMd4filCXWdSYbjBmtQeSHN6mpw7mHEjWtiMcSqwhDYC1h/Q
MN2UO93q/V9bIujCz36qdUwBmZbLuuoZdrcvqOcBXX6jg9gs0DYKvypD4mr/9v4U
ZntO2kklXKSKpLejRY3cPq5ka3vRYDg7GqI4Mpa5VX4D72AllsnDSMOFJdwypWj3
dtXVkwyJBauBCQPjVeu6XTXeCPU14+Xq8wQ8VGq3qAD24nHo0wIJRTo3jtYW72Uv
hTfL51nj+6u9JHIhfU4XToWTVFHoRFoImTBJ4MOlR7O0tE1CVI2x/yuI+c0+cO1S
k2Ps0BfxB6ax0WSwW6lmupiP59JdxwdxYUTb+p1Sm9LaqVa3bMnscsSxbtHLuezJ
W/zhG4Wu7Le912ahOthZfkp32svRafCc9mS0Gq4yDpo3Wtfq2g84hxmKOO5fQA/z
6xZ1fa5tyG6z8jjbmGLvomS4GrIzMARNbTiyK7uefsw0HYPKAZeUOcIVVYsrDuLz
h7GSlkeBPjuDF385USH/n2wfxmRWmng227EykUhXO8u1Kg0UILZdYcUviJGkO+UG
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
eM7RjUHe7uEqGZQF2Htl9k/kXyXX2EXIrw9DfhxrO8QISS/46yurjTSUL08ex7Fg
Dtsbh7aO5+vBgINNf//V8of/4kwjKMlfMwoDA35kUILLSpC2/PTueUyf/StH6SU1
1Qb7XYQiqtuPIqGDOS3GkDwBOjdip6hR4E1mI0MhnQSxe36ccaG16Qoia8P01pwj
QQyijMHIpRFSnKRosJrdQJJKX0fSJTh10H+Mqf4f2sHGjGboDpPh10OwSq9OQVY2
5wqKdtc05w1/uBHSv9nI1MMvjcCsCsfYbG6/yulRPzf2dSKNS1ARO0AU3Ngzeieq
NJROf0xZvcbP4pZnvo0FsA==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 816 )
`pragma protect data_block
tMMJkThwy2RYvOGNJTlJxkMaa9B7M8DefwK42xgLknB8rvitv/AeDgheLg4djtMh
QDJ4VRsQoCPwRolU9cUOstG0Gv4QPDGrD3Flt6hnUb/o+VPr03F8M0udexSFC8xv
JQbesfw+EMuCTWYtrXj2iZ8TJNDM3TzoLnGLHhKcXsAAvGguds/EPCA86ilj1GyP
C8W+Nkz27UPgfcSFKSm4OL+CRm1L+AHZOU7Cp/nPnsTLRDLpW7FZOT3mrj4QSZoW
RGffJGIZJ9UFqiAXgWwHH490X87jUfFe2oK2By1ZXN7Kuc/uUIAWazjNYJgh7+up
XE4PvuvmfeCIBsJ1Z7OSW373kvd9Qz4FMyt3AeZ25Pmb3rbaG11uZ4yPDPEnj3OX
7ZI1KPIxy+gOB3nsdOSRtTmMpykwTCg64UJbykbGvIVHj8arB+NouEQyt4s0iUm+
llrX/8r5QHJtNQYUYGOzO2j8m5fr6AEf+19Xxop3RcTXjtAyJa+uP2U1PpkaXBVQ
Ho5kt5+dukvqOZr+gkdd7Q03Kyrihxd0aoyl7ehPX1kkUL2msTsq0yITetWNt1IB
5JyMFEPsTYlkSkTBkGxp99JRkXI4F0Xojy7RLN7tIMYzUp0Vq9LuwM2WyuePE+L1
lezqsOQK8WHa/suXT/i9a5vd23Pb0dbG6VyhNxNAjS9TOMsSflLX6uYQyutlaS2M
eTQ+voTCvdcVMTIO2IZe/Kvtp+Yozsw0VJyZx/nhJRimQ33HP12Lv+Mpw2Kq+ZNN
cexBKGmUtyiYtIlBivY3l1J7qsrGSU+Zlx/AK3gGqPqgK/548uBA5M8ZkA1i7+44
hfG4V0NKmpuhgCupAI+xv+9i9T//WauB17ZEXYWW62r0fVR2i3srWOlIjJBeg7FT
WkyCXvvZ1YKZtYr6qDx9GmEfel+EJDF0uviqiiGtZc/rFue1Pi1gHWYONjeScA9B
R+/kDioTrFAQ62JyxDAyryuSy1Yn8+qtw+eoj+KYOg+ur61qI1OA9IMXwrfoOq3s
bEebdZd/j5fiNu7EvWsg7bqZRJVNcuLrtu3OxSeyN4EujP4J5inkyFDjJzB043jQ
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
Q+iK/Xl+ZfAFDeapGTxj5HxDb+m3cIrtWq/Cq9PWy1/zaiMdI2vJNQ2wPiNBPDTo
W9uNUtGyFV/r5tyMLlpzNQTn5y3grqTB96qFIEEZ4AXITyorvPQ6aha4AbCaQZaP
K2EgIMzkMl9G/DslRZJp4o9vXSoI+tQUuCJYapASmS2UtBWOiHh3RH2Q9RPWVnmq
dF2PCfLHjBc1DiVFlDC9uFxkNnjBoUDPb8ur+CxcJElOq5PbJgh9gXDKkjPtcO+N
tIb9R0yXAfae7fqhzsCXqSrPfK5T1V/L6088E19zOI9TTo66bqNOV9Y/p/yQgjhS
2EIuuOYDcACxoVcksmOg/g==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 1984 )
`pragma protect data_block
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
fjvmDR7x9nsexI1SSZbf4Q==
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
RqqRIJ14cV2cj34dcxmTDfuSUYRfhJITLF7sjpswfOWuc1Ew2l2fPx+4TEyrXvhX
dfbFtNm7s46PFHIqC+k0RjD2JvTjBGYbuD/3gLG0W1ElBp3N3bYBJrpLJltyJgIo
8tMlLOeRA/PDryoVTFwU/eLqk3yym/GRld5WnztJNgqDrQ/tRGQb6KObcVjCKQxh
wPJkRBZmP0OkvIAoWtJfBEhn0OIOOzB9KQUUwPe/n1/SwtBTKsGyuNIfMTjHD3oC
qkRIY0loBJhfjJ7SwZhVIvR6C0P6SDVeX70rT9HEkrI2ue0w0WV45kw7IrgXV7Zr
hQYe2ao8Jq5R+c8yQOipiA==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 1120 )
`pragma protect data_block
eZnekmUv9z3PW+lQx+Gami2dRewl/38gfcS2oHExELd0ZDoOfzZxfVRxXVSpt0Jc
iIi67h8OfUNUKjMmjv12mPHH5zVsAh8tT0O4iCpbLEnTdM13KETD5IICdiS8Zssj
lkzZI1JhocJUjDI6GAJ00V4hjU2wkd8O/6JNJu61xHVWkcccLV5d1X2R5Qb2eJ1T
wxBsEeiLjIcrjLBzb+DMO8EBlHlILUZlCAwUhemulDiaL1jeElbcQeFIr+BPkQ9A
g/sDVxvkrup82x88/W0q88Nq4cuagcfRA+4uFqLJYDRdj7YquF5yOpzp/LAXy8el
cwZwpVZlEEi0pdpeYuvTkIfNcD1bcMmLehm8hKwLGyEzPU9HCUVzw4vFB7NiHYSX
9h9Yi8Sgrftc64HkveLONhsWYMAt/Aysi4xm7ggTUr51zquvJwA7gq5Sp181fFTV
j1E7g85XeqGPGY66G/zFgD6IM8m86ARKV1VdsDJYZjOkUY+pp5/JbnFFZy7q4oVX
5FOPOU5e+rYZQwkyVKwRJzm/HBu13uLkuJ+6uSsSiJRPcc3HJz8Vk316xcX4ELJ7
nKrlaxbmDc+W26F9BC6o6MeIN+2ustOqI5tJVydyG4eBRHtqvnNCtaRP7wztB9iK
g0wFMj1ovEXSsJmUSzg5I8bhQC58SlPUbOyrqbW2QuULmwG6U8ackQ+8FOGcaNKo
4nKZZ3sofnQbwSbhzLX8fciMu1rF6QKHH9gJSN45DKvqAj3korXf+Uc4FRTbYbIy
QGoNtn1Ho5PhTQ7CmK/gT5P/GBJcWgI5NCA/jkVjfah72B1lqlTCZrzY8mWHqZ76
DQCxnbBOHz+d8FkrcM5EqcP9jxDXrOeb45W6z43nQAD3KrjEBpR8iBkoo4LEyAVm
W581JR9VN1VaHDoXNoHnEH7Of7ejdRse2BJH29bcW12B4xU6oGqwk7tBeSlcpbnn
eh2M+6Mx3/tLuuHQ3L6C3SquK5FN73lBoq9BLPBhXISBNEz/821fdtOIcr/upY8K
WGfD++lc8hEsHD6GysogXMRGbTK/lJPVSb9rfseN+bOYi6mgePMGT+G937dAepW6
5tUa820QPcIpHemATSUb28nawmAP4RDLbHXmr2NY1AK4G0xZ/bnukjVD49w+iSlQ
Wde7T57vUTY9UJSxFpnPGM7zUecvXQ98n4FORJtV41hCWetAf4sX2lOH956Usvk8
slEox9AhNtUuDbi+IOnkl0Ll6W3Xysl9Wk3Tc78xo16fKARTGe0mue70reY5Qf9E
JGXaa80SpyE3SdfKIs6Ke6zF4l56UGxIQd9HeWHvTRvsNEVKOh0qqQXjgeUaph5s
LI/0BFeQszmH6EgIQa9Opu77LuuurK/8SVf3BYst4wusl5TUmT2ZQL4mDHQ+4JJi
825HXwnRJ+H5cNfWbJYeg/77ufttRRLJiIpwqhFP8CtyLXpUvawg1mSRucsFZfim
gPkuk+jT+MCr04ji02Zwgw==
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
OriMaQ9d6WQZF2cRiHfXJ0hz1SrFWq+XIvUWZytrR7sSiPzhiBKaloXKsk54iVgl
vrtLcpp2yjid9Lo8eQP8JsVPgUbKt+d7bNNLJkpLVs82RIH0yrOTMGLIzPaA24xl
H0Yb3IOfblf7lfOXcRXP8o//3PnV1bon05GM7z3Ta0kXVDNU7VF0XCa/W2FUZbbk
eMuBV1pMzguf2JqsbUL8phxKZ/b6NKP9UEyCHAi5S9OSIkJ2ycfewGVcBBSKOO5E
PmBIvkigwyKGDrl1rjTSzd49FlLQwXDxoWA1ScwO2IE0LFQbP4veDkOk+Fy0w8pJ
jyBn1udbb01GcghWnvj1wg==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 16432 )
`pragma protect data_block
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
zDQAt/bbZINUiR5tfrjY6g==
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
b5iTJ6ma5ze4VGkqZJpgxuo/h0u1RE2wD1fmHZ+BxHDQxsXWvSCMHcWU7WEI/S0w
suTA3VMCq/apIzUrSx+8phK7uV79XOJFH8yc1P+wqOA7jZm6IkZb7gCyV3ztoAMD
9VVoOPL0pzFSqjIcWRmWMed1b9tXFy0BDiFn65cpt0Aw+m13ZqYzb24HjfIlIhy/
EF5z/i9GKot6nIduCoZenaOIxFgoBe8AFbEyDVs6bScRexlf9xbnj2P73YLuLcde
6FuRNdD6wGr122/78Z8ZsQOjKEVmnLohkOkXEHt0gO4sioyuQ+JE9moV9PWFebrZ
e56hTLoUt9WITHmtYnyabg==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 41856 )
`pragma protect data_block
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
MnsnyNOKGaTbvGitGfyvLBKwUflKX7bO9n15E32p+a1a2KQJebL5Kk63K7yJck6t
FAo/GaeOM80mUiZsS18GjxBGJ/OEOBjGDZCGZuJUA+P3tJgC9twOkt6zTBshwGIx
38U6PHxd6G067OTL5xVUWFL22LjV3RfbpVcJ4SY1Vn1uZmMrckjFl+0LvRkN+H75
tHQ55NCUGR9zLHt+HezMowKNyfRpRnLYG2xg5rbu+DyXA2Pzl19r/Da5ZqRpWkqS
8Q+NggmO2CV6Ettl9P8UmTiY6hzBv7ZvXVUa7RfTMfqtIzyHQ1Znlss76rKxJjNr
3s6PKGjuK7T7mj+aCiA5ODFBoulKSiFcUHkRds0oO6IsSHI7rGuis6dP5BDq7exH
XtcuP3ctBxbUmQNd+Oj2lCfqWUJS56se85h3Ds34uYZ+XxVKXIN6nPkSztQC2776
QKHjuSxlGRcxQRAsJRlsIe2hTu9HjSAOoHAKoKXw9JRhyDuOiJn6En/QYuIsUxQq
2f+NO88IMiKOiQdoXzGT4aJ857S32xj2zHLmcCr2KH8wOAK0fwMQvrWdw9n5YDHW
m4uLIcPXuHPCG/wTFtAaR30xv6N5otjsiSqIGwSwp6FbeH0D3nWuW6LWd/p9Gk7Q
Pz7Lqlb9s6X2NCuwbhHpqd+71gIDaFHAvPEz6fqw7r7kkxx1CkMNUTzok+BmFK2j
CuKdyAzNgIH4sc3u+cyStmuyqjSdDDxr1j8+6z5yHrkXwzdOrk0H78rMY+bVufcR
Ei2VpQnG294/ALgIzgq7TFf1/w6NnVrMmCPXv2veFpOvfw5jwWxVzG/GgoKESrAY
BnQ8obmE0zoDwJb78P4xcuEPOzij/4WMgczi7cl2eUZuNyMhecA4KLaqKCAwhOQD
oj479PNExlK6n+yyNkb0TyDecIsKqbDLBgSM6qr4vZSBp6bVQuXZem6+gcW8jIBn
xzSZ/hPa5lIE2w7pRI79Cp2vTkyWfmYsfjQ0O9azb7K5KOZ2x4Hg5lj5+NJfWRCP
VtAXgK7COWOAC0MtBn2qdD1KnSUqMRuZzOM8nfk7wRaXVt9EK+vKsOSo3pEYMfzn
P/kWrliz3rD+aZz9JdPOSySjq9Q1UXbirUKeKwOzZ4uYwaxBFKoi2FP+xw02hWDa
JABRv81CvzTg/MSmeFFCo44EviVEvGm3IGtCbkcPwKX9AdkxZx2hTODm7TzUTDMe
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
LJJQetPT+27vuSnEIEpwRnnGz6kkSwMpXCqzY8kzwEl2l+ZbqGQhRPzT6IRyBxe+
LaaSVVXDVS79mtiEhBGyQXPPLuMRf/QiYe7QayrOCdO+o+Qiq4yuQqu0d5YzhAV8
LwBS5ghrxSeQGuj45pylH92BUSTTrb3Txf21fgSDBK77n/+BO5F2r3hHa+4B9EJu
aC+i413G5/QVi3/rESEzWc55/z2cH/kZtKksNL21lfRDL4ltyODvBHmCJ2tBGkwX
AlDmY2z02obTDpCZT1QegdYBj1ovCYQLRCrWFEDL0nJ/IhjGpGldQQTV8NfOyHdk
s7ltVw7byD/ZDi05/xHrlA==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 13360 )
`pragma protect data_block
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
/xaSnsa8SlCOiAmmPebaBA==
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
b31TH0X+tC39Dag5INDZymuZI3UajFNky7dDqiMe/UjD/pxsR564SZUVqKv3WHN/
lC1VYy+jkoVUSKk0+aoNZb0zEA9DYeoDqVfOpYCjZslPQKGvqcqXpjGxsM7RKyoQ
hnXkwEO7ji5Va2ySIvGWIOFuvxkd7j8OnaLVU0gMoLlDWEAjeB84HQwe70XYvcF9
eHmAtFYcpM9avrHwv0OkvOA09R9ucYvJEzEG9p2mYucW375VyPBZMJw2OUIjyyOa
IdhM/8YWINaWknunSwN51eU+u/CtVy2sElP2S5uMNkwcK8j5R5+kefFXjTdT1DqS
wjieKPPvQDR+KS9GO2MLPw==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 1312 )
`pragma protect data_block
wkMyEqhvyg8evXzvKYTI2RGeU8j7vbKhh94AZXMjLxZu/NOPChgc28J0k5ehoPJE
fdlvzqBZuvYkUnCXQ0IJvGczVPwn5jfTyUQ+I62uAbcZBg8cMhME48LV8K+n0SqB
qESW2xyDQYVVo+8Exk6bcvmA4w3OWpALXx8WSfPnkQUzcKOyUWQ92n0YYoX7Q/Od
FQYeBHHA2//V7utKogZdV7aW+Agh4HDoPcGSrQX2VXCFqf0ZhP+zNjCrYZvjg7gu
OsDgrr2ZQ8ax6tS0zSWzAqFIINTlMH6EZyW+KxRdmfYmtIsK+24jCQC14vmvyBct
MtTJjJveuQ+7Dmdc3p+bQzdggWcG7Wk6pA/z1d4h36mN9u3HsENapueDhb8jR7RK
ZB1TBlthvg05Pearc3ji2FFkf7mhquZWEqnNZVER0ntkY3OrnaMJ6neB9HDh3xMm
mNh3vguX1szwAJAwp/w8VDHjuUOp6Bf4IvO6dlirBxavCZaUg1oqVymkilLQaxuk
APkzKeTNReUI5WXQhe+wyqhd7jfKKwB4AMbQCId56Un4vFuIosd+yXboXgSNqZde
6O9zCRMBpdDFQQa5JrdIZ3cNP3mvIyn/wFotwijDiTi3vmkx+itbRPqiDjbj7ffB
KxeJ46yWSB+UxgWOxzMAGpwLBZJOIH1z1+9aiF+edtu3tJgxk4kXdIpEDNd50ySX
t/hDqDV/0Tr9gbNstW6vKsMwHu68IhOF9OlAGRadpodMkZLIK08Gn8DktSPEcQmp
miwJY8eACI29LVmsjAktanKcTxBx12MLkAwkKYZRszkEhvvn7k+6OHXBe2UnhoBI
U0Xbpk+cW6fKUFvdygrqeZn76mHAk7xjhP197mgIauMoLB4hBPUQsHIJXQQoG/0E
sHGMG+8rqQmQ2EilOMkd8KjrkK+HmyFstCJ8P4euqiIEtCYCbtUEZMwds+XORnxC
O5gcERA0ksz8dRIJemvavpZ14GVn1v/2dM44TK7Xb3dh1Qk5Ov0p9UHDWCd94hfG
DkwNq9P34r29aqPMFeSTrYs9XxboSm96/lgGnodP6KM6iOkd4akJBGJXdxqdN0Kx
W3GQ/3mTn7vvDloGYIcm3u4uvaIhAvpUQ35oqSVcMzn+xVDgFgy5fgTCzUuakxWv
NAeParaujMzGg9mlwfR1YDGsnCS2k0h2C61AOffzMluQyWuGZsG/8vbeezKbZno1
n4eXelxXAR5J6edf/SW6e00MU40RhHKxMtfPZhSKYY9y4W3IjpQNSivOg6kyZCcV
8pAh+1a8X7oXFyDh8P0H2igNIp4cMgTPclaI2LW09IbBNSaSgWvKsSidT0q7tGqn
MhoZfFqXWIFay/hsxkXUKqnEpUgTJsXB7Hc2l5XHjyGSyBnzsROIZQX7I3y5iXid
7eeHMYFwsazWflvBPTXHppnR4unGllDiWsMzU+3vSv+acbBfbd0f2Y7rtBRxXVVJ
KBKBAQReywIRwX1czm1hwfQeQeW4MdAiqoUBYYdfUHaGnKjRy0uAc20XFB8bhjOP
tiOJDB0scptRUwSVDD2352woSUcFHtFVXnSBbnaM3gtG+s2BM9WhlBijioTnT67a
WF0SHPVmuqRETc6e5Lf0sfBw+XeNu9fQU3023O8O6ZHp3MYXlTWg09z6ZLnPeAoB
r4b1XWCP93VfbOQXkUlwD3xhC3XX/RVe0CKxTddaj8uKNOWeHOXbpGBKr5bldSFe
YLhFw8GyQvkBnn/zh+tQGw==
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
mn/FXn/Nw6wiap+wWikNmd4I0ZDu7e7MSQIW3lP0bstqvfST1bwU7S/6BWP4Mk9Z
DZLKeYuVqPayR3J3t2ZJ8KGY01vu6rEHlyvGl5k/SzNOU5maOzMV4Sv6epm0/7Q+
99MjRXCaSvEx/Sq9/DiXw1nGMTF24rG2x7CA8iPmzGvQvK1p7OOvWPB5dpHk2tfg
ttZb1ir60FmJ2wpWlYZBSL8zgv+bplzEi/Vf6+S9V6u17Jacmohl0bAKz1THkKwN
M/gvB7mfIL75jnmtK6NwmwimKu0yABwbtWdmnHEJK+UaNpLIs0j+octwLHaPww2e
PbQfQF4OBuAxhw7YyJXqkg==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 1024 )
`pragma protect data_block
9Cv1EneB/Ostn2pZc9hwpvHzKASPVp+Si2CP+VskRc3+sWBd8HJay9z8isOdLcWj
OvjhAFwWSKI1eAPkgKPoPjHd6t8hF59MuFfMYMMlWlcjXl/3fKsP4/uM7lI6SPza
zAK/mIBw9tYNnq4FjqSJpVDzgWWY/3IIQ6iMKYemt8AmOG4i628xj0dks2cJtDm0
KPfY0YmYo2TLWAmwD56hXSmiyMGJh25rn8Pd0sQuPDsIxA5irRPHf6i/8u7OiaV2
yvZElevRiiSlFzkB1tAF/9TqU+igOJXBb/zhkvLWoVeEzpD2c/8BGZ8N1o+4VR7f
O3uvxbtmU1QETuTwOsW7jIh8L9JI168ezJfgIDbUsnKFG23udRLFIl942VMSxlH9
eKgoe30U+jtx4biMylplzraHluaVtQEmK4yEcN+gVN+767uEZgOkzrEJ4RMZ2ubS
TVmiPGYEuSLyZoeGaMEqdpU9OW6QRZXphzXCzXfNfjOWGhqPpBh3UkyDfFdNBspf
OfHO097jTS9tc4QA0OHTg10zIWaoM1dwpW2EKqB2uJ0640CC4sN2XchrB3YCfflU
i5zNXxFxqZizWrhDXQ9T3bfTP8uCxqLj8QN6EjFk9IH5JJYUe37mh3PziD78rpKs
9n6mvgLWcKa1z9yXooHjF/lfuvNr8TOBy861ZQDq3hIShvKwLvPrPVWxmoftsc7D
KTpwu3GCmf5uTl+9cUPH61s8KAtuFIi/Hc9iMGYpaIzs1k8CkmUfduVSiIJsWluF
Fz5pnNV983WM6T1ouWqamy8RX+G1WW11sJMq4Qh7JWtuY+IR8rMH0Y1aDj0C/9AN
I/y4AuWnTmjb4pQ7MNYZ6vZvkqVSh1RaFtOLnkWWw/JFEm0iC0uJNfWPDYhpL25y
XRySLPfzrZroNF0aZ9Eb7UsHhdTPNFcWSB0kC2C+2EyoftRJqEy56/ZJfmGNRITL
qIo2NsJqsgbA6w1eC63DxYZTsSHea7VEC2vFD+6Vv80JkWNTazvG4peqqIHM+IfR
u+5DmjBCb9r0PDCb7iCplcXoGSNXjTTbmZ7hB4N9L6xy0ffYush1TZ/gzd9IjpLO
RRFyrTgj+GP5kH50PgTOPu3NBB9R9h5YYZhXe47TctLYaG4cTN9J4k6xcSw9G2MQ
XU11WFsl8CBcMOfFe2DuTcfacvGJKhABT8meXFBRxFDhXuhSwCnszwp6zwpgYKeO
Ep0dPXUugmQYx2Rtzo3VgxMHD0doDOomjrZv+tb9xUjRN+yBTd1OSqJtu8F+1qBO
0d2mKX9chLxN+2LBry/8jjN/hJyqSDiUq4yiOIUUSx2AcOw1wfjhtf2xqT7TsNZ5
pRPy20Wnt9oH/UVUoIWORg==
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
Vi4HKSCmBBeHX8VYnEUZVQFVBMcetmBpg1swz9DrVF5K8Ojl7F2HsMWCRG2utcwS
8nWtRs7BReWnZHN0z1eBwkYi+9soOpZ198nISWKY1w/S/VhXj7TLvbrskCTSPLXU
1CQlroPzERjmqNqARC38RAXpBdlmRw9FZmcHqBnsBdLGl7b8NwdqDsHgaN5/DRG1
rH5RyP9lMXKy7sxP7su2nTbSQc6tpHU4P/wIr8+/zBya56HjcO5bju+raj9uj0Zc
6Ecm3jtZ7G71twM5k+eiAbJFVxCYkBylBkpeoP5x9S18S+quhA++lGc6pWD3YlDh
25vGDM/GrCECnMGpRrvU7w==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 17152 )
`pragma protect data_block
+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
xtEbcMaMTZvHUSeXunT+rg==
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
V/bGAyRUO8k6Axf2Fdx14aP+XfOJUsgNZ3j8rJVvtayZnkXfUQkgwGkTLzWX89EF
XUQzeYuXbDhDCeZkMolU/j+SL8PJuLzweg+wM4U3s3hEFb5A1u3MVF68Md0e7Hum
CBxC/h5hYTDOwWyxHMb2I04QomeIAmAu5OB8yXj09lBXw0BpKMIgpKcBVhToGazw
3ARfCrQ+7BNcXof4DWoC82UqegrcJD8mcrtMVC9Zz7pwPl/MN4Xf/uLQJZPfD3zi
wQ0hapjQKRLjOdSjktq0Brf26eLxNZy0O6cqP6yW9mL6yD8Mfjw0UXKl3srh8+O+
Bl8TYE6MRee5gG2qkUNoFw==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 1824 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
module `IP_MODULE_NAME(sdhc)#(
    parameter                   VERSION = 32'h10,
    parameter			        DATA_BUFFER_DEPTH = 512,
    parameter                   ADMA_DATA_WIDTH = 32
)
(
input                           sd_rst,		
input                           sd_base_clk,	
output  wire                    sd_int,		
input                           sd_wp,		
input                           sd_cd_n,	
input                           s_axi_aclk,	
input           [9:0]           s_axi_awaddr,	
input                           s_axi_awvalid,	
output  wire                    s_axi_awready,	
input           [31:0]          s_axi_wdata,	
input		    [3:0]		    s_axi_wstrb,
input                           s_axi_wvalid,	
output  wire                    s_axi_wready,	
output  wire    [1:0]           s_axi_bresp,	
output  wire                    s_axi_bvalid,	
input                           s_axi_bready,	
input           [9:0]           s_axi_araddr,	
input                           s_axi_arvalid,	
output  wire                    s_axi_arready,	
output  wire    [1:0]           s_axi_rresp,	
output  wire    [31:0]          s_axi_rdata,	
output  wire                    s_axi_rvalid,	
input                           s_axi_rready,	
input                           m_axi_clk,
output  wire                    m_axi_awvalid,
output  wire    [31:0]          m_axi_awaddr,
output  wire    [7:0]           m_axi_awlen,
output  wire    [2:0]           m_axi_awsize,
output  wire    [1:0]           m_axi_awburst,
output  wire    [2:0]           m_axi_awprot,
output  wire    [1:0]           m_axi_awlock,
output  wire    [3:0]           m_axi_awcache,
input                           m_axi_awready,
output  wire    [ADMA_DATA_WIDTH-1:0]   m_axi_wdata,
output  wire    [ADMA_DATA_WIDTH/8-1:0] m_axi_wstrb,
output  wire                    m_axi_wlast,
output  wire                    m_axi_wvalid,
input                           m_axi_wready,
input           [1:0]           m_axi_bresp,
input                           m_axi_bvalid,
output  wire                    m_axi_bready,
output  wire                    m_axi_arvalid,
output  wire    [31:0]          m_axi_araddr,
output  wire    [7:0]           m_axi_arlen,
output  wire    [2:0]           m_axi_arsize,
output  wire    [1:0]           m_axi_arburst,
output  wire    [2:0]           m_axi_arprot,
output  wire    [1:0]           m_axi_arlock,
output  wire    [3:0]           m_axi_arcache,
input                           m_axi_arready,
input                           m_axi_rvalid,
input           [ADMA_DATA_WIDTH-1:0] m_axi_rdata,
input                           m_axi_rlast,
input           [1:0]           m_axi_rresp,
output  wire                    m_axi_rready,
output  wire                    sd_clk_hi,
output  wire                    sd_clk_lo,
input                           sd_cmd_i,
output  wire                    sd_cmd_o,
output  wire                    sd_cmd_oe,
input           [3:0]           sd_dat_i,
output  wire    [3:0]           sd_dat_o,
output  wire                    sd_dat_oe
);
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
Y3W1b1jT1HOiICPXAaEBokY8oGzepBR5lTqYPf61C5sVsY13Gp/NeUUrOTlLqeYX
ZQZ1SpgKKDzp1R1gGejFItM/EasyiZbqqO64uP/u0SX6+Slf52pHF6Q5H1TdxB3B
OGR8DsJ7GTIGAn7a7fMmEuaXS67kl087j5RIylrQk3s3U9LZjjG/G49Q5/l0ozTb
YZ5JsJEMnMCMPvKBoqCPIzVRjW0SZeCdd32ylPQUjQ8tqSGmmdzpkEfWcdChnA7N
aQ4Bnigsry51vE0jhV7pq2mLlT4O3ibYgMJXWpzlfJl2Hfzz+FNmanSsS+UYBg7Z
Ows6a+Vy1LIUVJOuYKRWkQ==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 46560 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
KhBjLthxpBRSG8i1I/0EmVx3ajZfYQ6cV/aU1TZjo3e96Kgq1Pg7yt4ZBMGiQUKx
3u1HerA04Ue24XDKPVg3HmYUFee69vTalDkKTw7qi0KBDFZUka0pnITL7rZIDBUY
hLdPqYjY5iFQKMaWzYAnom30tS8IUVPQNexibVniS7teaZjRPh1g4rt2nQAYaCbO
7uKwh/n2SxfI8RserxuISA12XR1GGzJLn8j+jaKQ+a6s3JVKo1WkdcW/oUggNwV0
2VywSsKLazfIrpvGITRYqTJDQB0vt3/DYGc6xRmFf0T9dOMtghbVnG0WhEbtDQXf
B9xfUH/blzFGz3uhZ36pzw==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 2848 )
`pragma protect data_block
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
bDvJnVBFyqNeKZqbZSKoeg==
`pragma protect end_protected

//pragma protect end


//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
X3oNre9dMp7zWxNCsPx9Y3ZPAY/JAZfWF2WB4sn9YNfxUDaaxq9wKcYahnzAjIVR
KDVKr/U4kKXKvXK0IeufX7y/iNzsn4gMXZTmUFQCZGM/RpRTqTuOTZdQ8YZuT/GU
r2gUZymDTgRJs2ZsxgViF5y8SCmCjlyjkjpPSJy+Pa69N03pvYwfDGWHtc/k6Kjc
EzHH6lpiKV+on6VSkptr5N1TiSE4U280tMdZFwXgpKespWmulqxPqGV/a922H1wO
miq2SSvtYRKB+A16CYcVHyYVMjmrQ0kyrlSUHQMKYgDqVIQcRWKJc8l6I478yByJ
8CKXW+Bx0Z0MKhAX9bKVtw==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 2528 )
`pragma protect data_block
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
`pragma protect end_protected

//pragma protect end


`timescale 1 ns / 1 ns
//pragma protect
//pragma protect begin

/* Encryption Envelope */

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "QuestaSim" , encrypt_agent_info = "2021.1"
`pragma protect key_keyowner = "Efinix Inc." , key_keyname = "EFX_K01"
`pragma protect key_method = "rsa"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 256 )
`pragma protect key_block
NzioPzf76p692pGmGqykg1sc/wp6cPCmoaBUPdd8OxXMDcsh4xg+vmkQA1TbVKby
Gwx5FVtKdQTNvL8vL32nhq7gKVAPJ/pp3OodeEZr2qfCvZXKSSfcc/rhbMuAfjsG
XB4OIWxkwBOCYg0MjOj+7ujzN1VWymM85TyPu+zyVbe9qaWCIMjVbHgFxmZ8i6Vw
lMT7/x92f00fSdu+jPdzD8FP1U57Az1mDbfvIM5TrH+LJGeVzEm0emdseH/CzHfr
WiELSQc3otT+cHMdY2ruxJ5mW7aatRQToUjFNn+q0O/SY9aecf+4QmK++TwHx3Ef
UNLzADJRs8eQ5NBacjqjog==
`pragma protect data_method = "aes256-cbc"
`pragma protect encoding = ( enctype = "base64" , line_length = 64 , bytes = 13504 )
`pragma protect data_block
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
0l8RNWmy/cnOoKVkFKiwcg==
`pragma protect end_protected

//pragma protect end

`undef IP_UUID
`undef IP_NAME_CONCAT
`undef IP_MODULE_NAME
